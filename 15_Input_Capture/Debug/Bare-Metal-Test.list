
Bare-Metal-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08001574  08001574  00002574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015c0  080015c0  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  080015c0  080015c0  000025c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080015c8  080015c8  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015c8  080015c8  000025c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015cc  080015cc  000025cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080015d0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  0800162c  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  0800162c  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000012b6  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005b0  00000000  00000000  00004342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000190  00000000  00000000  000048f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000112  00000000  00000000  00004a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001634  00000000  00000000  00004b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000021bc  00000000  00000000  000061ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000553ec  00000000  00000000  0000838a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0005d776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000c54  00000000  00000000  0005d7bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0005e410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800155c 	.word	0x0800155c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800155c 	.word	0x0800155c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#include <stdio.h>
#include "uart.h"
#include "tim.h"

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
    uart2_tx_init();
 8000286:	f000 f991 	bl	80005ac <uart2_tx_init>
    tim2_pa5_output_compare();
 800028a:	f000 f8c1 	bl	8000410 <tim2_pa5_output_compare>
    tim3_pa6_input_capture();
 800028e:	f000 f925 	bl	80004dc <tim3_pa6_input_capture>

    uint32_t captured_value = 0;
 8000292:	2300      	movs	r3, #0
 8000294:	607b      	str	r3, [r7, #4]

    while (1)
    {
        /*Check if a capture event occurred*/
        if (TIM3->SR & (1 << 1))
 8000296:	4b0a      	ldr	r3, [pc, #40]	@ (80002c0 <main+0x40>)
 8000298:	691b      	ldr	r3, [r3, #16]
 800029a:	f003 0302 	and.w	r3, r3, #2
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d0f9      	beq.n	8000296 <main+0x16>
        {
            /*Read captured value from CCR1*/
            captured_value = TIM3->CCR1;
 80002a2:	4b07      	ldr	r3, [pc, #28]	@ (80002c0 <main+0x40>)
 80002a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002a6:	607b      	str	r3, [r7, #4]

            /*Clear the capture/compare interrupt flag*/
            TIM3->SR &= ~(1 << 1);
 80002a8:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <main+0x40>)
 80002aa:	691b      	ldr	r3, [r3, #16]
 80002ac:	4a04      	ldr	r2, [pc, #16]	@ (80002c0 <main+0x40>)
 80002ae:	f023 0302 	bic.w	r3, r3, #2
 80002b2:	6113      	str	r3, [r2, #16]

            /*Print the captured value via UART*/
            printf("Captured Value: %lu\r\n", captured_value);
 80002b4:	6879      	ldr	r1, [r7, #4]
 80002b6:	4803      	ldr	r0, [pc, #12]	@ (80002c4 <main+0x44>)
 80002b8:	f000 fae2 	bl	8000880 <iprintf>
        if (TIM3->SR & (1 << 1))
 80002bc:	e7eb      	b.n	8000296 <main+0x16>
 80002be:	bf00      	nop
 80002c0:	40000400 	.word	0x40000400
 80002c4:	08001574 	.word	0x08001574

080002c8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002d4:	2300      	movs	r3, #0
 80002d6:	617b      	str	r3, [r7, #20]
 80002d8:	e00a      	b.n	80002f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80002da:	f3af 8000 	nop.w
 80002de:	4601      	mov	r1, r0
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	1c5a      	adds	r2, r3, #1
 80002e4:	60ba      	str	r2, [r7, #8]
 80002e6:	b2ca      	uxtb	r2, r1
 80002e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80002ea:	697b      	ldr	r3, [r7, #20]
 80002ec:	3301      	adds	r3, #1
 80002ee:	617b      	str	r3, [r7, #20]
 80002f0:	697a      	ldr	r2, [r7, #20]
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	429a      	cmp	r2, r3
 80002f6:	dbf0      	blt.n	80002da <_read+0x12>
  }

  return len;
 80002f8:	687b      	ldr	r3, [r7, #4]
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3718      	adds	r7, #24
 80002fe:	46bd      	mov	sp, r7
 8000300:	bd80      	pop	{r7, pc}

08000302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000302:	b580      	push	{r7, lr}
 8000304:	b086      	sub	sp, #24
 8000306:	af00      	add	r7, sp, #0
 8000308:	60f8      	str	r0, [r7, #12]
 800030a:	60b9      	str	r1, [r7, #8]
 800030c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800030e:	2300      	movs	r3, #0
 8000310:	617b      	str	r3, [r7, #20]
 8000312:	e009      	b.n	8000328 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	1c5a      	adds	r2, r3, #1
 8000318:	60ba      	str	r2, [r7, #8]
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f939 	bl	8000594 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000322:	697b      	ldr	r3, [r7, #20]
 8000324:	3301      	adds	r3, #1
 8000326:	617b      	str	r3, [r7, #20]
 8000328:	697a      	ldr	r2, [r7, #20]
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	429a      	cmp	r2, r3
 800032e:	dbf1      	blt.n	8000314 <_write+0x12>
  }
  return len;
 8000330:	687b      	ldr	r3, [r7, #4]
}
 8000332:	4618      	mov	r0, r3
 8000334:	3718      	adds	r7, #24
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}

0800033a <_close>:

int _close(int file)
{
 800033a:	b480      	push	{r7}
 800033c:	b083      	sub	sp, #12
 800033e:	af00      	add	r7, sp, #0
 8000340:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000346:	4618      	mov	r0, r3
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr

08000352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000352:	b480      	push	{r7}
 8000354:	b083      	sub	sp, #12
 8000356:	af00      	add	r7, sp, #0
 8000358:	6078      	str	r0, [r7, #4]
 800035a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800035c:	683b      	ldr	r3, [r7, #0]
 800035e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000362:	605a      	str	r2, [r3, #4]
  return 0;
 8000364:	2300      	movs	r3, #0
}
 8000366:	4618      	mov	r0, r3
 8000368:	370c      	adds	r7, #12
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr

08000372 <_isatty>:

int _isatty(int file)
{
 8000372:	b480      	push	{r7}
 8000374:	b083      	sub	sp, #12
 8000376:	af00      	add	r7, sp, #0
 8000378:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800037a:	2301      	movs	r3, #1
}
 800037c:	4618      	mov	r0, r3
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr

08000388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000388:	b480      	push	{r7}
 800038a:	b085      	sub	sp, #20
 800038c:	af00      	add	r7, sp, #0
 800038e:	60f8      	str	r0, [r7, #12]
 8000390:	60b9      	str	r1, [r7, #8]
 8000392:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000394:	2300      	movs	r3, #0
}
 8000396:	4618      	mov	r0, r3
 8000398:	3714      	adds	r7, #20
 800039a:	46bd      	mov	sp, r7
 800039c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a0:	4770      	bx	lr
	...

080003a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80003ac:	4a14      	ldr	r2, [pc, #80]	@ (8000400 <_sbrk+0x5c>)
 80003ae:	4b15      	ldr	r3, [pc, #84]	@ (8000404 <_sbrk+0x60>)
 80003b0:	1ad3      	subs	r3, r2, r3
 80003b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80003b4:	697b      	ldr	r3, [r7, #20]
 80003b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80003b8:	4b13      	ldr	r3, [pc, #76]	@ (8000408 <_sbrk+0x64>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d102      	bne.n	80003c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80003c0:	4b11      	ldr	r3, [pc, #68]	@ (8000408 <_sbrk+0x64>)
 80003c2:	4a12      	ldr	r2, [pc, #72]	@ (800040c <_sbrk+0x68>)
 80003c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80003c6:	4b10      	ldr	r3, [pc, #64]	@ (8000408 <_sbrk+0x64>)
 80003c8:	681a      	ldr	r2, [r3, #0]
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4413      	add	r3, r2
 80003ce:	693a      	ldr	r2, [r7, #16]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d207      	bcs.n	80003e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80003d4:	f000 faf8 	bl	80009c8 <__errno>
 80003d8:	4603      	mov	r3, r0
 80003da:	220c      	movs	r2, #12
 80003dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80003de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80003e2:	e009      	b.n	80003f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80003e4:	4b08      	ldr	r3, [pc, #32]	@ (8000408 <_sbrk+0x64>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80003ea:	4b07      	ldr	r3, [pc, #28]	@ (8000408 <_sbrk+0x64>)
 80003ec:	681a      	ldr	r2, [r3, #0]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4413      	add	r3, r2
 80003f2:	4a05      	ldr	r2, [pc, #20]	@ (8000408 <_sbrk+0x64>)
 80003f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80003f6:	68fb      	ldr	r3, [r7, #12]
}
 80003f8:	4618      	mov	r0, r3
 80003fa:	3718      	adds	r7, #24
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	20020000 	.word	0x20020000
 8000404:	00000400 	.word	0x00000400
 8000408:	20000078 	.word	0x20000078
 800040c:	200001c8 	.word	0x200001c8

08000410 <tim2_pa5_output_compare>:
    /*Enable counter*/
    TIM2->CR1 |= CR1_CEN;
}

void tim2_pa5_output_compare(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
    /*Enable clock access to GPIOA*/
    RCC->AHB1ENR |= GPIOAENR;
 8000414:	4b2f      	ldr	r3, [pc, #188]	@ (80004d4 <tim2_pa5_output_compare+0xc4>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000418:	4a2e      	ldr	r2, [pc, #184]	@ (80004d4 <tim2_pa5_output_compare+0xc4>)
 800041a:	f043 0301 	orr.w	r3, r3, #1
 800041e:	6313      	str	r3, [r2, #48]	@ 0x30
    /*Set PA5 mode to alternate function mode*/
    GPIOA->MODER |= (1 << 11);
 8000420:	4b2d      	ldr	r3, [pc, #180]	@ (80004d8 <tim2_pa5_output_compare+0xc8>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	4a2c      	ldr	r2, [pc, #176]	@ (80004d8 <tim2_pa5_output_compare+0xc8>)
 8000426:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800042a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1 << 10);
 800042c:	4b2a      	ldr	r3, [pc, #168]	@ (80004d8 <tim2_pa5_output_compare+0xc8>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	4a29      	ldr	r2, [pc, #164]	@ (80004d8 <tim2_pa5_output_compare+0xc8>)
 8000432:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000436:	6013      	str	r3, [r2, #0]
    /*Set PA5 alternate function mode to TIM2_CH1*/
    GPIOA->AFR[0] &= ~(0xF << 20);
 8000438:	4b27      	ldr	r3, [pc, #156]	@ (80004d8 <tim2_pa5_output_compare+0xc8>)
 800043a:	6a1b      	ldr	r3, [r3, #32]
 800043c:	4a26      	ldr	r2, [pc, #152]	@ (80004d8 <tim2_pa5_output_compare+0xc8>)
 800043e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8000442:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x1 << 20);
 8000444:	4b24      	ldr	r3, [pc, #144]	@ (80004d8 <tim2_pa5_output_compare+0xc8>)
 8000446:	6a1b      	ldr	r3, [r3, #32]
 8000448:	4a23      	ldr	r2, [pc, #140]	@ (80004d8 <tim2_pa5_output_compare+0xc8>)
 800044a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800044e:	6213      	str	r3, [r2, #32]

    /*Enable clock access to TIM2*/
    RCC->APB1ENR |= TIM2ENR;
 8000450:	4b20      	ldr	r3, [pc, #128]	@ (80004d4 <tim2_pa5_output_compare+0xc4>)
 8000452:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000454:	4a1f      	ldr	r2, [pc, #124]	@ (80004d4 <tim2_pa5_output_compare+0xc4>)
 8000456:	f043 0301 	orr.w	r3, r3, #1
 800045a:	6413      	str	r3, [r2, #64]	@ 0x40
    /*Set prescaler value*/
    TIM2->PSC = 16000 - 1; // 16.000.000/16.000 = 1.000 Hz
 800045c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000460:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8000464:	629a      	str	r2, [r3, #40]	@ 0x28
    /*Set auto-reload value*/
    TIM2->ARR = 1000 - 1; // 1.000/1.000 = 1 Hz
 8000466:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800046a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800046e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /*Set output compare toggle mode*/
    TIM2->CCMR1 &= ~(0x7 << 4);
 8000470:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000474:	699b      	ldr	r3, [r3, #24]
 8000476:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800047a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800047e:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 |= (0x3 << 4);
 8000480:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000484:	699b      	ldr	r3, [r3, #24]
 8000486:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800048a:	f043 0330 	orr.w	r3, r3, #48	@ 0x30
 800048e:	6193      	str	r3, [r2, #24]
    TIM2->CCMR1 &= ~(1 << 3);
 8000490:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800049a:	f023 0308 	bic.w	r3, r3, #8
 800049e:	6193      	str	r3, [r2, #24]
    /*Enable TIM2_CH2 in compare mode*/
    TIM2->CCER |= CCER_CC1E;
 80004a0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004a4:	6a1b      	ldr	r3, [r3, #32]
 80004a6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004aa:	f043 0301 	orr.w	r3, r3, #1
 80004ae:	6213      	str	r3, [r2, #32]

    /*Clear counter*/
    TIM2->CNT = 0;
 80004b0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004b4:	2200      	movs	r2, #0
 80004b6:	625a      	str	r2, [r3, #36]	@ 0x24
    /*Enable counter*/
    TIM2->CR1 |= CR1_CEN;
 80004b8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80004c2:	f043 0301 	orr.w	r3, r3, #1
 80004c6:	6013      	str	r3, [r2, #0]
}
 80004c8:	bf00      	nop
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop
 80004d4:	40023800 	.word	0x40023800
 80004d8:	40020000 	.word	0x40020000

080004dc <tim3_pa6_input_capture>:

void tim3_pa6_input_capture(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
    /*Enable clock access to GPIOA*/
    RCC->AHB1ENR |= GPIOAENR;
 80004e0:	4b29      	ldr	r3, [pc, #164]	@ (8000588 <tim3_pa6_input_capture+0xac>)
 80004e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004e4:	4a28      	ldr	r2, [pc, #160]	@ (8000588 <tim3_pa6_input_capture+0xac>)
 80004e6:	f043 0301 	orr.w	r3, r3, #1
 80004ea:	6313      	str	r3, [r2, #48]	@ 0x30
    /*Set PA6 to alternate function mode*/
    GPIOA->MODER |= (1 << 13); // Set bit 13
 80004ec:	4b27      	ldr	r3, [pc, #156]	@ (800058c <tim3_pa6_input_capture+0xb0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a26      	ldr	r2, [pc, #152]	@ (800058c <tim3_pa6_input_capture+0xb0>)
 80004f2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80004f6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1 << 12); // Clear bit 12
 80004f8:	4b24      	ldr	r3, [pc, #144]	@ (800058c <tim3_pa6_input_capture+0xb0>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a23      	ldr	r2, [pc, #140]	@ (800058c <tim3_pa6_input_capture+0xb0>)
 80004fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000502:	6013      	str	r3, [r2, #0]
    /*Set PA6 alternate function type to TIM3_CH1 (AF02)*/
    GPIOA->AFR[0] &= ~(0xF << 24); // Clear AFR bits for PA6
 8000504:	4b21      	ldr	r3, [pc, #132]	@ (800058c <tim3_pa6_input_capture+0xb0>)
 8000506:	6a1b      	ldr	r3, [r3, #32]
 8000508:	4a20      	ldr	r2, [pc, #128]	@ (800058c <tim3_pa6_input_capture+0xb0>)
 800050a:	f023 6370 	bic.w	r3, r3, #251658240	@ 0xf000000
 800050e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (0x2 << 24);  // Set AFR[6] to AF02 (TIM3_CH1)
 8000510:	4b1e      	ldr	r3, [pc, #120]	@ (800058c <tim3_pa6_input_capture+0xb0>)
 8000512:	6a1b      	ldr	r3, [r3, #32]
 8000514:	4a1d      	ldr	r2, [pc, #116]	@ (800058c <tim3_pa6_input_capture+0xb0>)
 8000516:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800051a:	6213      	str	r3, [r2, #32]

    /*Enable clock access to TIM3*/
    RCC->APB1ENR |= TIM3ENR;
 800051c:	4b1a      	ldr	r3, [pc, #104]	@ (8000588 <tim3_pa6_input_capture+0xac>)
 800051e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000520:	4a19      	ldr	r2, [pc, #100]	@ (8000588 <tim3_pa6_input_capture+0xac>)
 8000522:	f043 0302 	orr.w	r3, r3, #2
 8000526:	6413      	str	r3, [r2, #64]	@ 0x40
    /*Set prescaler*/
    TIM3->PSC = 16000 - 1; // 16.000.000/16.000 = 1.000 Hz
 8000528:	4b19      	ldr	r3, [pc, #100]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 800052a:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800052e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*Set CH1 to input capture mode*/
    TIM3->CCMR1 &= ~(0x3 << 0); // Clear CC1S bits
 8000530:	4b17      	ldr	r3, [pc, #92]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a16      	ldr	r2, [pc, #88]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 8000536:	f023 0303 	bic.w	r3, r3, #3
 800053a:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= (0x1 << 0);  // Set CC1S to 01 (Input capture on TI1)
 800053c:	4b14      	ldr	r3, [pc, #80]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 8000542:	f043 0301 	orr.w	r3, r3, #1
 8000546:	6193      	str	r3, [r2, #24]
    /*Set CH1 to capture on rising edge*/
    TIM3->CCER &= ~(1 << 1); // Clear CC1P (capture on rising edge)
 8000548:	4b11      	ldr	r3, [pc, #68]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 800054a:	6a1b      	ldr	r3, [r3, #32]
 800054c:	4a10      	ldr	r2, [pc, #64]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 800054e:	f023 0302 	bic.w	r3, r3, #2
 8000552:	6213      	str	r3, [r2, #32]
    TIM3->CCER &= ~(1 << 3); // Clear CC1NP (non-inverted capture)
 8000554:	4b0e      	ldr	r3, [pc, #56]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 8000556:	6a1b      	ldr	r3, [r3, #32]
 8000558:	4a0d      	ldr	r2, [pc, #52]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 800055a:	f023 0308 	bic.w	r3, r3, #8
 800055e:	6213      	str	r3, [r2, #32]
    /*Enable TIM3 CH1 for input capture*/
    TIM3->CCER |= CCER_CC1E;
 8000560:	4b0b      	ldr	r3, [pc, #44]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 8000562:	6a1b      	ldr	r3, [r3, #32]
 8000564:	4a0a      	ldr	r2, [pc, #40]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 8000566:	f043 0301 	orr.w	r3, r3, #1
 800056a:	6213      	str	r3, [r2, #32]
    /*Clear counter*/
    TIM3->CNT = 0;
 800056c:	4b08      	ldr	r3, [pc, #32]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 800056e:	2200      	movs	r2, #0
 8000570:	625a      	str	r2, [r3, #36]	@ 0x24
    /*Enable TIM3*/
    TIM3->CR1 |= CR1_CEN;
 8000572:	4b07      	ldr	r3, [pc, #28]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	4a06      	ldr	r2, [pc, #24]	@ (8000590 <tim3_pa6_input_capture+0xb4>)
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	6013      	str	r3, [r2, #0]
}
 800057e:	bf00      	nop
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr
 8000588:	40023800 	.word	0x40023800
 800058c:	40020000 	.word	0x40020000
 8000590:	40000400 	.word	0x40000400

08000594 <__io_putchar>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

int __io_putchar(int ch)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
    uart2_write(ch);
 800059c:	6878      	ldr	r0, [r7, #4]
 800059e:	f000 f86b 	bl	8000678 <uart2_write>
    return ch;
 80005a2:	687b      	ldr	r3, [r7, #4]
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	3708      	adds	r7, #8
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}

080005ac <uart2_tx_init>:

void uart2_tx_init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA
    RCC->AHB1ENR |= GPIOA_EN;
 80005b0:	4b1a      	ldr	r3, [pc, #104]	@ (800061c <uart2_tx_init+0x70>)
 80005b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b4:	4a19      	ldr	r2, [pc, #100]	@ (800061c <uart2_tx_init+0x70>)
 80005b6:	f043 0301 	orr.w	r3, r3, #1
 80005ba:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 to alternate function mode
    GPIOA->MODER &= ~(1 << 4); // Clear bit 4
 80005bc:	4b18      	ldr	r3, [pc, #96]	@ (8000620 <uart2_tx_init+0x74>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a17      	ldr	r2, [pc, #92]	@ (8000620 <uart2_tx_init+0x74>)
 80005c2:	f023 0310 	bic.w	r3, r3, #16
 80005c6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << 5);  // Set bit 5
 80005c8:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <uart2_tx_init+0x74>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a14      	ldr	r2, [pc, #80]	@ (8000620 <uart2_tx_init+0x74>)
 80005ce:	f043 0320 	orr.w	r3, r3, #32
 80005d2:	6013      	str	r3, [r2, #0]

    // Set PA2 to AF7 (USART2_TX)
    GPIOA->AFR[0] |= (1 << 8) | (1 << 9) | (1 << 10);
 80005d4:	4b12      	ldr	r3, [pc, #72]	@ (8000620 <uart2_tx_init+0x74>)
 80005d6:	6a1b      	ldr	r3, [r3, #32]
 80005d8:	4a11      	ldr	r2, [pc, #68]	@ (8000620 <uart2_tx_init+0x74>)
 80005da:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80005de:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1 << 11);
 80005e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <uart2_tx_init+0x74>)
 80005e2:	6a1b      	ldr	r3, [r3, #32]
 80005e4:	4a0e      	ldr	r2, [pc, #56]	@ (8000620 <uart2_tx_init+0x74>)
 80005e6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80005ea:	6213      	str	r3, [r2, #32]

    // Enable clock for USART2
    RCC->APB1ENR |= USART2_EN;
 80005ec:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <uart2_tx_init+0x70>)
 80005ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005f0:	4a0a      	ldr	r2, [pc, #40]	@ (800061c <uart2_tx_init+0x70>)
 80005f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005f6:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set baud rate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80005f8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005fc:	4909      	ldr	r1, [pc, #36]	@ (8000624 <uart2_tx_init+0x78>)
 80005fe:	480a      	ldr	r0, [pc, #40]	@ (8000628 <uart2_tx_init+0x7c>)
 8000600:	f000 f814 	bl	800062c <uart_set_baudrate>

    // Enable USART2 transmitter
    USART2->CR1 = CR1_TE;
 8000604:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <uart2_tx_init+0x7c>)
 8000606:	2208      	movs	r2, #8
 8000608:	60da      	str	r2, [r3, #12]

    // Enable USART2
    USART2->CR1 |= CR1_UE;
 800060a:	4b07      	ldr	r3, [pc, #28]	@ (8000628 <uart2_tx_init+0x7c>)
 800060c:	68db      	ldr	r3, [r3, #12]
 800060e:	4a06      	ldr	r2, [pc, #24]	@ (8000628 <uart2_tx_init+0x7c>)
 8000610:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000614:	60d3      	str	r3, [r2, #12]
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40020000 	.word	0x40020000
 8000624:	00f42400 	.word	0x00f42400
 8000628:	40004400 	.word	0x40004400

0800062c <uart_set_baudrate>:
    /*Enable UART module*/
    USART2->CR1 |= CR1_UE;
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
    USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000638:	6879      	ldr	r1, [r7, #4]
 800063a:	68b8      	ldr	r0, [r7, #8]
 800063c:	f000 f808 	bl	8000650 <compute_uart_bd>
 8000640:	4603      	mov	r3, r0
 8000642:	461a      	mov	r2, r3
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	609a      	str	r2, [r3, #8]
}
 8000648:	bf00      	nop
 800064a:	3710      	adds	r7, #16
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}

08000650 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000650:	b480      	push	{r7}
 8000652:	b083      	sub	sp, #12
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
 8000658:	6039      	str	r1, [r7, #0]
    return (PeriphClk + BaudRate / (2U)) / BaudRate;
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	085a      	lsrs	r2, r3, #1
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	441a      	add	r2, r3
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	fbb2 f3f3 	udiv	r3, r2, r3
 8000668:	b29b      	uxth	r3, r3
}
 800066a:	4618      	mov	r0, r3
 800066c:	370c      	adds	r7, #12
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
	...

08000678 <uart2_write>:

void uart2_write(int ch)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    /*Make sure the transmit register is empty*/
    while (!(USART2->SR & SR_TXE))
 8000680:	bf00      	nop
 8000682:	4b08      	ldr	r3, [pc, #32]	@ (80006a4 <uart2_write+0x2c>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800068a:	2b00      	cmp	r3, #0
 800068c:	d0f9      	beq.n	8000682 <uart2_write+0xa>
    {
    }
    /*Write transmit data register*/
    USART2->DR = (ch & 0xFF);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	4a04      	ldr	r2, [pc, #16]	@ (80006a4 <uart2_write+0x2c>)
 8000692:	b2db      	uxtb	r3, r3
 8000694:	6053      	str	r3, [r2, #4]
}
 8000696:	bf00      	nop
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40004400 	.word	0x40004400

080006a8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a8:	480d      	ldr	r0, [pc, #52]	@ (80006e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006aa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006ac:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b0:	480c      	ldr	r0, [pc, #48]	@ (80006e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006b2:	490d      	ldr	r1, [pc, #52]	@ (80006e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b4:	4a0d      	ldr	r2, [pc, #52]	@ (80006ec <LoopForever+0xe>)
  movs r3, #0
 80006b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b8:	e002      	b.n	80006c0 <LoopCopyDataInit>

080006ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006be:	3304      	adds	r3, #4

080006c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c4:	d3f9      	bcc.n	80006ba <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c6:	4a0a      	ldr	r2, [pc, #40]	@ (80006f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c8:	4c0a      	ldr	r4, [pc, #40]	@ (80006f4 <LoopForever+0x16>)
  movs r3, #0
 80006ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006cc:	e001      	b.n	80006d2 <LoopFillZerobss>

080006ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d0:	3204      	adds	r2, #4

080006d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d4:	d3fb      	bcc.n	80006ce <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006d6:	f000 f97d 	bl	80009d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006da:	f7ff fdd1 	bl	8000280 <main>

080006de <LoopForever>:

LoopForever:
  b LoopForever
 80006de:	e7fe      	b.n	80006de <LoopForever>
  ldr   r0, =_estack
 80006e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006ec:	080015d0 	.word	0x080015d0
  ldr r2, =_sbss
 80006f0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006f4:	200001c8 	.word	0x200001c8

080006f8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f8:	e7fe      	b.n	80006f8 <ADC_IRQHandler>
	...

080006fc <std>:
 80006fc:	2300      	movs	r3, #0
 80006fe:	b510      	push	{r4, lr}
 8000700:	4604      	mov	r4, r0
 8000702:	e9c0 3300 	strd	r3, r3, [r0]
 8000706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800070a:	6083      	str	r3, [r0, #8]
 800070c:	8181      	strh	r1, [r0, #12]
 800070e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000710:	81c2      	strh	r2, [r0, #14]
 8000712:	6183      	str	r3, [r0, #24]
 8000714:	4619      	mov	r1, r3
 8000716:	2208      	movs	r2, #8
 8000718:	305c      	adds	r0, #92	@ 0x5c
 800071a:	f000 f906 	bl	800092a <memset>
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <std+0x58>)
 8000720:	6263      	str	r3, [r4, #36]	@ 0x24
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <std+0x5c>)
 8000724:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000726:	4b0d      	ldr	r3, [pc, #52]	@ (800075c <std+0x60>)
 8000728:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800072a:	4b0d      	ldr	r3, [pc, #52]	@ (8000760 <std+0x64>)
 800072c:	6323      	str	r3, [r4, #48]	@ 0x30
 800072e:	4b0d      	ldr	r3, [pc, #52]	@ (8000764 <std+0x68>)
 8000730:	6224      	str	r4, [r4, #32]
 8000732:	429c      	cmp	r4, r3
 8000734:	d006      	beq.n	8000744 <std+0x48>
 8000736:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800073a:	4294      	cmp	r4, r2
 800073c:	d002      	beq.n	8000744 <std+0x48>
 800073e:	33d0      	adds	r3, #208	@ 0xd0
 8000740:	429c      	cmp	r4, r3
 8000742:	d105      	bne.n	8000750 <std+0x54>
 8000744:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800074c:	f000 b966 	b.w	8000a1c <__retarget_lock_init_recursive>
 8000750:	bd10      	pop	{r4, pc}
 8000752:	bf00      	nop
 8000754:	080008a5 	.word	0x080008a5
 8000758:	080008c7 	.word	0x080008c7
 800075c:	080008ff 	.word	0x080008ff
 8000760:	08000923 	.word	0x08000923
 8000764:	2000007c 	.word	0x2000007c

08000768 <stdio_exit_handler>:
 8000768:	4a02      	ldr	r2, [pc, #8]	@ (8000774 <stdio_exit_handler+0xc>)
 800076a:	4903      	ldr	r1, [pc, #12]	@ (8000778 <stdio_exit_handler+0x10>)
 800076c:	4803      	ldr	r0, [pc, #12]	@ (800077c <stdio_exit_handler+0x14>)
 800076e:	f000 b869 	b.w	8000844 <_fwalk_sglue>
 8000772:	bf00      	nop
 8000774:	20000000 	.word	0x20000000
 8000778:	080012bd 	.word	0x080012bd
 800077c:	20000010 	.word	0x20000010

08000780 <cleanup_stdio>:
 8000780:	6841      	ldr	r1, [r0, #4]
 8000782:	4b0c      	ldr	r3, [pc, #48]	@ (80007b4 <cleanup_stdio+0x34>)
 8000784:	4299      	cmp	r1, r3
 8000786:	b510      	push	{r4, lr}
 8000788:	4604      	mov	r4, r0
 800078a:	d001      	beq.n	8000790 <cleanup_stdio+0x10>
 800078c:	f000 fd96 	bl	80012bc <_fflush_r>
 8000790:	68a1      	ldr	r1, [r4, #8]
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <cleanup_stdio+0x38>)
 8000794:	4299      	cmp	r1, r3
 8000796:	d002      	beq.n	800079e <cleanup_stdio+0x1e>
 8000798:	4620      	mov	r0, r4
 800079a:	f000 fd8f 	bl	80012bc <_fflush_r>
 800079e:	68e1      	ldr	r1, [r4, #12]
 80007a0:	4b06      	ldr	r3, [pc, #24]	@ (80007bc <cleanup_stdio+0x3c>)
 80007a2:	4299      	cmp	r1, r3
 80007a4:	d004      	beq.n	80007b0 <cleanup_stdio+0x30>
 80007a6:	4620      	mov	r0, r4
 80007a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ac:	f000 bd86 	b.w	80012bc <_fflush_r>
 80007b0:	bd10      	pop	{r4, pc}
 80007b2:	bf00      	nop
 80007b4:	2000007c 	.word	0x2000007c
 80007b8:	200000e4 	.word	0x200000e4
 80007bc:	2000014c 	.word	0x2000014c

080007c0 <global_stdio_init.part.0>:
 80007c0:	b510      	push	{r4, lr}
 80007c2:	4b0b      	ldr	r3, [pc, #44]	@ (80007f0 <global_stdio_init.part.0+0x30>)
 80007c4:	4c0b      	ldr	r4, [pc, #44]	@ (80007f4 <global_stdio_init.part.0+0x34>)
 80007c6:	4a0c      	ldr	r2, [pc, #48]	@ (80007f8 <global_stdio_init.part.0+0x38>)
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	4620      	mov	r0, r4
 80007cc:	2200      	movs	r2, #0
 80007ce:	2104      	movs	r1, #4
 80007d0:	f7ff ff94 	bl	80006fc <std>
 80007d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007d8:	2201      	movs	r2, #1
 80007da:	2109      	movs	r1, #9
 80007dc:	f7ff ff8e 	bl	80006fc <std>
 80007e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007e4:	2202      	movs	r2, #2
 80007e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ea:	2112      	movs	r1, #18
 80007ec:	f7ff bf86 	b.w	80006fc <std>
 80007f0:	200001b4 	.word	0x200001b4
 80007f4:	2000007c 	.word	0x2000007c
 80007f8:	08000769 	.word	0x08000769

080007fc <__sfp_lock_acquire>:
 80007fc:	4801      	ldr	r0, [pc, #4]	@ (8000804 <__sfp_lock_acquire+0x8>)
 80007fe:	f000 b90e 	b.w	8000a1e <__retarget_lock_acquire_recursive>
 8000802:	bf00      	nop
 8000804:	200001bd 	.word	0x200001bd

08000808 <__sfp_lock_release>:
 8000808:	4801      	ldr	r0, [pc, #4]	@ (8000810 <__sfp_lock_release+0x8>)
 800080a:	f000 b909 	b.w	8000a20 <__retarget_lock_release_recursive>
 800080e:	bf00      	nop
 8000810:	200001bd 	.word	0x200001bd

08000814 <__sinit>:
 8000814:	b510      	push	{r4, lr}
 8000816:	4604      	mov	r4, r0
 8000818:	f7ff fff0 	bl	80007fc <__sfp_lock_acquire>
 800081c:	6a23      	ldr	r3, [r4, #32]
 800081e:	b11b      	cbz	r3, 8000828 <__sinit+0x14>
 8000820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000824:	f7ff bff0 	b.w	8000808 <__sfp_lock_release>
 8000828:	4b04      	ldr	r3, [pc, #16]	@ (800083c <__sinit+0x28>)
 800082a:	6223      	str	r3, [r4, #32]
 800082c:	4b04      	ldr	r3, [pc, #16]	@ (8000840 <__sinit+0x2c>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d1f5      	bne.n	8000820 <__sinit+0xc>
 8000834:	f7ff ffc4 	bl	80007c0 <global_stdio_init.part.0>
 8000838:	e7f2      	b.n	8000820 <__sinit+0xc>
 800083a:	bf00      	nop
 800083c:	08000781 	.word	0x08000781
 8000840:	200001b4 	.word	0x200001b4

08000844 <_fwalk_sglue>:
 8000844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000848:	4607      	mov	r7, r0
 800084a:	4688      	mov	r8, r1
 800084c:	4614      	mov	r4, r2
 800084e:	2600      	movs	r6, #0
 8000850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000854:	f1b9 0901 	subs.w	r9, r9, #1
 8000858:	d505      	bpl.n	8000866 <_fwalk_sglue+0x22>
 800085a:	6824      	ldr	r4, [r4, #0]
 800085c:	2c00      	cmp	r4, #0
 800085e:	d1f7      	bne.n	8000850 <_fwalk_sglue+0xc>
 8000860:	4630      	mov	r0, r6
 8000862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000866:	89ab      	ldrh	r3, [r5, #12]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d907      	bls.n	800087c <_fwalk_sglue+0x38>
 800086c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000870:	3301      	adds	r3, #1
 8000872:	d003      	beq.n	800087c <_fwalk_sglue+0x38>
 8000874:	4629      	mov	r1, r5
 8000876:	4638      	mov	r0, r7
 8000878:	47c0      	blx	r8
 800087a:	4306      	orrs	r6, r0
 800087c:	3568      	adds	r5, #104	@ 0x68
 800087e:	e7e9      	b.n	8000854 <_fwalk_sglue+0x10>

08000880 <iprintf>:
 8000880:	b40f      	push	{r0, r1, r2, r3}
 8000882:	b507      	push	{r0, r1, r2, lr}
 8000884:	4906      	ldr	r1, [pc, #24]	@ (80008a0 <iprintf+0x20>)
 8000886:	ab04      	add	r3, sp, #16
 8000888:	6808      	ldr	r0, [r1, #0]
 800088a:	f853 2b04 	ldr.w	r2, [r3], #4
 800088e:	6881      	ldr	r1, [r0, #8]
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	f000 f9e9 	bl	8000c68 <_vfiprintf_r>
 8000896:	b003      	add	sp, #12
 8000898:	f85d eb04 	ldr.w	lr, [sp], #4
 800089c:	b004      	add	sp, #16
 800089e:	4770      	bx	lr
 80008a0:	2000000c 	.word	0x2000000c

080008a4 <__sread>:
 80008a4:	b510      	push	{r4, lr}
 80008a6:	460c      	mov	r4, r1
 80008a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ac:	f000 f868 	bl	8000980 <_read_r>
 80008b0:	2800      	cmp	r0, #0
 80008b2:	bfab      	itete	ge
 80008b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008b6:	89a3      	ldrhlt	r3, [r4, #12]
 80008b8:	181b      	addge	r3, r3, r0
 80008ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008be:	bfac      	ite	ge
 80008c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008c2:	81a3      	strhlt	r3, [r4, #12]
 80008c4:	bd10      	pop	{r4, pc}

080008c6 <__swrite>:
 80008c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008ca:	461f      	mov	r7, r3
 80008cc:	898b      	ldrh	r3, [r1, #12]
 80008ce:	05db      	lsls	r3, r3, #23
 80008d0:	4605      	mov	r5, r0
 80008d2:	460c      	mov	r4, r1
 80008d4:	4616      	mov	r6, r2
 80008d6:	d505      	bpl.n	80008e4 <__swrite+0x1e>
 80008d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008dc:	2302      	movs	r3, #2
 80008de:	2200      	movs	r2, #0
 80008e0:	f000 f83c 	bl	800095c <_lseek_r>
 80008e4:	89a3      	ldrh	r3, [r4, #12]
 80008e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008ea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008ee:	81a3      	strh	r3, [r4, #12]
 80008f0:	4632      	mov	r2, r6
 80008f2:	463b      	mov	r3, r7
 80008f4:	4628      	mov	r0, r5
 80008f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008fa:	f000 b853 	b.w	80009a4 <_write_r>

080008fe <__sseek>:
 80008fe:	b510      	push	{r4, lr}
 8000900:	460c      	mov	r4, r1
 8000902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000906:	f000 f829 	bl	800095c <_lseek_r>
 800090a:	1c43      	adds	r3, r0, #1
 800090c:	89a3      	ldrh	r3, [r4, #12]
 800090e:	bf15      	itete	ne
 8000910:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000912:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000916:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800091a:	81a3      	strheq	r3, [r4, #12]
 800091c:	bf18      	it	ne
 800091e:	81a3      	strhne	r3, [r4, #12]
 8000920:	bd10      	pop	{r4, pc}

08000922 <__sclose>:
 8000922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000926:	f000 b809 	b.w	800093c <_close_r>

0800092a <memset>:
 800092a:	4402      	add	r2, r0
 800092c:	4603      	mov	r3, r0
 800092e:	4293      	cmp	r3, r2
 8000930:	d100      	bne.n	8000934 <memset+0xa>
 8000932:	4770      	bx	lr
 8000934:	f803 1b01 	strb.w	r1, [r3], #1
 8000938:	e7f9      	b.n	800092e <memset+0x4>
	...

0800093c <_close_r>:
 800093c:	b538      	push	{r3, r4, r5, lr}
 800093e:	4d06      	ldr	r5, [pc, #24]	@ (8000958 <_close_r+0x1c>)
 8000940:	2300      	movs	r3, #0
 8000942:	4604      	mov	r4, r0
 8000944:	4608      	mov	r0, r1
 8000946:	602b      	str	r3, [r5, #0]
 8000948:	f7ff fcf7 	bl	800033a <_close>
 800094c:	1c43      	adds	r3, r0, #1
 800094e:	d102      	bne.n	8000956 <_close_r+0x1a>
 8000950:	682b      	ldr	r3, [r5, #0]
 8000952:	b103      	cbz	r3, 8000956 <_close_r+0x1a>
 8000954:	6023      	str	r3, [r4, #0]
 8000956:	bd38      	pop	{r3, r4, r5, pc}
 8000958:	200001b8 	.word	0x200001b8

0800095c <_lseek_r>:
 800095c:	b538      	push	{r3, r4, r5, lr}
 800095e:	4d07      	ldr	r5, [pc, #28]	@ (800097c <_lseek_r+0x20>)
 8000960:	4604      	mov	r4, r0
 8000962:	4608      	mov	r0, r1
 8000964:	4611      	mov	r1, r2
 8000966:	2200      	movs	r2, #0
 8000968:	602a      	str	r2, [r5, #0]
 800096a:	461a      	mov	r2, r3
 800096c:	f7ff fd0c 	bl	8000388 <_lseek>
 8000970:	1c43      	adds	r3, r0, #1
 8000972:	d102      	bne.n	800097a <_lseek_r+0x1e>
 8000974:	682b      	ldr	r3, [r5, #0]
 8000976:	b103      	cbz	r3, 800097a <_lseek_r+0x1e>
 8000978:	6023      	str	r3, [r4, #0]
 800097a:	bd38      	pop	{r3, r4, r5, pc}
 800097c:	200001b8 	.word	0x200001b8

08000980 <_read_r>:
 8000980:	b538      	push	{r3, r4, r5, lr}
 8000982:	4d07      	ldr	r5, [pc, #28]	@ (80009a0 <_read_r+0x20>)
 8000984:	4604      	mov	r4, r0
 8000986:	4608      	mov	r0, r1
 8000988:	4611      	mov	r1, r2
 800098a:	2200      	movs	r2, #0
 800098c:	602a      	str	r2, [r5, #0]
 800098e:	461a      	mov	r2, r3
 8000990:	f7ff fc9a 	bl	80002c8 <_read>
 8000994:	1c43      	adds	r3, r0, #1
 8000996:	d102      	bne.n	800099e <_read_r+0x1e>
 8000998:	682b      	ldr	r3, [r5, #0]
 800099a:	b103      	cbz	r3, 800099e <_read_r+0x1e>
 800099c:	6023      	str	r3, [r4, #0]
 800099e:	bd38      	pop	{r3, r4, r5, pc}
 80009a0:	200001b8 	.word	0x200001b8

080009a4 <_write_r>:
 80009a4:	b538      	push	{r3, r4, r5, lr}
 80009a6:	4d07      	ldr	r5, [pc, #28]	@ (80009c4 <_write_r+0x20>)
 80009a8:	4604      	mov	r4, r0
 80009aa:	4608      	mov	r0, r1
 80009ac:	4611      	mov	r1, r2
 80009ae:	2200      	movs	r2, #0
 80009b0:	602a      	str	r2, [r5, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	f7ff fca5 	bl	8000302 <_write>
 80009b8:	1c43      	adds	r3, r0, #1
 80009ba:	d102      	bne.n	80009c2 <_write_r+0x1e>
 80009bc:	682b      	ldr	r3, [r5, #0]
 80009be:	b103      	cbz	r3, 80009c2 <_write_r+0x1e>
 80009c0:	6023      	str	r3, [r4, #0]
 80009c2:	bd38      	pop	{r3, r4, r5, pc}
 80009c4:	200001b8 	.word	0x200001b8

080009c8 <__errno>:
 80009c8:	4b01      	ldr	r3, [pc, #4]	@ (80009d0 <__errno+0x8>)
 80009ca:	6818      	ldr	r0, [r3, #0]
 80009cc:	4770      	bx	lr
 80009ce:	bf00      	nop
 80009d0:	2000000c 	.word	0x2000000c

080009d4 <__libc_init_array>:
 80009d4:	b570      	push	{r4, r5, r6, lr}
 80009d6:	4d0d      	ldr	r5, [pc, #52]	@ (8000a0c <__libc_init_array+0x38>)
 80009d8:	4c0d      	ldr	r4, [pc, #52]	@ (8000a10 <__libc_init_array+0x3c>)
 80009da:	1b64      	subs	r4, r4, r5
 80009dc:	10a4      	asrs	r4, r4, #2
 80009de:	2600      	movs	r6, #0
 80009e0:	42a6      	cmp	r6, r4
 80009e2:	d109      	bne.n	80009f8 <__libc_init_array+0x24>
 80009e4:	4d0b      	ldr	r5, [pc, #44]	@ (8000a14 <__libc_init_array+0x40>)
 80009e6:	4c0c      	ldr	r4, [pc, #48]	@ (8000a18 <__libc_init_array+0x44>)
 80009e8:	f000 fdb8 	bl	800155c <_init>
 80009ec:	1b64      	subs	r4, r4, r5
 80009ee:	10a4      	asrs	r4, r4, #2
 80009f0:	2600      	movs	r6, #0
 80009f2:	42a6      	cmp	r6, r4
 80009f4:	d105      	bne.n	8000a02 <__libc_init_array+0x2e>
 80009f6:	bd70      	pop	{r4, r5, r6, pc}
 80009f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009fc:	4798      	blx	r3
 80009fe:	3601      	adds	r6, #1
 8000a00:	e7ee      	b.n	80009e0 <__libc_init_array+0xc>
 8000a02:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a06:	4798      	blx	r3
 8000a08:	3601      	adds	r6, #1
 8000a0a:	e7f2      	b.n	80009f2 <__libc_init_array+0x1e>
 8000a0c:	080015c8 	.word	0x080015c8
 8000a10:	080015c8 	.word	0x080015c8
 8000a14:	080015c8 	.word	0x080015c8
 8000a18:	080015cc 	.word	0x080015cc

08000a1c <__retarget_lock_init_recursive>:
 8000a1c:	4770      	bx	lr

08000a1e <__retarget_lock_acquire_recursive>:
 8000a1e:	4770      	bx	lr

08000a20 <__retarget_lock_release_recursive>:
 8000a20:	4770      	bx	lr
	...

08000a24 <_free_r>:
 8000a24:	b538      	push	{r3, r4, r5, lr}
 8000a26:	4605      	mov	r5, r0
 8000a28:	2900      	cmp	r1, #0
 8000a2a:	d041      	beq.n	8000ab0 <_free_r+0x8c>
 8000a2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a30:	1f0c      	subs	r4, r1, #4
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bfb8      	it	lt
 8000a36:	18e4      	addlt	r4, r4, r3
 8000a38:	f000 f8e0 	bl	8000bfc <__malloc_lock>
 8000a3c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ab4 <_free_r+0x90>)
 8000a3e:	6813      	ldr	r3, [r2, #0]
 8000a40:	b933      	cbnz	r3, 8000a50 <_free_r+0x2c>
 8000a42:	6063      	str	r3, [r4, #4]
 8000a44:	6014      	str	r4, [r2, #0]
 8000a46:	4628      	mov	r0, r5
 8000a48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a4c:	f000 b8dc 	b.w	8000c08 <__malloc_unlock>
 8000a50:	42a3      	cmp	r3, r4
 8000a52:	d908      	bls.n	8000a66 <_free_r+0x42>
 8000a54:	6820      	ldr	r0, [r4, #0]
 8000a56:	1821      	adds	r1, r4, r0
 8000a58:	428b      	cmp	r3, r1
 8000a5a:	bf01      	itttt	eq
 8000a5c:	6819      	ldreq	r1, [r3, #0]
 8000a5e:	685b      	ldreq	r3, [r3, #4]
 8000a60:	1809      	addeq	r1, r1, r0
 8000a62:	6021      	streq	r1, [r4, #0]
 8000a64:	e7ed      	b.n	8000a42 <_free_r+0x1e>
 8000a66:	461a      	mov	r2, r3
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	b10b      	cbz	r3, 8000a70 <_free_r+0x4c>
 8000a6c:	42a3      	cmp	r3, r4
 8000a6e:	d9fa      	bls.n	8000a66 <_free_r+0x42>
 8000a70:	6811      	ldr	r1, [r2, #0]
 8000a72:	1850      	adds	r0, r2, r1
 8000a74:	42a0      	cmp	r0, r4
 8000a76:	d10b      	bne.n	8000a90 <_free_r+0x6c>
 8000a78:	6820      	ldr	r0, [r4, #0]
 8000a7a:	4401      	add	r1, r0
 8000a7c:	1850      	adds	r0, r2, r1
 8000a7e:	4283      	cmp	r3, r0
 8000a80:	6011      	str	r1, [r2, #0]
 8000a82:	d1e0      	bne.n	8000a46 <_free_r+0x22>
 8000a84:	6818      	ldr	r0, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	6053      	str	r3, [r2, #4]
 8000a8a:	4408      	add	r0, r1
 8000a8c:	6010      	str	r0, [r2, #0]
 8000a8e:	e7da      	b.n	8000a46 <_free_r+0x22>
 8000a90:	d902      	bls.n	8000a98 <_free_r+0x74>
 8000a92:	230c      	movs	r3, #12
 8000a94:	602b      	str	r3, [r5, #0]
 8000a96:	e7d6      	b.n	8000a46 <_free_r+0x22>
 8000a98:	6820      	ldr	r0, [r4, #0]
 8000a9a:	1821      	adds	r1, r4, r0
 8000a9c:	428b      	cmp	r3, r1
 8000a9e:	bf04      	itt	eq
 8000aa0:	6819      	ldreq	r1, [r3, #0]
 8000aa2:	685b      	ldreq	r3, [r3, #4]
 8000aa4:	6063      	str	r3, [r4, #4]
 8000aa6:	bf04      	itt	eq
 8000aa8:	1809      	addeq	r1, r1, r0
 8000aaa:	6021      	streq	r1, [r4, #0]
 8000aac:	6054      	str	r4, [r2, #4]
 8000aae:	e7ca      	b.n	8000a46 <_free_r+0x22>
 8000ab0:	bd38      	pop	{r3, r4, r5, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200001c4 	.word	0x200001c4

08000ab8 <sbrk_aligned>:
 8000ab8:	b570      	push	{r4, r5, r6, lr}
 8000aba:	4e0f      	ldr	r6, [pc, #60]	@ (8000af8 <sbrk_aligned+0x40>)
 8000abc:	460c      	mov	r4, r1
 8000abe:	6831      	ldr	r1, [r6, #0]
 8000ac0:	4605      	mov	r5, r0
 8000ac2:	b911      	cbnz	r1, 8000aca <sbrk_aligned+0x12>
 8000ac4:	f000 fcb6 	bl	8001434 <_sbrk_r>
 8000ac8:	6030      	str	r0, [r6, #0]
 8000aca:	4621      	mov	r1, r4
 8000acc:	4628      	mov	r0, r5
 8000ace:	f000 fcb1 	bl	8001434 <_sbrk_r>
 8000ad2:	1c43      	adds	r3, r0, #1
 8000ad4:	d103      	bne.n	8000ade <sbrk_aligned+0x26>
 8000ad6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000ada:	4620      	mov	r0, r4
 8000adc:	bd70      	pop	{r4, r5, r6, pc}
 8000ade:	1cc4      	adds	r4, r0, #3
 8000ae0:	f024 0403 	bic.w	r4, r4, #3
 8000ae4:	42a0      	cmp	r0, r4
 8000ae6:	d0f8      	beq.n	8000ada <sbrk_aligned+0x22>
 8000ae8:	1a21      	subs	r1, r4, r0
 8000aea:	4628      	mov	r0, r5
 8000aec:	f000 fca2 	bl	8001434 <_sbrk_r>
 8000af0:	3001      	adds	r0, #1
 8000af2:	d1f2      	bne.n	8000ada <sbrk_aligned+0x22>
 8000af4:	e7ef      	b.n	8000ad6 <sbrk_aligned+0x1e>
 8000af6:	bf00      	nop
 8000af8:	200001c0 	.word	0x200001c0

08000afc <_malloc_r>:
 8000afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b00:	1ccd      	adds	r5, r1, #3
 8000b02:	f025 0503 	bic.w	r5, r5, #3
 8000b06:	3508      	adds	r5, #8
 8000b08:	2d0c      	cmp	r5, #12
 8000b0a:	bf38      	it	cc
 8000b0c:	250c      	movcc	r5, #12
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	4606      	mov	r6, r0
 8000b12:	db01      	blt.n	8000b18 <_malloc_r+0x1c>
 8000b14:	42a9      	cmp	r1, r5
 8000b16:	d904      	bls.n	8000b22 <_malloc_r+0x26>
 8000b18:	230c      	movs	r3, #12
 8000b1a:	6033      	str	r3, [r6, #0]
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bf8 <_malloc_r+0xfc>
 8000b26:	f000 f869 	bl	8000bfc <__malloc_lock>
 8000b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8000b2e:	461c      	mov	r4, r3
 8000b30:	bb44      	cbnz	r4, 8000b84 <_malloc_r+0x88>
 8000b32:	4629      	mov	r1, r5
 8000b34:	4630      	mov	r0, r6
 8000b36:	f7ff ffbf 	bl	8000ab8 <sbrk_aligned>
 8000b3a:	1c43      	adds	r3, r0, #1
 8000b3c:	4604      	mov	r4, r0
 8000b3e:	d158      	bne.n	8000bf2 <_malloc_r+0xf6>
 8000b40:	f8d8 4000 	ldr.w	r4, [r8]
 8000b44:	4627      	mov	r7, r4
 8000b46:	2f00      	cmp	r7, #0
 8000b48:	d143      	bne.n	8000bd2 <_malloc_r+0xd6>
 8000b4a:	2c00      	cmp	r4, #0
 8000b4c:	d04b      	beq.n	8000be6 <_malloc_r+0xea>
 8000b4e:	6823      	ldr	r3, [r4, #0]
 8000b50:	4639      	mov	r1, r7
 8000b52:	4630      	mov	r0, r6
 8000b54:	eb04 0903 	add.w	r9, r4, r3
 8000b58:	f000 fc6c 	bl	8001434 <_sbrk_r>
 8000b5c:	4581      	cmp	r9, r0
 8000b5e:	d142      	bne.n	8000be6 <_malloc_r+0xea>
 8000b60:	6821      	ldr	r1, [r4, #0]
 8000b62:	1a6d      	subs	r5, r5, r1
 8000b64:	4629      	mov	r1, r5
 8000b66:	4630      	mov	r0, r6
 8000b68:	f7ff ffa6 	bl	8000ab8 <sbrk_aligned>
 8000b6c:	3001      	adds	r0, #1
 8000b6e:	d03a      	beq.n	8000be6 <_malloc_r+0xea>
 8000b70:	6823      	ldr	r3, [r4, #0]
 8000b72:	442b      	add	r3, r5
 8000b74:	6023      	str	r3, [r4, #0]
 8000b76:	f8d8 3000 	ldr.w	r3, [r8]
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	bb62      	cbnz	r2, 8000bd8 <_malloc_r+0xdc>
 8000b7e:	f8c8 7000 	str.w	r7, [r8]
 8000b82:	e00f      	b.n	8000ba4 <_malloc_r+0xa8>
 8000b84:	6822      	ldr	r2, [r4, #0]
 8000b86:	1b52      	subs	r2, r2, r5
 8000b88:	d420      	bmi.n	8000bcc <_malloc_r+0xd0>
 8000b8a:	2a0b      	cmp	r2, #11
 8000b8c:	d917      	bls.n	8000bbe <_malloc_r+0xc2>
 8000b8e:	1961      	adds	r1, r4, r5
 8000b90:	42a3      	cmp	r3, r4
 8000b92:	6025      	str	r5, [r4, #0]
 8000b94:	bf18      	it	ne
 8000b96:	6059      	strne	r1, [r3, #4]
 8000b98:	6863      	ldr	r3, [r4, #4]
 8000b9a:	bf08      	it	eq
 8000b9c:	f8c8 1000 	streq.w	r1, [r8]
 8000ba0:	5162      	str	r2, [r4, r5]
 8000ba2:	604b      	str	r3, [r1, #4]
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	f000 f82f 	bl	8000c08 <__malloc_unlock>
 8000baa:	f104 000b 	add.w	r0, r4, #11
 8000bae:	1d23      	adds	r3, r4, #4
 8000bb0:	f020 0007 	bic.w	r0, r0, #7
 8000bb4:	1ac2      	subs	r2, r0, r3
 8000bb6:	bf1c      	itt	ne
 8000bb8:	1a1b      	subne	r3, r3, r0
 8000bba:	50a3      	strne	r3, [r4, r2]
 8000bbc:	e7af      	b.n	8000b1e <_malloc_r+0x22>
 8000bbe:	6862      	ldr	r2, [r4, #4]
 8000bc0:	42a3      	cmp	r3, r4
 8000bc2:	bf0c      	ite	eq
 8000bc4:	f8c8 2000 	streq.w	r2, [r8]
 8000bc8:	605a      	strne	r2, [r3, #4]
 8000bca:	e7eb      	b.n	8000ba4 <_malloc_r+0xa8>
 8000bcc:	4623      	mov	r3, r4
 8000bce:	6864      	ldr	r4, [r4, #4]
 8000bd0:	e7ae      	b.n	8000b30 <_malloc_r+0x34>
 8000bd2:	463c      	mov	r4, r7
 8000bd4:	687f      	ldr	r7, [r7, #4]
 8000bd6:	e7b6      	b.n	8000b46 <_malloc_r+0x4a>
 8000bd8:	461a      	mov	r2, r3
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	42a3      	cmp	r3, r4
 8000bde:	d1fb      	bne.n	8000bd8 <_malloc_r+0xdc>
 8000be0:	2300      	movs	r3, #0
 8000be2:	6053      	str	r3, [r2, #4]
 8000be4:	e7de      	b.n	8000ba4 <_malloc_r+0xa8>
 8000be6:	230c      	movs	r3, #12
 8000be8:	6033      	str	r3, [r6, #0]
 8000bea:	4630      	mov	r0, r6
 8000bec:	f000 f80c 	bl	8000c08 <__malloc_unlock>
 8000bf0:	e794      	b.n	8000b1c <_malloc_r+0x20>
 8000bf2:	6005      	str	r5, [r0, #0]
 8000bf4:	e7d6      	b.n	8000ba4 <_malloc_r+0xa8>
 8000bf6:	bf00      	nop
 8000bf8:	200001c4 	.word	0x200001c4

08000bfc <__malloc_lock>:
 8000bfc:	4801      	ldr	r0, [pc, #4]	@ (8000c04 <__malloc_lock+0x8>)
 8000bfe:	f7ff bf0e 	b.w	8000a1e <__retarget_lock_acquire_recursive>
 8000c02:	bf00      	nop
 8000c04:	200001bc 	.word	0x200001bc

08000c08 <__malloc_unlock>:
 8000c08:	4801      	ldr	r0, [pc, #4]	@ (8000c10 <__malloc_unlock+0x8>)
 8000c0a:	f7ff bf09 	b.w	8000a20 <__retarget_lock_release_recursive>
 8000c0e:	bf00      	nop
 8000c10:	200001bc 	.word	0x200001bc

08000c14 <__sfputc_r>:
 8000c14:	6893      	ldr	r3, [r2, #8]
 8000c16:	3b01      	subs	r3, #1
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	b410      	push	{r4}
 8000c1c:	6093      	str	r3, [r2, #8]
 8000c1e:	da08      	bge.n	8000c32 <__sfputc_r+0x1e>
 8000c20:	6994      	ldr	r4, [r2, #24]
 8000c22:	42a3      	cmp	r3, r4
 8000c24:	db01      	blt.n	8000c2a <__sfputc_r+0x16>
 8000c26:	290a      	cmp	r1, #10
 8000c28:	d103      	bne.n	8000c32 <__sfputc_r+0x1e>
 8000c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c2e:	f000 bb6d 	b.w	800130c <__swbuf_r>
 8000c32:	6813      	ldr	r3, [r2, #0]
 8000c34:	1c58      	adds	r0, r3, #1
 8000c36:	6010      	str	r0, [r2, #0]
 8000c38:	7019      	strb	r1, [r3, #0]
 8000c3a:	4608      	mov	r0, r1
 8000c3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c40:	4770      	bx	lr

08000c42 <__sfputs_r>:
 8000c42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c44:	4606      	mov	r6, r0
 8000c46:	460f      	mov	r7, r1
 8000c48:	4614      	mov	r4, r2
 8000c4a:	18d5      	adds	r5, r2, r3
 8000c4c:	42ac      	cmp	r4, r5
 8000c4e:	d101      	bne.n	8000c54 <__sfputs_r+0x12>
 8000c50:	2000      	movs	r0, #0
 8000c52:	e007      	b.n	8000c64 <__sfputs_r+0x22>
 8000c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c58:	463a      	mov	r2, r7
 8000c5a:	4630      	mov	r0, r6
 8000c5c:	f7ff ffda 	bl	8000c14 <__sfputc_r>
 8000c60:	1c43      	adds	r3, r0, #1
 8000c62:	d1f3      	bne.n	8000c4c <__sfputs_r+0xa>
 8000c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c68 <_vfiprintf_r>:
 8000c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c6c:	460d      	mov	r5, r1
 8000c6e:	b09d      	sub	sp, #116	@ 0x74
 8000c70:	4614      	mov	r4, r2
 8000c72:	4698      	mov	r8, r3
 8000c74:	4606      	mov	r6, r0
 8000c76:	b118      	cbz	r0, 8000c80 <_vfiprintf_r+0x18>
 8000c78:	6a03      	ldr	r3, [r0, #32]
 8000c7a:	b90b      	cbnz	r3, 8000c80 <_vfiprintf_r+0x18>
 8000c7c:	f7ff fdca 	bl	8000814 <__sinit>
 8000c80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c82:	07d9      	lsls	r1, r3, #31
 8000c84:	d405      	bmi.n	8000c92 <_vfiprintf_r+0x2a>
 8000c86:	89ab      	ldrh	r3, [r5, #12]
 8000c88:	059a      	lsls	r2, r3, #22
 8000c8a:	d402      	bmi.n	8000c92 <_vfiprintf_r+0x2a>
 8000c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c8e:	f7ff fec6 	bl	8000a1e <__retarget_lock_acquire_recursive>
 8000c92:	89ab      	ldrh	r3, [r5, #12]
 8000c94:	071b      	lsls	r3, r3, #28
 8000c96:	d501      	bpl.n	8000c9c <_vfiprintf_r+0x34>
 8000c98:	692b      	ldr	r3, [r5, #16]
 8000c9a:	b99b      	cbnz	r3, 8000cc4 <_vfiprintf_r+0x5c>
 8000c9c:	4629      	mov	r1, r5
 8000c9e:	4630      	mov	r0, r6
 8000ca0:	f000 fb72 	bl	8001388 <__swsetup_r>
 8000ca4:	b170      	cbz	r0, 8000cc4 <_vfiprintf_r+0x5c>
 8000ca6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000ca8:	07dc      	lsls	r4, r3, #31
 8000caa:	d504      	bpl.n	8000cb6 <_vfiprintf_r+0x4e>
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cb0:	b01d      	add	sp, #116	@ 0x74
 8000cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cb6:	89ab      	ldrh	r3, [r5, #12]
 8000cb8:	0598      	lsls	r0, r3, #22
 8000cba:	d4f7      	bmi.n	8000cac <_vfiprintf_r+0x44>
 8000cbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000cbe:	f7ff feaf 	bl	8000a20 <__retarget_lock_release_recursive>
 8000cc2:	e7f3      	b.n	8000cac <_vfiprintf_r+0x44>
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cc8:	2320      	movs	r3, #32
 8000cca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000cce:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cd2:	2330      	movs	r3, #48	@ 0x30
 8000cd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e84 <_vfiprintf_r+0x21c>
 8000cd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000cdc:	f04f 0901 	mov.w	r9, #1
 8000ce0:	4623      	mov	r3, r4
 8000ce2:	469a      	mov	sl, r3
 8000ce4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000ce8:	b10a      	cbz	r2, 8000cee <_vfiprintf_r+0x86>
 8000cea:	2a25      	cmp	r2, #37	@ 0x25
 8000cec:	d1f9      	bne.n	8000ce2 <_vfiprintf_r+0x7a>
 8000cee:	ebba 0b04 	subs.w	fp, sl, r4
 8000cf2:	d00b      	beq.n	8000d0c <_vfiprintf_r+0xa4>
 8000cf4:	465b      	mov	r3, fp
 8000cf6:	4622      	mov	r2, r4
 8000cf8:	4629      	mov	r1, r5
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	f7ff ffa1 	bl	8000c42 <__sfputs_r>
 8000d00:	3001      	adds	r0, #1
 8000d02:	f000 80a7 	beq.w	8000e54 <_vfiprintf_r+0x1ec>
 8000d06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000d08:	445a      	add	r2, fp
 8000d0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8000d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	f000 809f 	beq.w	8000e54 <_vfiprintf_r+0x1ec>
 8000d16:	2300      	movs	r3, #0
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000d1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d20:	f10a 0a01 	add.w	sl, sl, #1
 8000d24:	9304      	str	r3, [sp, #16]
 8000d26:	9307      	str	r3, [sp, #28]
 8000d28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000d2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8000d2e:	4654      	mov	r4, sl
 8000d30:	2205      	movs	r2, #5
 8000d32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d36:	4853      	ldr	r0, [pc, #332]	@ (8000e84 <_vfiprintf_r+0x21c>)
 8000d38:	f7ff fa52 	bl	80001e0 <memchr>
 8000d3c:	9a04      	ldr	r2, [sp, #16]
 8000d3e:	b9d8      	cbnz	r0, 8000d78 <_vfiprintf_r+0x110>
 8000d40:	06d1      	lsls	r1, r2, #27
 8000d42:	bf44      	itt	mi
 8000d44:	2320      	movmi	r3, #32
 8000d46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d4a:	0713      	lsls	r3, r2, #28
 8000d4c:	bf44      	itt	mi
 8000d4e:	232b      	movmi	r3, #43	@ 0x2b
 8000d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d54:	f89a 3000 	ldrb.w	r3, [sl]
 8000d58:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d5a:	d015      	beq.n	8000d88 <_vfiprintf_r+0x120>
 8000d5c:	9a07      	ldr	r2, [sp, #28]
 8000d5e:	4654      	mov	r4, sl
 8000d60:	2000      	movs	r0, #0
 8000d62:	f04f 0c0a 	mov.w	ip, #10
 8000d66:	4621      	mov	r1, r4
 8000d68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d6c:	3b30      	subs	r3, #48	@ 0x30
 8000d6e:	2b09      	cmp	r3, #9
 8000d70:	d94b      	bls.n	8000e0a <_vfiprintf_r+0x1a2>
 8000d72:	b1b0      	cbz	r0, 8000da2 <_vfiprintf_r+0x13a>
 8000d74:	9207      	str	r2, [sp, #28]
 8000d76:	e014      	b.n	8000da2 <_vfiprintf_r+0x13a>
 8000d78:	eba0 0308 	sub.w	r3, r0, r8
 8000d7c:	fa09 f303 	lsl.w	r3, r9, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	9304      	str	r3, [sp, #16]
 8000d84:	46a2      	mov	sl, r4
 8000d86:	e7d2      	b.n	8000d2e <_vfiprintf_r+0xc6>
 8000d88:	9b03      	ldr	r3, [sp, #12]
 8000d8a:	1d19      	adds	r1, r3, #4
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	9103      	str	r1, [sp, #12]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	bfbb      	ittet	lt
 8000d94:	425b      	neglt	r3, r3
 8000d96:	f042 0202 	orrlt.w	r2, r2, #2
 8000d9a:	9307      	strge	r3, [sp, #28]
 8000d9c:	9307      	strlt	r3, [sp, #28]
 8000d9e:	bfb8      	it	lt
 8000da0:	9204      	strlt	r2, [sp, #16]
 8000da2:	7823      	ldrb	r3, [r4, #0]
 8000da4:	2b2e      	cmp	r3, #46	@ 0x2e
 8000da6:	d10a      	bne.n	8000dbe <_vfiprintf_r+0x156>
 8000da8:	7863      	ldrb	r3, [r4, #1]
 8000daa:	2b2a      	cmp	r3, #42	@ 0x2a
 8000dac:	d132      	bne.n	8000e14 <_vfiprintf_r+0x1ac>
 8000dae:	9b03      	ldr	r3, [sp, #12]
 8000db0:	1d1a      	adds	r2, r3, #4
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	9203      	str	r2, [sp, #12]
 8000db6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000dba:	3402      	adds	r4, #2
 8000dbc:	9305      	str	r3, [sp, #20]
 8000dbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e94 <_vfiprintf_r+0x22c>
 8000dc2:	7821      	ldrb	r1, [r4, #0]
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	4650      	mov	r0, sl
 8000dc8:	f7ff fa0a 	bl	80001e0 <memchr>
 8000dcc:	b138      	cbz	r0, 8000dde <_vfiprintf_r+0x176>
 8000dce:	9b04      	ldr	r3, [sp, #16]
 8000dd0:	eba0 000a 	sub.w	r0, r0, sl
 8000dd4:	2240      	movs	r2, #64	@ 0x40
 8000dd6:	4082      	lsls	r2, r0
 8000dd8:	4313      	orrs	r3, r2
 8000dda:	3401      	adds	r4, #1
 8000ddc:	9304      	str	r3, [sp, #16]
 8000dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000de2:	4829      	ldr	r0, [pc, #164]	@ (8000e88 <_vfiprintf_r+0x220>)
 8000de4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000de8:	2206      	movs	r2, #6
 8000dea:	f7ff f9f9 	bl	80001e0 <memchr>
 8000dee:	2800      	cmp	r0, #0
 8000df0:	d03f      	beq.n	8000e72 <_vfiprintf_r+0x20a>
 8000df2:	4b26      	ldr	r3, [pc, #152]	@ (8000e8c <_vfiprintf_r+0x224>)
 8000df4:	bb1b      	cbnz	r3, 8000e3e <_vfiprintf_r+0x1d6>
 8000df6:	9b03      	ldr	r3, [sp, #12]
 8000df8:	3307      	adds	r3, #7
 8000dfa:	f023 0307 	bic.w	r3, r3, #7
 8000dfe:	3308      	adds	r3, #8
 8000e00:	9303      	str	r3, [sp, #12]
 8000e02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000e04:	443b      	add	r3, r7
 8000e06:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e08:	e76a      	b.n	8000ce0 <_vfiprintf_r+0x78>
 8000e0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e0e:	460c      	mov	r4, r1
 8000e10:	2001      	movs	r0, #1
 8000e12:	e7a8      	b.n	8000d66 <_vfiprintf_r+0xfe>
 8000e14:	2300      	movs	r3, #0
 8000e16:	3401      	adds	r4, #1
 8000e18:	9305      	str	r3, [sp, #20]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	f04f 0c0a 	mov.w	ip, #10
 8000e20:	4620      	mov	r0, r4
 8000e22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e26:	3a30      	subs	r2, #48	@ 0x30
 8000e28:	2a09      	cmp	r2, #9
 8000e2a:	d903      	bls.n	8000e34 <_vfiprintf_r+0x1cc>
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d0c6      	beq.n	8000dbe <_vfiprintf_r+0x156>
 8000e30:	9105      	str	r1, [sp, #20]
 8000e32:	e7c4      	b.n	8000dbe <_vfiprintf_r+0x156>
 8000e34:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e38:	4604      	mov	r4, r0
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	e7f0      	b.n	8000e20 <_vfiprintf_r+0x1b8>
 8000e3e:	ab03      	add	r3, sp, #12
 8000e40:	9300      	str	r3, [sp, #0]
 8000e42:	462a      	mov	r2, r5
 8000e44:	4b12      	ldr	r3, [pc, #72]	@ (8000e90 <_vfiprintf_r+0x228>)
 8000e46:	a904      	add	r1, sp, #16
 8000e48:	4630      	mov	r0, r6
 8000e4a:	f3af 8000 	nop.w
 8000e4e:	4607      	mov	r7, r0
 8000e50:	1c78      	adds	r0, r7, #1
 8000e52:	d1d6      	bne.n	8000e02 <_vfiprintf_r+0x19a>
 8000e54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e56:	07d9      	lsls	r1, r3, #31
 8000e58:	d405      	bmi.n	8000e66 <_vfiprintf_r+0x1fe>
 8000e5a:	89ab      	ldrh	r3, [r5, #12]
 8000e5c:	059a      	lsls	r2, r3, #22
 8000e5e:	d402      	bmi.n	8000e66 <_vfiprintf_r+0x1fe>
 8000e60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e62:	f7ff fddd 	bl	8000a20 <__retarget_lock_release_recursive>
 8000e66:	89ab      	ldrh	r3, [r5, #12]
 8000e68:	065b      	lsls	r3, r3, #25
 8000e6a:	f53f af1f 	bmi.w	8000cac <_vfiprintf_r+0x44>
 8000e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e70:	e71e      	b.n	8000cb0 <_vfiprintf_r+0x48>
 8000e72:	ab03      	add	r3, sp, #12
 8000e74:	9300      	str	r3, [sp, #0]
 8000e76:	462a      	mov	r2, r5
 8000e78:	4b05      	ldr	r3, [pc, #20]	@ (8000e90 <_vfiprintf_r+0x228>)
 8000e7a:	a904      	add	r1, sp, #16
 8000e7c:	4630      	mov	r0, r6
 8000e7e:	f000 f879 	bl	8000f74 <_printf_i>
 8000e82:	e7e4      	b.n	8000e4e <_vfiprintf_r+0x1e6>
 8000e84:	0800158a 	.word	0x0800158a
 8000e88:	08001594 	.word	0x08001594
 8000e8c:	00000000 	.word	0x00000000
 8000e90:	08000c43 	.word	0x08000c43
 8000e94:	08001590 	.word	0x08001590

08000e98 <_printf_common>:
 8000e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e9c:	4616      	mov	r6, r2
 8000e9e:	4698      	mov	r8, r3
 8000ea0:	688a      	ldr	r2, [r1, #8]
 8000ea2:	690b      	ldr	r3, [r1, #16]
 8000ea4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	bfb8      	it	lt
 8000eac:	4613      	movlt	r3, r2
 8000eae:	6033      	str	r3, [r6, #0]
 8000eb0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000eb4:	4607      	mov	r7, r0
 8000eb6:	460c      	mov	r4, r1
 8000eb8:	b10a      	cbz	r2, 8000ebe <_printf_common+0x26>
 8000eba:	3301      	adds	r3, #1
 8000ebc:	6033      	str	r3, [r6, #0]
 8000ebe:	6823      	ldr	r3, [r4, #0]
 8000ec0:	0699      	lsls	r1, r3, #26
 8000ec2:	bf42      	ittt	mi
 8000ec4:	6833      	ldrmi	r3, [r6, #0]
 8000ec6:	3302      	addmi	r3, #2
 8000ec8:	6033      	strmi	r3, [r6, #0]
 8000eca:	6825      	ldr	r5, [r4, #0]
 8000ecc:	f015 0506 	ands.w	r5, r5, #6
 8000ed0:	d106      	bne.n	8000ee0 <_printf_common+0x48>
 8000ed2:	f104 0a19 	add.w	sl, r4, #25
 8000ed6:	68e3      	ldr	r3, [r4, #12]
 8000ed8:	6832      	ldr	r2, [r6, #0]
 8000eda:	1a9b      	subs	r3, r3, r2
 8000edc:	42ab      	cmp	r3, r5
 8000ede:	dc26      	bgt.n	8000f2e <_printf_common+0x96>
 8000ee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ee4:	6822      	ldr	r2, [r4, #0]
 8000ee6:	3b00      	subs	r3, #0
 8000ee8:	bf18      	it	ne
 8000eea:	2301      	movne	r3, #1
 8000eec:	0692      	lsls	r2, r2, #26
 8000eee:	d42b      	bmi.n	8000f48 <_printf_common+0xb0>
 8000ef0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ef4:	4641      	mov	r1, r8
 8000ef6:	4638      	mov	r0, r7
 8000ef8:	47c8      	blx	r9
 8000efa:	3001      	adds	r0, #1
 8000efc:	d01e      	beq.n	8000f3c <_printf_common+0xa4>
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	6922      	ldr	r2, [r4, #16]
 8000f02:	f003 0306 	and.w	r3, r3, #6
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	bf02      	ittt	eq
 8000f0a:	68e5      	ldreq	r5, [r4, #12]
 8000f0c:	6833      	ldreq	r3, [r6, #0]
 8000f0e:	1aed      	subeq	r5, r5, r3
 8000f10:	68a3      	ldr	r3, [r4, #8]
 8000f12:	bf0c      	ite	eq
 8000f14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f18:	2500      	movne	r5, #0
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	bfc4      	itt	gt
 8000f1e:	1a9b      	subgt	r3, r3, r2
 8000f20:	18ed      	addgt	r5, r5, r3
 8000f22:	2600      	movs	r6, #0
 8000f24:	341a      	adds	r4, #26
 8000f26:	42b5      	cmp	r5, r6
 8000f28:	d11a      	bne.n	8000f60 <_printf_common+0xc8>
 8000f2a:	2000      	movs	r0, #0
 8000f2c:	e008      	b.n	8000f40 <_printf_common+0xa8>
 8000f2e:	2301      	movs	r3, #1
 8000f30:	4652      	mov	r2, sl
 8000f32:	4641      	mov	r1, r8
 8000f34:	4638      	mov	r0, r7
 8000f36:	47c8      	blx	r9
 8000f38:	3001      	adds	r0, #1
 8000f3a:	d103      	bne.n	8000f44 <_printf_common+0xac>
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f44:	3501      	adds	r5, #1
 8000f46:	e7c6      	b.n	8000ed6 <_printf_common+0x3e>
 8000f48:	18e1      	adds	r1, r4, r3
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	2030      	movs	r0, #48	@ 0x30
 8000f4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f52:	4422      	add	r2, r4
 8000f54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	e7c7      	b.n	8000ef0 <_printf_common+0x58>
 8000f60:	2301      	movs	r3, #1
 8000f62:	4622      	mov	r2, r4
 8000f64:	4641      	mov	r1, r8
 8000f66:	4638      	mov	r0, r7
 8000f68:	47c8      	blx	r9
 8000f6a:	3001      	adds	r0, #1
 8000f6c:	d0e6      	beq.n	8000f3c <_printf_common+0xa4>
 8000f6e:	3601      	adds	r6, #1
 8000f70:	e7d9      	b.n	8000f26 <_printf_common+0x8e>
	...

08000f74 <_printf_i>:
 8000f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f78:	7e0f      	ldrb	r7, [r1, #24]
 8000f7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f7c:	2f78      	cmp	r7, #120	@ 0x78
 8000f7e:	4691      	mov	r9, r2
 8000f80:	4680      	mov	r8, r0
 8000f82:	460c      	mov	r4, r1
 8000f84:	469a      	mov	sl, r3
 8000f86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f8a:	d807      	bhi.n	8000f9c <_printf_i+0x28>
 8000f8c:	2f62      	cmp	r7, #98	@ 0x62
 8000f8e:	d80a      	bhi.n	8000fa6 <_printf_i+0x32>
 8000f90:	2f00      	cmp	r7, #0
 8000f92:	f000 80d2 	beq.w	800113a <_printf_i+0x1c6>
 8000f96:	2f58      	cmp	r7, #88	@ 0x58
 8000f98:	f000 80b9 	beq.w	800110e <_printf_i+0x19a>
 8000f9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fa0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000fa4:	e03a      	b.n	800101c <_printf_i+0xa8>
 8000fa6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000faa:	2b15      	cmp	r3, #21
 8000fac:	d8f6      	bhi.n	8000f9c <_printf_i+0x28>
 8000fae:	a101      	add	r1, pc, #4	@ (adr r1, 8000fb4 <_printf_i+0x40>)
 8000fb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fb4:	0800100d 	.word	0x0800100d
 8000fb8:	08001021 	.word	0x08001021
 8000fbc:	08000f9d 	.word	0x08000f9d
 8000fc0:	08000f9d 	.word	0x08000f9d
 8000fc4:	08000f9d 	.word	0x08000f9d
 8000fc8:	08000f9d 	.word	0x08000f9d
 8000fcc:	08001021 	.word	0x08001021
 8000fd0:	08000f9d 	.word	0x08000f9d
 8000fd4:	08000f9d 	.word	0x08000f9d
 8000fd8:	08000f9d 	.word	0x08000f9d
 8000fdc:	08000f9d 	.word	0x08000f9d
 8000fe0:	08001121 	.word	0x08001121
 8000fe4:	0800104b 	.word	0x0800104b
 8000fe8:	080010db 	.word	0x080010db
 8000fec:	08000f9d 	.word	0x08000f9d
 8000ff0:	08000f9d 	.word	0x08000f9d
 8000ff4:	08001143 	.word	0x08001143
 8000ff8:	08000f9d 	.word	0x08000f9d
 8000ffc:	0800104b 	.word	0x0800104b
 8001000:	08000f9d 	.word	0x08000f9d
 8001004:	08000f9d 	.word	0x08000f9d
 8001008:	080010e3 	.word	0x080010e3
 800100c:	6833      	ldr	r3, [r6, #0]
 800100e:	1d1a      	adds	r2, r3, #4
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6032      	str	r2, [r6, #0]
 8001014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001018:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800101c:	2301      	movs	r3, #1
 800101e:	e09d      	b.n	800115c <_printf_i+0x1e8>
 8001020:	6833      	ldr	r3, [r6, #0]
 8001022:	6820      	ldr	r0, [r4, #0]
 8001024:	1d19      	adds	r1, r3, #4
 8001026:	6031      	str	r1, [r6, #0]
 8001028:	0606      	lsls	r6, r0, #24
 800102a:	d501      	bpl.n	8001030 <_printf_i+0xbc>
 800102c:	681d      	ldr	r5, [r3, #0]
 800102e:	e003      	b.n	8001038 <_printf_i+0xc4>
 8001030:	0645      	lsls	r5, r0, #25
 8001032:	d5fb      	bpl.n	800102c <_printf_i+0xb8>
 8001034:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001038:	2d00      	cmp	r5, #0
 800103a:	da03      	bge.n	8001044 <_printf_i+0xd0>
 800103c:	232d      	movs	r3, #45	@ 0x2d
 800103e:	426d      	negs	r5, r5
 8001040:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001044:	4859      	ldr	r0, [pc, #356]	@ (80011ac <_printf_i+0x238>)
 8001046:	230a      	movs	r3, #10
 8001048:	e011      	b.n	800106e <_printf_i+0xfa>
 800104a:	6821      	ldr	r1, [r4, #0]
 800104c:	6833      	ldr	r3, [r6, #0]
 800104e:	0608      	lsls	r0, r1, #24
 8001050:	f853 5b04 	ldr.w	r5, [r3], #4
 8001054:	d402      	bmi.n	800105c <_printf_i+0xe8>
 8001056:	0649      	lsls	r1, r1, #25
 8001058:	bf48      	it	mi
 800105a:	b2ad      	uxthmi	r5, r5
 800105c:	2f6f      	cmp	r7, #111	@ 0x6f
 800105e:	4853      	ldr	r0, [pc, #332]	@ (80011ac <_printf_i+0x238>)
 8001060:	6033      	str	r3, [r6, #0]
 8001062:	bf14      	ite	ne
 8001064:	230a      	movne	r3, #10
 8001066:	2308      	moveq	r3, #8
 8001068:	2100      	movs	r1, #0
 800106a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800106e:	6866      	ldr	r6, [r4, #4]
 8001070:	60a6      	str	r6, [r4, #8]
 8001072:	2e00      	cmp	r6, #0
 8001074:	bfa2      	ittt	ge
 8001076:	6821      	ldrge	r1, [r4, #0]
 8001078:	f021 0104 	bicge.w	r1, r1, #4
 800107c:	6021      	strge	r1, [r4, #0]
 800107e:	b90d      	cbnz	r5, 8001084 <_printf_i+0x110>
 8001080:	2e00      	cmp	r6, #0
 8001082:	d04b      	beq.n	800111c <_printf_i+0x1a8>
 8001084:	4616      	mov	r6, r2
 8001086:	fbb5 f1f3 	udiv	r1, r5, r3
 800108a:	fb03 5711 	mls	r7, r3, r1, r5
 800108e:	5dc7      	ldrb	r7, [r0, r7]
 8001090:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001094:	462f      	mov	r7, r5
 8001096:	42bb      	cmp	r3, r7
 8001098:	460d      	mov	r5, r1
 800109a:	d9f4      	bls.n	8001086 <_printf_i+0x112>
 800109c:	2b08      	cmp	r3, #8
 800109e:	d10b      	bne.n	80010b8 <_printf_i+0x144>
 80010a0:	6823      	ldr	r3, [r4, #0]
 80010a2:	07df      	lsls	r7, r3, #31
 80010a4:	d508      	bpl.n	80010b8 <_printf_i+0x144>
 80010a6:	6923      	ldr	r3, [r4, #16]
 80010a8:	6861      	ldr	r1, [r4, #4]
 80010aa:	4299      	cmp	r1, r3
 80010ac:	bfde      	ittt	le
 80010ae:	2330      	movle	r3, #48	@ 0x30
 80010b0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010b4:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80010b8:	1b92      	subs	r2, r2, r6
 80010ba:	6122      	str	r2, [r4, #16]
 80010bc:	f8cd a000 	str.w	sl, [sp]
 80010c0:	464b      	mov	r3, r9
 80010c2:	aa03      	add	r2, sp, #12
 80010c4:	4621      	mov	r1, r4
 80010c6:	4640      	mov	r0, r8
 80010c8:	f7ff fee6 	bl	8000e98 <_printf_common>
 80010cc:	3001      	adds	r0, #1
 80010ce:	d14a      	bne.n	8001166 <_printf_i+0x1f2>
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010d4:	b004      	add	sp, #16
 80010d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010da:	6823      	ldr	r3, [r4, #0]
 80010dc:	f043 0320 	orr.w	r3, r3, #32
 80010e0:	6023      	str	r3, [r4, #0]
 80010e2:	4833      	ldr	r0, [pc, #204]	@ (80011b0 <_printf_i+0x23c>)
 80010e4:	2778      	movs	r7, #120	@ 0x78
 80010e6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010ea:	6823      	ldr	r3, [r4, #0]
 80010ec:	6831      	ldr	r1, [r6, #0]
 80010ee:	061f      	lsls	r7, r3, #24
 80010f0:	f851 5b04 	ldr.w	r5, [r1], #4
 80010f4:	d402      	bmi.n	80010fc <_printf_i+0x188>
 80010f6:	065f      	lsls	r7, r3, #25
 80010f8:	bf48      	it	mi
 80010fa:	b2ad      	uxthmi	r5, r5
 80010fc:	6031      	str	r1, [r6, #0]
 80010fe:	07d9      	lsls	r1, r3, #31
 8001100:	bf44      	itt	mi
 8001102:	f043 0320 	orrmi.w	r3, r3, #32
 8001106:	6023      	strmi	r3, [r4, #0]
 8001108:	b11d      	cbz	r5, 8001112 <_printf_i+0x19e>
 800110a:	2310      	movs	r3, #16
 800110c:	e7ac      	b.n	8001068 <_printf_i+0xf4>
 800110e:	4827      	ldr	r0, [pc, #156]	@ (80011ac <_printf_i+0x238>)
 8001110:	e7e9      	b.n	80010e6 <_printf_i+0x172>
 8001112:	6823      	ldr	r3, [r4, #0]
 8001114:	f023 0320 	bic.w	r3, r3, #32
 8001118:	6023      	str	r3, [r4, #0]
 800111a:	e7f6      	b.n	800110a <_printf_i+0x196>
 800111c:	4616      	mov	r6, r2
 800111e:	e7bd      	b.n	800109c <_printf_i+0x128>
 8001120:	6833      	ldr	r3, [r6, #0]
 8001122:	6825      	ldr	r5, [r4, #0]
 8001124:	6961      	ldr	r1, [r4, #20]
 8001126:	1d18      	adds	r0, r3, #4
 8001128:	6030      	str	r0, [r6, #0]
 800112a:	062e      	lsls	r6, r5, #24
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	d501      	bpl.n	8001134 <_printf_i+0x1c0>
 8001130:	6019      	str	r1, [r3, #0]
 8001132:	e002      	b.n	800113a <_printf_i+0x1c6>
 8001134:	0668      	lsls	r0, r5, #25
 8001136:	d5fb      	bpl.n	8001130 <_printf_i+0x1bc>
 8001138:	8019      	strh	r1, [r3, #0]
 800113a:	2300      	movs	r3, #0
 800113c:	6123      	str	r3, [r4, #16]
 800113e:	4616      	mov	r6, r2
 8001140:	e7bc      	b.n	80010bc <_printf_i+0x148>
 8001142:	6833      	ldr	r3, [r6, #0]
 8001144:	1d1a      	adds	r2, r3, #4
 8001146:	6032      	str	r2, [r6, #0]
 8001148:	681e      	ldr	r6, [r3, #0]
 800114a:	6862      	ldr	r2, [r4, #4]
 800114c:	2100      	movs	r1, #0
 800114e:	4630      	mov	r0, r6
 8001150:	f7ff f846 	bl	80001e0 <memchr>
 8001154:	b108      	cbz	r0, 800115a <_printf_i+0x1e6>
 8001156:	1b80      	subs	r0, r0, r6
 8001158:	6060      	str	r0, [r4, #4]
 800115a:	6863      	ldr	r3, [r4, #4]
 800115c:	6123      	str	r3, [r4, #16]
 800115e:	2300      	movs	r3, #0
 8001160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001164:	e7aa      	b.n	80010bc <_printf_i+0x148>
 8001166:	6923      	ldr	r3, [r4, #16]
 8001168:	4632      	mov	r2, r6
 800116a:	4649      	mov	r1, r9
 800116c:	4640      	mov	r0, r8
 800116e:	47d0      	blx	sl
 8001170:	3001      	adds	r0, #1
 8001172:	d0ad      	beq.n	80010d0 <_printf_i+0x15c>
 8001174:	6823      	ldr	r3, [r4, #0]
 8001176:	079b      	lsls	r3, r3, #30
 8001178:	d413      	bmi.n	80011a2 <_printf_i+0x22e>
 800117a:	68e0      	ldr	r0, [r4, #12]
 800117c:	9b03      	ldr	r3, [sp, #12]
 800117e:	4298      	cmp	r0, r3
 8001180:	bfb8      	it	lt
 8001182:	4618      	movlt	r0, r3
 8001184:	e7a6      	b.n	80010d4 <_printf_i+0x160>
 8001186:	2301      	movs	r3, #1
 8001188:	4632      	mov	r2, r6
 800118a:	4649      	mov	r1, r9
 800118c:	4640      	mov	r0, r8
 800118e:	47d0      	blx	sl
 8001190:	3001      	adds	r0, #1
 8001192:	d09d      	beq.n	80010d0 <_printf_i+0x15c>
 8001194:	3501      	adds	r5, #1
 8001196:	68e3      	ldr	r3, [r4, #12]
 8001198:	9903      	ldr	r1, [sp, #12]
 800119a:	1a5b      	subs	r3, r3, r1
 800119c:	42ab      	cmp	r3, r5
 800119e:	dcf2      	bgt.n	8001186 <_printf_i+0x212>
 80011a0:	e7eb      	b.n	800117a <_printf_i+0x206>
 80011a2:	2500      	movs	r5, #0
 80011a4:	f104 0619 	add.w	r6, r4, #25
 80011a8:	e7f5      	b.n	8001196 <_printf_i+0x222>
 80011aa:	bf00      	nop
 80011ac:	0800159b 	.word	0x0800159b
 80011b0:	080015ac 	.word	0x080015ac

080011b4 <__sflush_r>:
 80011b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80011b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011bc:	0716      	lsls	r6, r2, #28
 80011be:	4605      	mov	r5, r0
 80011c0:	460c      	mov	r4, r1
 80011c2:	d454      	bmi.n	800126e <__sflush_r+0xba>
 80011c4:	684b      	ldr	r3, [r1, #4]
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	dc02      	bgt.n	80011d0 <__sflush_r+0x1c>
 80011ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	dd48      	ble.n	8001262 <__sflush_r+0xae>
 80011d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	d045      	beq.n	8001262 <__sflush_r+0xae>
 80011d6:	2300      	movs	r3, #0
 80011d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011dc:	682f      	ldr	r7, [r5, #0]
 80011de:	6a21      	ldr	r1, [r4, #32]
 80011e0:	602b      	str	r3, [r5, #0]
 80011e2:	d030      	beq.n	8001246 <__sflush_r+0x92>
 80011e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011e6:	89a3      	ldrh	r3, [r4, #12]
 80011e8:	0759      	lsls	r1, r3, #29
 80011ea:	d505      	bpl.n	80011f8 <__sflush_r+0x44>
 80011ec:	6863      	ldr	r3, [r4, #4]
 80011ee:	1ad2      	subs	r2, r2, r3
 80011f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011f2:	b10b      	cbz	r3, 80011f8 <__sflush_r+0x44>
 80011f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011f6:	1ad2      	subs	r2, r2, r3
 80011f8:	2300      	movs	r3, #0
 80011fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011fc:	6a21      	ldr	r1, [r4, #32]
 80011fe:	4628      	mov	r0, r5
 8001200:	47b0      	blx	r6
 8001202:	1c43      	adds	r3, r0, #1
 8001204:	89a3      	ldrh	r3, [r4, #12]
 8001206:	d106      	bne.n	8001216 <__sflush_r+0x62>
 8001208:	6829      	ldr	r1, [r5, #0]
 800120a:	291d      	cmp	r1, #29
 800120c:	d82b      	bhi.n	8001266 <__sflush_r+0xb2>
 800120e:	4a2a      	ldr	r2, [pc, #168]	@ (80012b8 <__sflush_r+0x104>)
 8001210:	410a      	asrs	r2, r1
 8001212:	07d6      	lsls	r6, r2, #31
 8001214:	d427      	bmi.n	8001266 <__sflush_r+0xb2>
 8001216:	2200      	movs	r2, #0
 8001218:	6062      	str	r2, [r4, #4]
 800121a:	04d9      	lsls	r1, r3, #19
 800121c:	6922      	ldr	r2, [r4, #16]
 800121e:	6022      	str	r2, [r4, #0]
 8001220:	d504      	bpl.n	800122c <__sflush_r+0x78>
 8001222:	1c42      	adds	r2, r0, #1
 8001224:	d101      	bne.n	800122a <__sflush_r+0x76>
 8001226:	682b      	ldr	r3, [r5, #0]
 8001228:	b903      	cbnz	r3, 800122c <__sflush_r+0x78>
 800122a:	6560      	str	r0, [r4, #84]	@ 0x54
 800122c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800122e:	602f      	str	r7, [r5, #0]
 8001230:	b1b9      	cbz	r1, 8001262 <__sflush_r+0xae>
 8001232:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001236:	4299      	cmp	r1, r3
 8001238:	d002      	beq.n	8001240 <__sflush_r+0x8c>
 800123a:	4628      	mov	r0, r5
 800123c:	f7ff fbf2 	bl	8000a24 <_free_r>
 8001240:	2300      	movs	r3, #0
 8001242:	6363      	str	r3, [r4, #52]	@ 0x34
 8001244:	e00d      	b.n	8001262 <__sflush_r+0xae>
 8001246:	2301      	movs	r3, #1
 8001248:	4628      	mov	r0, r5
 800124a:	47b0      	blx	r6
 800124c:	4602      	mov	r2, r0
 800124e:	1c50      	adds	r0, r2, #1
 8001250:	d1c9      	bne.n	80011e6 <__sflush_r+0x32>
 8001252:	682b      	ldr	r3, [r5, #0]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d0c6      	beq.n	80011e6 <__sflush_r+0x32>
 8001258:	2b1d      	cmp	r3, #29
 800125a:	d001      	beq.n	8001260 <__sflush_r+0xac>
 800125c:	2b16      	cmp	r3, #22
 800125e:	d11e      	bne.n	800129e <__sflush_r+0xea>
 8001260:	602f      	str	r7, [r5, #0]
 8001262:	2000      	movs	r0, #0
 8001264:	e022      	b.n	80012ac <__sflush_r+0xf8>
 8001266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800126a:	b21b      	sxth	r3, r3
 800126c:	e01b      	b.n	80012a6 <__sflush_r+0xf2>
 800126e:	690f      	ldr	r7, [r1, #16]
 8001270:	2f00      	cmp	r7, #0
 8001272:	d0f6      	beq.n	8001262 <__sflush_r+0xae>
 8001274:	0793      	lsls	r3, r2, #30
 8001276:	680e      	ldr	r6, [r1, #0]
 8001278:	bf08      	it	eq
 800127a:	694b      	ldreq	r3, [r1, #20]
 800127c:	600f      	str	r7, [r1, #0]
 800127e:	bf18      	it	ne
 8001280:	2300      	movne	r3, #0
 8001282:	eba6 0807 	sub.w	r8, r6, r7
 8001286:	608b      	str	r3, [r1, #8]
 8001288:	f1b8 0f00 	cmp.w	r8, #0
 800128c:	dde9      	ble.n	8001262 <__sflush_r+0xae>
 800128e:	6a21      	ldr	r1, [r4, #32]
 8001290:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001292:	4643      	mov	r3, r8
 8001294:	463a      	mov	r2, r7
 8001296:	4628      	mov	r0, r5
 8001298:	47b0      	blx	r6
 800129a:	2800      	cmp	r0, #0
 800129c:	dc08      	bgt.n	80012b0 <__sflush_r+0xfc>
 800129e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012a6:	81a3      	strh	r3, [r4, #12]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80012ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012b0:	4407      	add	r7, r0
 80012b2:	eba8 0800 	sub.w	r8, r8, r0
 80012b6:	e7e7      	b.n	8001288 <__sflush_r+0xd4>
 80012b8:	dfbffffe 	.word	0xdfbffffe

080012bc <_fflush_r>:
 80012bc:	b538      	push	{r3, r4, r5, lr}
 80012be:	690b      	ldr	r3, [r1, #16]
 80012c0:	4605      	mov	r5, r0
 80012c2:	460c      	mov	r4, r1
 80012c4:	b913      	cbnz	r3, 80012cc <_fflush_r+0x10>
 80012c6:	2500      	movs	r5, #0
 80012c8:	4628      	mov	r0, r5
 80012ca:	bd38      	pop	{r3, r4, r5, pc}
 80012cc:	b118      	cbz	r0, 80012d6 <_fflush_r+0x1a>
 80012ce:	6a03      	ldr	r3, [r0, #32]
 80012d0:	b90b      	cbnz	r3, 80012d6 <_fflush_r+0x1a>
 80012d2:	f7ff fa9f 	bl	8000814 <__sinit>
 80012d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f3      	beq.n	80012c6 <_fflush_r+0xa>
 80012de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012e0:	07d0      	lsls	r0, r2, #31
 80012e2:	d404      	bmi.n	80012ee <_fflush_r+0x32>
 80012e4:	0599      	lsls	r1, r3, #22
 80012e6:	d402      	bmi.n	80012ee <_fflush_r+0x32>
 80012e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012ea:	f7ff fb98 	bl	8000a1e <__retarget_lock_acquire_recursive>
 80012ee:	4628      	mov	r0, r5
 80012f0:	4621      	mov	r1, r4
 80012f2:	f7ff ff5f 	bl	80011b4 <__sflush_r>
 80012f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012f8:	07da      	lsls	r2, r3, #31
 80012fa:	4605      	mov	r5, r0
 80012fc:	d4e4      	bmi.n	80012c8 <_fflush_r+0xc>
 80012fe:	89a3      	ldrh	r3, [r4, #12]
 8001300:	059b      	lsls	r3, r3, #22
 8001302:	d4e1      	bmi.n	80012c8 <_fflush_r+0xc>
 8001304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001306:	f7ff fb8b 	bl	8000a20 <__retarget_lock_release_recursive>
 800130a:	e7dd      	b.n	80012c8 <_fflush_r+0xc>

0800130c <__swbuf_r>:
 800130c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130e:	460e      	mov	r6, r1
 8001310:	4614      	mov	r4, r2
 8001312:	4605      	mov	r5, r0
 8001314:	b118      	cbz	r0, 800131e <__swbuf_r+0x12>
 8001316:	6a03      	ldr	r3, [r0, #32]
 8001318:	b90b      	cbnz	r3, 800131e <__swbuf_r+0x12>
 800131a:	f7ff fa7b 	bl	8000814 <__sinit>
 800131e:	69a3      	ldr	r3, [r4, #24]
 8001320:	60a3      	str	r3, [r4, #8]
 8001322:	89a3      	ldrh	r3, [r4, #12]
 8001324:	071a      	lsls	r2, r3, #28
 8001326:	d501      	bpl.n	800132c <__swbuf_r+0x20>
 8001328:	6923      	ldr	r3, [r4, #16]
 800132a:	b943      	cbnz	r3, 800133e <__swbuf_r+0x32>
 800132c:	4621      	mov	r1, r4
 800132e:	4628      	mov	r0, r5
 8001330:	f000 f82a 	bl	8001388 <__swsetup_r>
 8001334:	b118      	cbz	r0, 800133e <__swbuf_r+0x32>
 8001336:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800133a:	4638      	mov	r0, r7
 800133c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800133e:	6823      	ldr	r3, [r4, #0]
 8001340:	6922      	ldr	r2, [r4, #16]
 8001342:	1a98      	subs	r0, r3, r2
 8001344:	6963      	ldr	r3, [r4, #20]
 8001346:	b2f6      	uxtb	r6, r6
 8001348:	4283      	cmp	r3, r0
 800134a:	4637      	mov	r7, r6
 800134c:	dc05      	bgt.n	800135a <__swbuf_r+0x4e>
 800134e:	4621      	mov	r1, r4
 8001350:	4628      	mov	r0, r5
 8001352:	f7ff ffb3 	bl	80012bc <_fflush_r>
 8001356:	2800      	cmp	r0, #0
 8001358:	d1ed      	bne.n	8001336 <__swbuf_r+0x2a>
 800135a:	68a3      	ldr	r3, [r4, #8]
 800135c:	3b01      	subs	r3, #1
 800135e:	60a3      	str	r3, [r4, #8]
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	6022      	str	r2, [r4, #0]
 8001366:	701e      	strb	r6, [r3, #0]
 8001368:	6962      	ldr	r2, [r4, #20]
 800136a:	1c43      	adds	r3, r0, #1
 800136c:	429a      	cmp	r2, r3
 800136e:	d004      	beq.n	800137a <__swbuf_r+0x6e>
 8001370:	89a3      	ldrh	r3, [r4, #12]
 8001372:	07db      	lsls	r3, r3, #31
 8001374:	d5e1      	bpl.n	800133a <__swbuf_r+0x2e>
 8001376:	2e0a      	cmp	r6, #10
 8001378:	d1df      	bne.n	800133a <__swbuf_r+0x2e>
 800137a:	4621      	mov	r1, r4
 800137c:	4628      	mov	r0, r5
 800137e:	f7ff ff9d 	bl	80012bc <_fflush_r>
 8001382:	2800      	cmp	r0, #0
 8001384:	d0d9      	beq.n	800133a <__swbuf_r+0x2e>
 8001386:	e7d6      	b.n	8001336 <__swbuf_r+0x2a>

08001388 <__swsetup_r>:
 8001388:	b538      	push	{r3, r4, r5, lr}
 800138a:	4b29      	ldr	r3, [pc, #164]	@ (8001430 <__swsetup_r+0xa8>)
 800138c:	4605      	mov	r5, r0
 800138e:	6818      	ldr	r0, [r3, #0]
 8001390:	460c      	mov	r4, r1
 8001392:	b118      	cbz	r0, 800139c <__swsetup_r+0x14>
 8001394:	6a03      	ldr	r3, [r0, #32]
 8001396:	b90b      	cbnz	r3, 800139c <__swsetup_r+0x14>
 8001398:	f7ff fa3c 	bl	8000814 <__sinit>
 800139c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013a0:	0719      	lsls	r1, r3, #28
 80013a2:	d422      	bmi.n	80013ea <__swsetup_r+0x62>
 80013a4:	06da      	lsls	r2, r3, #27
 80013a6:	d407      	bmi.n	80013b8 <__swsetup_r+0x30>
 80013a8:	2209      	movs	r2, #9
 80013aa:	602a      	str	r2, [r5, #0]
 80013ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013b0:	81a3      	strh	r3, [r4, #12]
 80013b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013b6:	e033      	b.n	8001420 <__swsetup_r+0x98>
 80013b8:	0758      	lsls	r0, r3, #29
 80013ba:	d512      	bpl.n	80013e2 <__swsetup_r+0x5a>
 80013bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80013be:	b141      	cbz	r1, 80013d2 <__swsetup_r+0x4a>
 80013c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80013c4:	4299      	cmp	r1, r3
 80013c6:	d002      	beq.n	80013ce <__swsetup_r+0x46>
 80013c8:	4628      	mov	r0, r5
 80013ca:	f7ff fb2b 	bl	8000a24 <_free_r>
 80013ce:	2300      	movs	r3, #0
 80013d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80013d2:	89a3      	ldrh	r3, [r4, #12]
 80013d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80013d8:	81a3      	strh	r3, [r4, #12]
 80013da:	2300      	movs	r3, #0
 80013dc:	6063      	str	r3, [r4, #4]
 80013de:	6923      	ldr	r3, [r4, #16]
 80013e0:	6023      	str	r3, [r4, #0]
 80013e2:	89a3      	ldrh	r3, [r4, #12]
 80013e4:	f043 0308 	orr.w	r3, r3, #8
 80013e8:	81a3      	strh	r3, [r4, #12]
 80013ea:	6923      	ldr	r3, [r4, #16]
 80013ec:	b94b      	cbnz	r3, 8001402 <__swsetup_r+0x7a>
 80013ee:	89a3      	ldrh	r3, [r4, #12]
 80013f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013f8:	d003      	beq.n	8001402 <__swsetup_r+0x7a>
 80013fa:	4621      	mov	r1, r4
 80013fc:	4628      	mov	r0, r5
 80013fe:	f000 f84f 	bl	80014a0 <__smakebuf_r>
 8001402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001406:	f013 0201 	ands.w	r2, r3, #1
 800140a:	d00a      	beq.n	8001422 <__swsetup_r+0x9a>
 800140c:	2200      	movs	r2, #0
 800140e:	60a2      	str	r2, [r4, #8]
 8001410:	6962      	ldr	r2, [r4, #20]
 8001412:	4252      	negs	r2, r2
 8001414:	61a2      	str	r2, [r4, #24]
 8001416:	6922      	ldr	r2, [r4, #16]
 8001418:	b942      	cbnz	r2, 800142c <__swsetup_r+0xa4>
 800141a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800141e:	d1c5      	bne.n	80013ac <__swsetup_r+0x24>
 8001420:	bd38      	pop	{r3, r4, r5, pc}
 8001422:	0799      	lsls	r1, r3, #30
 8001424:	bf58      	it	pl
 8001426:	6962      	ldrpl	r2, [r4, #20]
 8001428:	60a2      	str	r2, [r4, #8]
 800142a:	e7f4      	b.n	8001416 <__swsetup_r+0x8e>
 800142c:	2000      	movs	r0, #0
 800142e:	e7f7      	b.n	8001420 <__swsetup_r+0x98>
 8001430:	2000000c 	.word	0x2000000c

08001434 <_sbrk_r>:
 8001434:	b538      	push	{r3, r4, r5, lr}
 8001436:	4d06      	ldr	r5, [pc, #24]	@ (8001450 <_sbrk_r+0x1c>)
 8001438:	2300      	movs	r3, #0
 800143a:	4604      	mov	r4, r0
 800143c:	4608      	mov	r0, r1
 800143e:	602b      	str	r3, [r5, #0]
 8001440:	f7fe ffb0 	bl	80003a4 <_sbrk>
 8001444:	1c43      	adds	r3, r0, #1
 8001446:	d102      	bne.n	800144e <_sbrk_r+0x1a>
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	b103      	cbz	r3, 800144e <_sbrk_r+0x1a>
 800144c:	6023      	str	r3, [r4, #0]
 800144e:	bd38      	pop	{r3, r4, r5, pc}
 8001450:	200001b8 	.word	0x200001b8

08001454 <__swhatbuf_r>:
 8001454:	b570      	push	{r4, r5, r6, lr}
 8001456:	460c      	mov	r4, r1
 8001458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800145c:	2900      	cmp	r1, #0
 800145e:	b096      	sub	sp, #88	@ 0x58
 8001460:	4615      	mov	r5, r2
 8001462:	461e      	mov	r6, r3
 8001464:	da0d      	bge.n	8001482 <__swhatbuf_r+0x2e>
 8001466:	89a3      	ldrh	r3, [r4, #12]
 8001468:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800146c:	f04f 0100 	mov.w	r1, #0
 8001470:	bf14      	ite	ne
 8001472:	2340      	movne	r3, #64	@ 0x40
 8001474:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001478:	2000      	movs	r0, #0
 800147a:	6031      	str	r1, [r6, #0]
 800147c:	602b      	str	r3, [r5, #0]
 800147e:	b016      	add	sp, #88	@ 0x58
 8001480:	bd70      	pop	{r4, r5, r6, pc}
 8001482:	466a      	mov	r2, sp
 8001484:	f000 f848 	bl	8001518 <_fstat_r>
 8001488:	2800      	cmp	r0, #0
 800148a:	dbec      	blt.n	8001466 <__swhatbuf_r+0x12>
 800148c:	9901      	ldr	r1, [sp, #4]
 800148e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001492:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001496:	4259      	negs	r1, r3
 8001498:	4159      	adcs	r1, r3
 800149a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800149e:	e7eb      	b.n	8001478 <__swhatbuf_r+0x24>

080014a0 <__smakebuf_r>:
 80014a0:	898b      	ldrh	r3, [r1, #12]
 80014a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014a4:	079d      	lsls	r5, r3, #30
 80014a6:	4606      	mov	r6, r0
 80014a8:	460c      	mov	r4, r1
 80014aa:	d507      	bpl.n	80014bc <__smakebuf_r+0x1c>
 80014ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80014b0:	6023      	str	r3, [r4, #0]
 80014b2:	6123      	str	r3, [r4, #16]
 80014b4:	2301      	movs	r3, #1
 80014b6:	6163      	str	r3, [r4, #20]
 80014b8:	b003      	add	sp, #12
 80014ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014bc:	ab01      	add	r3, sp, #4
 80014be:	466a      	mov	r2, sp
 80014c0:	f7ff ffc8 	bl	8001454 <__swhatbuf_r>
 80014c4:	9f00      	ldr	r7, [sp, #0]
 80014c6:	4605      	mov	r5, r0
 80014c8:	4639      	mov	r1, r7
 80014ca:	4630      	mov	r0, r6
 80014cc:	f7ff fb16 	bl	8000afc <_malloc_r>
 80014d0:	b948      	cbnz	r0, 80014e6 <__smakebuf_r+0x46>
 80014d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014d6:	059a      	lsls	r2, r3, #22
 80014d8:	d4ee      	bmi.n	80014b8 <__smakebuf_r+0x18>
 80014da:	f023 0303 	bic.w	r3, r3, #3
 80014de:	f043 0302 	orr.w	r3, r3, #2
 80014e2:	81a3      	strh	r3, [r4, #12]
 80014e4:	e7e2      	b.n	80014ac <__smakebuf_r+0xc>
 80014e6:	89a3      	ldrh	r3, [r4, #12]
 80014e8:	6020      	str	r0, [r4, #0]
 80014ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014ee:	81a3      	strh	r3, [r4, #12]
 80014f0:	9b01      	ldr	r3, [sp, #4]
 80014f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014f6:	b15b      	cbz	r3, 8001510 <__smakebuf_r+0x70>
 80014f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014fc:	4630      	mov	r0, r6
 80014fe:	f000 f81d 	bl	800153c <_isatty_r>
 8001502:	b128      	cbz	r0, 8001510 <__smakebuf_r+0x70>
 8001504:	89a3      	ldrh	r3, [r4, #12]
 8001506:	f023 0303 	bic.w	r3, r3, #3
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	81a3      	strh	r3, [r4, #12]
 8001510:	89a3      	ldrh	r3, [r4, #12]
 8001512:	431d      	orrs	r5, r3
 8001514:	81a5      	strh	r5, [r4, #12]
 8001516:	e7cf      	b.n	80014b8 <__smakebuf_r+0x18>

08001518 <_fstat_r>:
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	4d07      	ldr	r5, [pc, #28]	@ (8001538 <_fstat_r+0x20>)
 800151c:	2300      	movs	r3, #0
 800151e:	4604      	mov	r4, r0
 8001520:	4608      	mov	r0, r1
 8001522:	4611      	mov	r1, r2
 8001524:	602b      	str	r3, [r5, #0]
 8001526:	f7fe ff14 	bl	8000352 <_fstat>
 800152a:	1c43      	adds	r3, r0, #1
 800152c:	d102      	bne.n	8001534 <_fstat_r+0x1c>
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	b103      	cbz	r3, 8001534 <_fstat_r+0x1c>
 8001532:	6023      	str	r3, [r4, #0]
 8001534:	bd38      	pop	{r3, r4, r5, pc}
 8001536:	bf00      	nop
 8001538:	200001b8 	.word	0x200001b8

0800153c <_isatty_r>:
 800153c:	b538      	push	{r3, r4, r5, lr}
 800153e:	4d06      	ldr	r5, [pc, #24]	@ (8001558 <_isatty_r+0x1c>)
 8001540:	2300      	movs	r3, #0
 8001542:	4604      	mov	r4, r0
 8001544:	4608      	mov	r0, r1
 8001546:	602b      	str	r3, [r5, #0]
 8001548:	f7fe ff13 	bl	8000372 <_isatty>
 800154c:	1c43      	adds	r3, r0, #1
 800154e:	d102      	bne.n	8001556 <_isatty_r+0x1a>
 8001550:	682b      	ldr	r3, [r5, #0]
 8001552:	b103      	cbz	r3, 8001556 <_isatty_r+0x1a>
 8001554:	6023      	str	r3, [r4, #0]
 8001556:	bd38      	pop	{r3, r4, r5, pc}
 8001558:	200001b8 	.word	0x200001b8

0800155c <_init>:
 800155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155e:	bf00      	nop
 8001560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001562:	bc08      	pop	{r3}
 8001564:	469e      	mov	lr, r3
 8001566:	4770      	bx	lr

08001568 <_fini>:
 8001568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800156a:	bf00      	nop
 800156c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800156e:	bc08      	pop	{r3}
 8001570:	469e      	mov	lr, r3
 8001572:	4770      	bx	lr

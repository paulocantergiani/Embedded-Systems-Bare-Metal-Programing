
21_UART_TX_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000038c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000524  08000524  00001524  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000548  08000548  00001550  2**0
                  CONTENTS
  4 .ARM          00000000  08000548  08000548  00001550  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000548  08000550  00001550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000548  08000548  00001548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800054c  0800054c  0000154c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001550  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000550  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000550  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001550  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000cfe  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003cb  00000000  00000000  0000227e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000c0  00000000  00000000  00002650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000085  00000000  00000000  00002710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e99b  00000000  00000000  00002795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000103c  00000000  00000000  00011130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005370d  00000000  00000000  0001216c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00065879  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000204  00000000  00000000  000658bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  00065ac0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800050c 	.word	0x0800050c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	0800050c 	.word	0x0800050c

080001d8 <main>:
char key;

static void dma_callback(void);

int main(void)
{
 80001d8:	b5b0      	push	{r4, r5, r7, lr}
 80001da:	b08a      	sub	sp, #40	@ 0x28
 80001dc:	af00      	add	r7, sp, #0
	char message[35] = "Hello from STM32 DMA transfer!\r\n";
 80001de:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <main+0x58>)
 80001e0:	1d3c      	adds	r4, r7, #4
 80001e2:	461d      	mov	r5, r3
 80001e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001ec:	682b      	ldr	r3, [r5, #0]
 80001ee:	7023      	strb	r3, [r4, #0]
 80001f0:	f107 0325 	add.w	r3, r7, #37	@ 0x25
 80001f4:	2200      	movs	r2, #0
 80001f6:	801a      	strh	r2, [r3, #0]

    RCC->AHB1ENR |= GPIOA_EN;
 80001f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000234 <main+0x5c>)
 80001fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000234 <main+0x5c>)
 80001fe:	f043 0301 	orr.w	r3, r3, #1
 8000202:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOA->MODER |= (1 << 10);
 8000204:	4b0c      	ldr	r3, [pc, #48]	@ (8000238 <main+0x60>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a0b      	ldr	r2, [pc, #44]	@ (8000238 <main+0x60>)
 800020a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800020e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1 << 11);
 8000210:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <main+0x60>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	4a08      	ldr	r2, [pc, #32]	@ (8000238 <main+0x60>)
 8000216:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800021a:	6013      	str	r3, [r2, #0]

    uart2_tx_init();
 800021c:	f000 f8c2 	bl	80003a4 <uart2_tx_init>
    dma1_stream6_init((uint32_t) message, (uint32_t)&USART2->DR, (uint32_t) 35);
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	2223      	movs	r2, #35	@ 0x23
 8000224:	4905      	ldr	r1, [pc, #20]	@ (800023c <main+0x64>)
 8000226:	4618      	mov	r0, r3
 8000228:	f000 f84c 	bl	80002c4 <dma1_stream6_init>

    while (1)
 800022c:	bf00      	nop
 800022e:	e7fd      	b.n	800022c <main+0x54>
 8000230:	08000524 	.word	0x08000524
 8000234:	40023800 	.word	0x40023800
 8000238:	40020000 	.word	0x40020000
 800023c:	40004404 	.word	0x40004404

08000240 <dma_callback>:
    {
    }
}

static void dma_callback(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
	GPIOA->ODR |= PIN_5;
 8000244:	4b05      	ldr	r3, [pc, #20]	@ (800025c <dma_callback+0x1c>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	4a04      	ldr	r2, [pc, #16]	@ (800025c <dma_callback+0x1c>)
 800024a:	f043 0320 	orr.w	r3, r3, #32
 800024e:	6153      	str	r3, [r2, #20]
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40020000 	.word	0x40020000

08000260 <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
	/*Check for transfer complete interrupt*/
	if(DMA1->HISR & HISR_TCIF6)
 8000264:	4b07      	ldr	r3, [pc, #28]	@ (8000284 <DMA1_Stream6_IRQHandler+0x24>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800026c:	2b00      	cmp	r3, #0
 800026e:	d007      	beq.n	8000280 <DMA1_Stream6_IRQHandler+0x20>
	{
		/*Clear flag*/
		DMA1->HIFCR |= HIFCR_CTCIF6;
 8000270:	4b04      	ldr	r3, [pc, #16]	@ (8000284 <DMA1_Stream6_IRQHandler+0x24>)
 8000272:	68db      	ldr	r3, [r3, #12]
 8000274:	4a03      	ldr	r2, [pc, #12]	@ (8000284 <DMA1_Stream6_IRQHandler+0x24>)
 8000276:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800027a:	60d3      	str	r3, [r2, #12]

		dma_callback();
 800027c:	f7ff ffe0 	bl	8000240 <dma_callback>
	}
}
 8000280:	bf00      	nop
 8000282:	bd80      	pop	{r7, pc}
 8000284:	40026000 	.word	0x40026000

08000288 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000288:	b480      	push	{r7}
 800028a:	b083      	sub	sp, #12
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000296:	2b00      	cmp	r3, #0
 8000298:	db0b      	blt.n	80002b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800029a:	79fb      	ldrb	r3, [r7, #7]
 800029c:	f003 021f 	and.w	r2, r3, #31
 80002a0:	4907      	ldr	r1, [pc, #28]	@ (80002c0 <__NVIC_EnableIRQ+0x38>)
 80002a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002a6:	095b      	lsrs	r3, r3, #5
 80002a8:	2001      	movs	r0, #1
 80002aa:	fa00 f202 	lsl.w	r2, r0, r2
 80002ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002b2:	bf00      	nop
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop
 80002c0:	e000e100 	.word	0xe000e100

080002c4 <dma1_stream6_init>:
    uart2_write(ch);
    return ch;
}

void dma1_stream6_init(uint32_t src, uint32_t dst, uint32_t len)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b084      	sub	sp, #16
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
	/*Enable clock access to DMA*/
	RCC->AHB1ENR |= DMA1_EN;
 80002d0:	4b30      	ldr	r3, [pc, #192]	@ (8000394 <dma1_stream6_init+0xd0>)
 80002d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002d4:	4a2f      	ldr	r2, [pc, #188]	@ (8000394 <dma1_stream6_init+0xd0>)
 80002d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80002da:	6313      	str	r3, [r2, #48]	@ 0x30
	/*Disable DMA1 Stream 6*/
	DMA1_Stream6->CR &= ~DMA_CR_EN;
 80002dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000398 <dma1_stream6_init+0xd4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a2d      	ldr	r2, [pc, #180]	@ (8000398 <dma1_stream6_init+0xd4>)
 80002e2:	f023 0301 	bic.w	r3, r3, #1
 80002e6:	6013      	str	r3, [r2, #0]
	/*Clear all interrupt flags of Stream 6*/
	DMA1->HIFCR |= (1 << 16);
 80002e8:	4b2c      	ldr	r3, [pc, #176]	@ (800039c <dma1_stream6_init+0xd8>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	4a2b      	ldr	r2, [pc, #172]	@ (800039c <dma1_stream6_init+0xd8>)
 80002ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80002f2:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1 << 18);
 80002f4:	4b29      	ldr	r3, [pc, #164]	@ (800039c <dma1_stream6_init+0xd8>)
 80002f6:	68db      	ldr	r3, [r3, #12]
 80002f8:	4a28      	ldr	r2, [pc, #160]	@ (800039c <dma1_stream6_init+0xd8>)
 80002fa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80002fe:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1 << 19);
 8000300:	4b26      	ldr	r3, [pc, #152]	@ (800039c <dma1_stream6_init+0xd8>)
 8000302:	68db      	ldr	r3, [r3, #12]
 8000304:	4a25      	ldr	r2, [pc, #148]	@ (800039c <dma1_stream6_init+0xd8>)
 8000306:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800030a:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1 << 20);
 800030c:	4b23      	ldr	r3, [pc, #140]	@ (800039c <dma1_stream6_init+0xd8>)
 800030e:	68db      	ldr	r3, [r3, #12]
 8000310:	4a22      	ldr	r2, [pc, #136]	@ (800039c <dma1_stream6_init+0xd8>)
 8000312:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000316:	60d3      	str	r3, [r2, #12]
	DMA1->HIFCR |= (1 << 21);
 8000318:	4b20      	ldr	r3, [pc, #128]	@ (800039c <dma1_stream6_init+0xd8>)
 800031a:	68db      	ldr	r3, [r3, #12]
 800031c:	4a1f      	ldr	r2, [pc, #124]	@ (800039c <dma1_stream6_init+0xd8>)
 800031e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000322:	60d3      	str	r3, [r2, #12]
	/*Set the destination buffer*/
	DMA1_Stream6->PAR = dst;
 8000324:	4a1c      	ldr	r2, [pc, #112]	@ (8000398 <dma1_stream6_init+0xd4>)
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	6093      	str	r3, [r2, #8]
	/*Set the source buffer*/
	DMA1_Stream6->M0AR = src;
 800032a:	4a1b      	ldr	r2, [pc, #108]	@ (8000398 <dma1_stream6_init+0xd4>)
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	60d3      	str	r3, [r2, #12]
	/*Set length*/
	DMA1_Stream6->NDTR = len;
 8000330:	4a19      	ldr	r2, [pc, #100]	@ (8000398 <dma1_stream6_init+0xd4>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	6053      	str	r3, [r2, #4]
	/*Select Stream 6 CH4*/
	DMA1_Stream6->CR |= CHSEL4;
 8000336:	4b18      	ldr	r3, [pc, #96]	@ (8000398 <dma1_stream6_init+0xd4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	4a17      	ldr	r2, [pc, #92]	@ (8000398 <dma1_stream6_init+0xd4>)
 800033c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000340:	6013      	str	r3, [r2, #0]
	/*Enable memory increment*/
	DMA1_Stream6->CR |= DMA_MEM_INC;
 8000342:	4b15      	ldr	r3, [pc, #84]	@ (8000398 <dma1_stream6_init+0xd4>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a14      	ldr	r2, [pc, #80]	@ (8000398 <dma1_stream6_init+0xd4>)
 8000348:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800034c:	6013      	str	r3, [r2, #0]
	/*Configure transfer direction*/
	DMA1_Stream6->CR |= DMA_DIR_MEM_TO_PERIPH;
 800034e:	4b12      	ldr	r3, [pc, #72]	@ (8000398 <dma1_stream6_init+0xd4>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a11      	ldr	r2, [pc, #68]	@ (8000398 <dma1_stream6_init+0xd4>)
 8000354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000358:	6013      	str	r3, [r2, #0]
	/*Enable DMA transfer complete interrupt*/
	DMA1_Stream6->CR |= SxCR_TCIE;
 800035a:	4b0f      	ldr	r3, [pc, #60]	@ (8000398 <dma1_stream6_init+0xd4>)
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	4a0e      	ldr	r2, [pc, #56]	@ (8000398 <dma1_stream6_init+0xd4>)
 8000360:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000364:	6013      	str	r3, [r2, #0]
	/*Enable direct mode and disable FIFO*/
	DMA1_Stream6->FCR = 0;
 8000366:	4b0c      	ldr	r3, [pc, #48]	@ (8000398 <dma1_stream6_init+0xd4>)
 8000368:	2200      	movs	r2, #0
 800036a:	615a      	str	r2, [r3, #20]
	/*Enable DMA1 Stream 6*/
	DMA1_Stream6->CR |= DMA_CR_EN;
 800036c:	4b0a      	ldr	r3, [pc, #40]	@ (8000398 <dma1_stream6_init+0xd4>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a09      	ldr	r2, [pc, #36]	@ (8000398 <dma1_stream6_init+0xd4>)
 8000372:	f043 0301 	orr.w	r3, r3, #1
 8000376:	6013      	str	r3, [r2, #0]
	/*Enable UART2 transmitter MDA*/
	USART2->CR3 |= UART_CR3_DMAT;
 8000378:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <dma1_stream6_init+0xdc>)
 800037a:	695b      	ldr	r3, [r3, #20]
 800037c:	4a08      	ldr	r2, [pc, #32]	@ (80003a0 <dma1_stream6_init+0xdc>)
 800037e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000382:	6153      	str	r3, [r2, #20]
	/*DMA interrupt enable in NVIC*/
	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000384:	2011      	movs	r0, #17
 8000386:	f7ff ff7f 	bl	8000288 <__NVIC_EnableIRQ>
}
 800038a:	bf00      	nop
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	40023800 	.word	0x40023800
 8000398:	400260a0 	.word	0x400260a0
 800039c:	40026000 	.word	0x40026000
 80003a0:	40004400 	.word	0x40004400

080003a4 <uart2_tx_init>:

void uart2_tx_init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA
    RCC->AHB1ENR |= GPIOA_EN;
 80003a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000414 <uart2_tx_init+0x70>)
 80003aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ac:	4a19      	ldr	r2, [pc, #100]	@ (8000414 <uart2_tx_init+0x70>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	6313      	str	r3, [r2, #48]	@ 0x30

    // Set PA2 to alternate function mode
    GPIOA->MODER &= ~(1 << 4); // Clear bit 4
 80003b4:	4b18      	ldr	r3, [pc, #96]	@ (8000418 <uart2_tx_init+0x74>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4a17      	ldr	r2, [pc, #92]	@ (8000418 <uart2_tx_init+0x74>)
 80003ba:	f023 0310 	bic.w	r3, r3, #16
 80003be:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << 5);  // Set bit 5
 80003c0:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <uart2_tx_init+0x74>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a14      	ldr	r2, [pc, #80]	@ (8000418 <uart2_tx_init+0x74>)
 80003c6:	f043 0320 	orr.w	r3, r3, #32
 80003ca:	6013      	str	r3, [r2, #0]

    // Set PA2 to AF7 (USART2_TX)
    GPIOA->AFR[0] |= (1 << 8) | (1 << 9) | (1 << 10);
 80003cc:	4b12      	ldr	r3, [pc, #72]	@ (8000418 <uart2_tx_init+0x74>)
 80003ce:	6a1b      	ldr	r3, [r3, #32]
 80003d0:	4a11      	ldr	r2, [pc, #68]	@ (8000418 <uart2_tx_init+0x74>)
 80003d2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80003d6:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1 << 11);
 80003d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000418 <uart2_tx_init+0x74>)
 80003da:	6a1b      	ldr	r3, [r3, #32]
 80003dc:	4a0e      	ldr	r2, [pc, #56]	@ (8000418 <uart2_tx_init+0x74>)
 80003de:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80003e2:	6213      	str	r3, [r2, #32]

    // Enable clock for USART2
    RCC->APB1ENR |= USART2_EN;
 80003e4:	4b0b      	ldr	r3, [pc, #44]	@ (8000414 <uart2_tx_init+0x70>)
 80003e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003e8:	4a0a      	ldr	r2, [pc, #40]	@ (8000414 <uart2_tx_init+0x70>)
 80003ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003ee:	6413      	str	r3, [r2, #64]	@ 0x40

    // Set baud rate
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80003f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003f4:	4909      	ldr	r1, [pc, #36]	@ (800041c <uart2_tx_init+0x78>)
 80003f6:	480a      	ldr	r0, [pc, #40]	@ (8000420 <uart2_tx_init+0x7c>)
 80003f8:	f000 f814 	bl	8000424 <uart_set_baudrate>

    // Enable USART2 transmitter
    USART2->CR1 = CR1_TE;
 80003fc:	4b08      	ldr	r3, [pc, #32]	@ (8000420 <uart2_tx_init+0x7c>)
 80003fe:	2208      	movs	r2, #8
 8000400:	60da      	str	r2, [r3, #12]

    // Enable USART2
    USART2->CR1 |= CR1_UE;
 8000402:	4b07      	ldr	r3, [pc, #28]	@ (8000420 <uart2_tx_init+0x7c>)
 8000404:	68db      	ldr	r3, [r3, #12]
 8000406:	4a06      	ldr	r2, [pc, #24]	@ (8000420 <uart2_tx_init+0x7c>)
 8000408:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800040c:	60d3      	str	r3, [r2, #12]
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40023800 	.word	0x40023800
 8000418:	40020000 	.word	0x40020000
 800041c:	00f42400 	.word	0x00f42400
 8000420:	40004400 	.word	0x40004400

08000424 <uart_set_baudrate>:
    /*Enable UART module*/
    USART2->CR1 |= CR1_UE;
}

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b084      	sub	sp, #16
 8000428:	af00      	add	r7, sp, #0
 800042a:	60f8      	str	r0, [r7, #12]
 800042c:	60b9      	str	r1, [r7, #8]
 800042e:	607a      	str	r2, [r7, #4]
    USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000430:	6879      	ldr	r1, [r7, #4]
 8000432:	68b8      	ldr	r0, [r7, #8]
 8000434:	f000 f808 	bl	8000448 <compute_uart_bd>
 8000438:	4603      	mov	r3, r0
 800043a:	461a      	mov	r2, r3
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	609a      	str	r2, [r3, #8]
}
 8000440:	bf00      	nop
 8000442:	3710      	adds	r7, #16
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}

08000448 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	6039      	str	r1, [r7, #0]
    return (PeriphClk + BaudRate / (2U)) / BaudRate;
 8000452:	683b      	ldr	r3, [r7, #0]
 8000454:	085a      	lsrs	r2, r3, #1
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	441a      	add	r2, r3
 800045a:	683b      	ldr	r3, [r7, #0]
 800045c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000460:	b29b      	uxth	r3, r3
}
 8000462:	4618      	mov	r0, r3
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
	...

08000470 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000470:	480d      	ldr	r0, [pc, #52]	@ (80004a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000472:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000474:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000478:	480c      	ldr	r0, [pc, #48]	@ (80004ac <LoopForever+0x6>)
  ldr r1, =_edata
 800047a:	490d      	ldr	r1, [pc, #52]	@ (80004b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800047c:	4a0d      	ldr	r2, [pc, #52]	@ (80004b4 <LoopForever+0xe>)
  movs r3, #0
 800047e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000480:	e002      	b.n	8000488 <LoopCopyDataInit>

08000482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000486:	3304      	adds	r3, #4

08000488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800048a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800048c:	d3f9      	bcc.n	8000482 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800048e:	4a0a      	ldr	r2, [pc, #40]	@ (80004b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000490:	4c0a      	ldr	r4, [pc, #40]	@ (80004bc <LoopForever+0x16>)
  movs r3, #0
 8000492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000494:	e001      	b.n	800049a <LoopFillZerobss>

08000496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000498:	3204      	adds	r2, #4

0800049a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800049a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800049c:	d3fb      	bcc.n	8000496 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800049e:	f000 f811 	bl	80004c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004a2:	f7ff fe99 	bl	80001d8 <main>

080004a6 <LoopForever>:

LoopForever:
  b LoopForever
 80004a6:	e7fe      	b.n	80004a6 <LoopForever>
  ldr   r0, =_estack
 80004a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80004b4:	08000550 	.word	0x08000550
  ldr r2, =_sbss
 80004b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004bc:	2000001c 	.word	0x2000001c

080004c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004c0:	e7fe      	b.n	80004c0 <ADC_IRQHandler>
	...

080004c4 <__libc_init_array>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	4d0d      	ldr	r5, [pc, #52]	@ (80004fc <__libc_init_array+0x38>)
 80004c8:	4c0d      	ldr	r4, [pc, #52]	@ (8000500 <__libc_init_array+0x3c>)
 80004ca:	1b64      	subs	r4, r4, r5
 80004cc:	10a4      	asrs	r4, r4, #2
 80004ce:	2600      	movs	r6, #0
 80004d0:	42a6      	cmp	r6, r4
 80004d2:	d109      	bne.n	80004e8 <__libc_init_array+0x24>
 80004d4:	4d0b      	ldr	r5, [pc, #44]	@ (8000504 <__libc_init_array+0x40>)
 80004d6:	4c0c      	ldr	r4, [pc, #48]	@ (8000508 <__libc_init_array+0x44>)
 80004d8:	f000 f818 	bl	800050c <_init>
 80004dc:	1b64      	subs	r4, r4, r5
 80004de:	10a4      	asrs	r4, r4, #2
 80004e0:	2600      	movs	r6, #0
 80004e2:	42a6      	cmp	r6, r4
 80004e4:	d105      	bne.n	80004f2 <__libc_init_array+0x2e>
 80004e6:	bd70      	pop	{r4, r5, r6, pc}
 80004e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80004ec:	4798      	blx	r3
 80004ee:	3601      	adds	r6, #1
 80004f0:	e7ee      	b.n	80004d0 <__libc_init_array+0xc>
 80004f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f6:	4798      	blx	r3
 80004f8:	3601      	adds	r6, #1
 80004fa:	e7f2      	b.n	80004e2 <__libc_init_array+0x1e>
 80004fc:	08000548 	.word	0x08000548
 8000500:	08000548 	.word	0x08000548
 8000504:	08000548 	.word	0x08000548
 8000508:	0800054c 	.word	0x0800054c

0800050c <_init>:
 800050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800050e:	bf00      	nop
 8000510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000512:	bc08      	pop	{r3}
 8000514:	469e      	mov	lr, r3
 8000516:	4770      	bx	lr

08000518 <_fini>:
 8000518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051a:	bf00      	nop
 800051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051e:	bc08      	pop	{r3}
 8000520:	469e      	mov	lr, r3
 8000522:	4770      	bx	lr

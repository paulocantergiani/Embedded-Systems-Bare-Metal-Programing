
18_ADC_Interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013a4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001544  08001544  00002544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800158c  0800158c  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  0800158c  0800158c  0000258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001594  08001594  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001594  08001594  00002594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001598  08001598  00002598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  0800159c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080015f8  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080015f8  000031cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001628  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006c1  00000000  00000000  000046b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00004d78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000128  00000000  00000000  00004f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000fcd3  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002335  00000000  00000000  00014d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005584d  00000000  00000000  00017058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0006c8a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ccc  00000000  00000000  0006c8e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0006d5b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800152c 	.word	0x0800152c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	0800152c 	.word	0x0800152c

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	4603      	mov	r3, r0
 8000288:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	2b00      	cmp	r3, #0
 8000290:	db0b      	blt.n	80002aa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000292:	79fb      	ldrb	r3, [r7, #7]
 8000294:	f003 021f 	and.w	r2, r3, #31
 8000298:	4907      	ldr	r1, [pc, #28]	@ (80002b8 <__NVIC_EnableIRQ+0x38>)
 800029a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800029e:	095b      	lsrs	r3, r3, #5
 80002a0:	2001      	movs	r0, #1
 80002a2:	fa00 f202 	lsl.w	r2, r0, r2
 80002a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80002aa:	bf00      	nop
 80002ac:	370c      	adds	r7, #12
 80002ae:	46bd      	mov	sp, r7
 80002b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b4:	4770      	bx	lr
 80002b6:	bf00      	nop
 80002b8:	e000e100 	.word	0xe000e100

080002bc <pa1_adc_interrupt_init>:
#define CR2_SWSTART (1 << 30)
#define CR2_CONT (1 << 1)
#define CR1_EOCIE (1 << 5)

void pa1_adc_interrupt_init(void)
{
 80002bc:	b580      	push	{r7, lr}
 80002be:	af00      	add	r7, sp, #0
    /*CONFIGURE ADC GPIO PIN(PA1)*/
    /*Enable clock access to GPIOA*/
    RCC->AHB1ENR |= GPIOA_EN;
 80002c0:	4b17      	ldr	r3, [pc, #92]	@ (8000320 <pa1_adc_interrupt_init+0x64>)
 80002c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002c4:	4a16      	ldr	r2, [pc, #88]	@ (8000320 <pa1_adc_interrupt_init+0x64>)
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	6313      	str	r3, [r2, #48]	@ 0x30
    /*Set the mode of PA1 to analog*/
    GPIOA->MODER |= (1 << 2);
 80002cc:	4b15      	ldr	r3, [pc, #84]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a14      	ldr	r2, [pc, #80]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 80002d2:	f043 0304 	orr.w	r3, r3, #4
 80002d6:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (1 << 3);
 80002d8:	4b12      	ldr	r3, [pc, #72]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	4a11      	ldr	r2, [pc, #68]	@ (8000324 <pa1_adc_interrupt_init+0x68>)
 80002de:	f043 0308 	orr.w	r3, r3, #8
 80002e2:	6013      	str	r3, [r2, #0]

    /*CONFIGURE THE ADC MODULE*/
    /*Enable clock access to ADC*/
    RCC->APB2ENR |= APB2_EN;
 80002e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000320 <pa1_adc_interrupt_init+0x64>)
 80002e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80002e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000320 <pa1_adc_interrupt_init+0x64>)
 80002ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002ee:	6453      	str	r3, [r2, #68]	@ 0x44
    /*ADC end-of-conversion interrupt*/
    ADC1->CR1 |= CR1_EOCIE;
 80002f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000328 <pa1_adc_interrupt_init+0x6c>)
 80002f2:	685b      	ldr	r3, [r3, #4]
 80002f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000328 <pa1_adc_interrupt_init+0x6c>)
 80002f6:	f043 0320 	orr.w	r3, r3, #32
 80002fa:	6053      	str	r3, [r2, #4]
    /*Enable ADC interrupt in NVIC*/
    NVIC_EnableIRQ(ADC_IRQn);
 80002fc:	2012      	movs	r0, #18
 80002fe:	f7ff ffbf 	bl	8000280 <__NVIC_EnableIRQ>
    /*Conversion sequence start*/
    ADC1->SQR3 = ADC_CH1;
 8000302:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <pa1_adc_interrupt_init+0x6c>)
 8000304:	2201      	movs	r2, #1
 8000306:	635a      	str	r2, [r3, #52]	@ 0x34
    /*Conversion sequence length*/
    ADC1->SQR1 = ADC_SEQ_LEN_1;
 8000308:	4b07      	ldr	r3, [pc, #28]	@ (8000328 <pa1_adc_interrupt_init+0x6c>)
 800030a:	2200      	movs	r2, #0
 800030c:	62da      	str	r2, [r3, #44]	@ 0x2c
    /*Enable ADC module*/
    ADC1->CR2 |= CR2_ADON;
 800030e:	4b06      	ldr	r3, [pc, #24]	@ (8000328 <pa1_adc_interrupt_init+0x6c>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	4a05      	ldr	r2, [pc, #20]	@ (8000328 <pa1_adc_interrupt_init+0x6c>)
 8000314:	f043 0301 	orr.w	r3, r3, #1
 8000318:	6093      	str	r3, [r2, #8]
}
 800031a:	bf00      	nop
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800
 8000324:	40020000 	.word	0x40020000
 8000328:	40012000 	.word	0x40012000

0800032c <start_conversion>:
    /*Enable ADC module*/
    ADC1->CR2 |= CR2_ADON;
}

void start_conversion(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
    /*Enable continuous conversion*/
    ADC1->CR2 |= CR2_CONT;
 8000330:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <start_conversion+0x28>)
 8000332:	689b      	ldr	r3, [r3, #8]
 8000334:	4a07      	ldr	r2, [pc, #28]	@ (8000354 <start_conversion+0x28>)
 8000336:	f043 0302 	orr.w	r3, r3, #2
 800033a:	6093      	str	r3, [r2, #8]
    /*Start ADC conversion*/
    ADC1->CR2 |= CR2_SWSTART;
 800033c:	4b05      	ldr	r3, [pc, #20]	@ (8000354 <start_conversion+0x28>)
 800033e:	689b      	ldr	r3, [r3, #8]
 8000340:	4a04      	ldr	r2, [pc, #16]	@ (8000354 <start_conversion+0x28>)
 8000342:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000346:	6093      	str	r3, [r2, #8]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40012000 	.word	0x40012000

08000358 <main>:
uint32_t sensor_value;

static void adc_callback(void);

int main(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
    uart2_rxtx_init();
 800035c:	f000 f8de 	bl	800051c <uart2_rxtx_init>
    pa1_adc_interrupt_init();
 8000360:	f7ff ffac 	bl	80002bc <pa1_adc_interrupt_init>
    start_conversion();
 8000364:	f7ff ffe2 	bl	800032c <start_conversion>

    while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <main+0x10>

0800036c <adc_callback>:
    {
    }
}

static void adc_callback(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
	sensor_value = ADC1->DR;
 8000370:	4b05      	ldr	r3, [pc, #20]	@ (8000388 <adc_callback+0x1c>)
 8000372:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000374:	4a05      	ldr	r2, [pc, #20]	@ (800038c <adc_callback+0x20>)
 8000376:	6013      	str	r3, [r2, #0]
	printf("Sensor Value: %ld\n\r", sensor_value);
 8000378:	4b04      	ldr	r3, [pc, #16]	@ (800038c <adc_callback+0x20>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	4619      	mov	r1, r3
 800037e:	4804      	ldr	r0, [pc, #16]	@ (8000390 <adc_callback+0x24>)
 8000380:	f000 fa66 	bl	8000850 <iprintf>
}
 8000384:	bf00      	nop
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40012000 	.word	0x40012000
 800038c:	20000078 	.word	0x20000078
 8000390:	08001544 	.word	0x08001544

08000394 <ADC_IRQHandler>:

void ADC_IRQHandler(void)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	af00      	add	r7, sp, #0
	/*Check for EOC in SR*/
	if(ADC1->SR & SR_EOC)
 8000398:	4b07      	ldr	r3, [pc, #28]	@ (80003b8 <ADC_IRQHandler+0x24>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f003 0302 	and.w	r3, r3, #2
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d007      	beq.n	80003b4 <ADC_IRQHandler+0x20>
	{
		/*Clear EOC*/
		ADC1->SR &= ~SR_EOC;
 80003a4:	4b04      	ldr	r3, [pc, #16]	@ (80003b8 <ADC_IRQHandler+0x24>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a03      	ldr	r2, [pc, #12]	@ (80003b8 <ADC_IRQHandler+0x24>)
 80003aa:	f023 0302 	bic.w	r3, r3, #2
 80003ae:	6013      	str	r3, [r2, #0]

		adc_callback();
 80003b0:	f7ff ffdc 	bl	800036c <adc_callback>
	}
}
 80003b4:	bf00      	nop
 80003b6:	bd80      	pop	{r7, pc}
 80003b8:	40012000 	.word	0x40012000

080003bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	60f8      	str	r0, [r7, #12]
 80003c4:	60b9      	str	r1, [r7, #8]
 80003c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c8:	2300      	movs	r3, #0
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	e00a      	b.n	80003e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80003ce:	f3af 8000 	nop.w
 80003d2:	4601      	mov	r1, r0
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	1c5a      	adds	r2, r3, #1
 80003d8:	60ba      	str	r2, [r7, #8]
 80003da:	b2ca      	uxtb	r2, r1
 80003dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003de:	697b      	ldr	r3, [r7, #20]
 80003e0:	3301      	adds	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
 80003e4:	697a      	ldr	r2, [r7, #20]
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	429a      	cmp	r2, r3
 80003ea:	dbf0      	blt.n	80003ce <_read+0x12>
  }

  return len;
 80003ec:	687b      	ldr	r3, [r7, #4]
}
 80003ee:	4618      	mov	r0, r3
 80003f0:	3718      	adds	r7, #24
 80003f2:	46bd      	mov	sp, r7
 80003f4:	bd80      	pop	{r7, pc}

080003f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b086      	sub	sp, #24
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	60f8      	str	r0, [r7, #12]
 80003fe:	60b9      	str	r1, [r7, #8]
 8000400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
 8000406:	e009      	b.n	800041c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000408:	68bb      	ldr	r3, [r7, #8]
 800040a:	1c5a      	adds	r2, r3, #1
 800040c:	60ba      	str	r2, [r7, #8]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	4618      	mov	r0, r3
 8000412:	f000 f877 	bl	8000504 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000416:	697b      	ldr	r3, [r7, #20]
 8000418:	3301      	adds	r3, #1
 800041a:	617b      	str	r3, [r7, #20]
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	687b      	ldr	r3, [r7, #4]
 8000420:	429a      	cmp	r2, r3
 8000422:	dbf1      	blt.n	8000408 <_write+0x12>
  }
  return len;
 8000424:	687b      	ldr	r3, [r7, #4]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3718      	adds	r7, #24
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}

0800042e <_close>:

int _close(int file)
{
 800042e:	b480      	push	{r7}
 8000430:	b083      	sub	sp, #12
 8000432:	af00      	add	r7, sp, #0
 8000434:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000436:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800043a:	4618      	mov	r0, r3
 800043c:	370c      	adds	r7, #12
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr

08000446 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000446:	b480      	push	{r7}
 8000448:	b083      	sub	sp, #12
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000456:	605a      	str	r2, [r3, #4]
  return 0;
 8000458:	2300      	movs	r3, #0
}
 800045a:	4618      	mov	r0, r3
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <_isatty>:

int _isatty(int file)
{
 8000466:	b480      	push	{r7}
 8000468:	b083      	sub	sp, #12
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800046e:	2301      	movs	r3, #1
}
 8000470:	4618      	mov	r0, r3
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047a:	4770      	bx	lr

0800047c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	60f8      	str	r0, [r7, #12]
 8000484:	60b9      	str	r1, [r7, #8]
 8000486:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000488:	2300      	movs	r3, #0
}
 800048a:	4618      	mov	r0, r3
 800048c:	3714      	adds	r7, #20
 800048e:	46bd      	mov	sp, r7
 8000490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000494:	4770      	bx	lr
	...

08000498 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000498:	b580      	push	{r7, lr}
 800049a:	b086      	sub	sp, #24
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004a0:	4a14      	ldr	r2, [pc, #80]	@ (80004f4 <_sbrk+0x5c>)
 80004a2:	4b15      	ldr	r3, [pc, #84]	@ (80004f8 <_sbrk+0x60>)
 80004a4:	1ad3      	subs	r3, r2, r3
 80004a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004a8:	697b      	ldr	r3, [r7, #20]
 80004aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004ac:	4b13      	ldr	r3, [pc, #76]	@ (80004fc <_sbrk+0x64>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d102      	bne.n	80004ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004b4:	4b11      	ldr	r3, [pc, #68]	@ (80004fc <_sbrk+0x64>)
 80004b6:	4a12      	ldr	r2, [pc, #72]	@ (8000500 <_sbrk+0x68>)
 80004b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004ba:	4b10      	ldr	r3, [pc, #64]	@ (80004fc <_sbrk+0x64>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	693a      	ldr	r2, [r7, #16]
 80004c4:	429a      	cmp	r2, r3
 80004c6:	d207      	bcs.n	80004d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004c8:	f000 fa66 	bl	8000998 <__errno>
 80004cc:	4603      	mov	r3, r0
 80004ce:	220c      	movs	r2, #12
 80004d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004d6:	e009      	b.n	80004ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004d8:	4b08      	ldr	r3, [pc, #32]	@ (80004fc <_sbrk+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004de:	4b07      	ldr	r3, [pc, #28]	@ (80004fc <_sbrk+0x64>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	4413      	add	r3, r2
 80004e6:	4a05      	ldr	r2, [pc, #20]	@ (80004fc <_sbrk+0x64>)
 80004e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004ea:	68fb      	ldr	r3, [r7, #12]
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	3718      	adds	r7, #24
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20020000 	.word	0x20020000
 80004f8:	00000400 	.word	0x00000400
 80004fc:	2000007c 	.word	0x2000007c
 8000500:	200001d0 	.word	0x200001d0

08000504 <__io_putchar>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);

int __io_putchar(int ch)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    uart2_write(ch);
 800050c:	6878      	ldr	r0, [r7, #4]
 800050e:	f000 f89b 	bl	8000648 <uart2_write>
    return ch;
 8000512:	687b      	ldr	r3, [r7, #4]
}
 8000514:	4618      	mov	r0, r3
 8000516:	3708      	adds	r7, #8
 8000518:	46bd      	mov	sp, r7
 800051a:	bd80      	pop	{r7, pc}

0800051c <uart2_rxtx_init>:
    // Enable USART2
    USART2->CR1 |= CR1_UE;
}

void uart2_rxtx_init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
    /*CONFIGURE UART TX GPIO PIN(PA2)*/
    /*Enable clock access to GPIOA*/
    RCC->AHB1ENR |= GPIOA_EN;
 8000520:	4b32      	ldr	r3, [pc, #200]	@ (80005ec <uart2_rxtx_init+0xd0>)
 8000522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000524:	4a31      	ldr	r2, [pc, #196]	@ (80005ec <uart2_rxtx_init+0xd0>)
 8000526:	f043 0301 	orr.w	r3, r3, #1
 800052a:	6313      	str	r3, [r2, #48]	@ 0x30

    /*Set PA2 mode to alternate function mode*/
    GPIOA->MODER |= (1 << 5);
 800052c:	4b30      	ldr	r3, [pc, #192]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a2f      	ldr	r2, [pc, #188]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 8000532:	f043 0320 	orr.w	r3, r3, #32
 8000536:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1 << 4);
 8000538:	4b2d      	ldr	r3, [pc, #180]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a2c      	ldr	r2, [pc, #176]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 800053e:	f023 0310 	bic.w	r3, r3, #16
 8000542:	6013      	str	r3, [r2, #0]

    /*Set PA2 alternate function type to UART2_TX (AF07)*/
    GPIOA->AFR[0] |= (1 << 8);
 8000544:	4b2a      	ldr	r3, [pc, #168]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 8000546:	6a1b      	ldr	r3, [r3, #32]
 8000548:	4a29      	ldr	r2, [pc, #164]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 800054a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800054e:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1 << 9);
 8000550:	4b27      	ldr	r3, [pc, #156]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 8000552:	6a1b      	ldr	r3, [r3, #32]
 8000554:	4a26      	ldr	r2, [pc, #152]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 8000556:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800055a:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1 << 10);
 800055c:	4b24      	ldr	r3, [pc, #144]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 800055e:	6a1b      	ldr	r3, [r3, #32]
 8000560:	4a23      	ldr	r2, [pc, #140]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 8000562:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000566:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1 << 11);
 8000568:	4b21      	ldr	r3, [pc, #132]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 800056a:	6a1b      	ldr	r3, [r3, #32]
 800056c:	4a20      	ldr	r2, [pc, #128]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 800056e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000572:	6213      	str	r3, [r2, #32]

    /*CONFIGURE UART RX GPIO PIN(PA3)*/
    /*Set PA3 mode to alternate function mode*/
    GPIOA->MODER |= (1 << 7);
 8000574:	4b1e      	ldr	r3, [pc, #120]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a1d      	ldr	r2, [pc, #116]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 800057a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800057e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER &= ~(1 << 6);
 8000580:	4b1b      	ldr	r3, [pc, #108]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a1a      	ldr	r2, [pc, #104]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 8000586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800058a:	6013      	str	r3, [r2, #0]

    /*Set PA3 alternate function type to UART2_RX (AF07)*/
    GPIOA->AFR[0] |= (1 << 12);
 800058c:	4b18      	ldr	r3, [pc, #96]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 800058e:	6a1b      	ldr	r3, [r3, #32]
 8000590:	4a17      	ldr	r2, [pc, #92]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 8000592:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000596:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1 << 13);
 8000598:	4b15      	ldr	r3, [pc, #84]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 800059a:	6a1b      	ldr	r3, [r3, #32]
 800059c:	4a14      	ldr	r2, [pc, #80]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 800059e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005a2:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] |= (1 << 14);
 80005a4:	4b12      	ldr	r3, [pc, #72]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 80005a6:	6a1b      	ldr	r3, [r3, #32]
 80005a8:	4a11      	ldr	r2, [pc, #68]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ae:	6213      	str	r3, [r2, #32]
    GPIOA->AFR[0] &= ~(1 << 15);
 80005b0:	4b0f      	ldr	r3, [pc, #60]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 80005b2:	6a1b      	ldr	r3, [r3, #32]
 80005b4:	4a0e      	ldr	r2, [pc, #56]	@ (80005f0 <uart2_rxtx_init+0xd4>)
 80005b6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80005ba:	6213      	str	r3, [r2, #32]

    /*CONFIGURE UART MODULE*/
    /*Enable clock access to UART2*/
    RCC->APB1ENR |= USART2_EN;
 80005bc:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <uart2_rxtx_init+0xd0>)
 80005be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c0:	4a0a      	ldr	r2, [pc, #40]	@ (80005ec <uart2_rxtx_init+0xd0>)
 80005c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80005c6:	6413      	str	r3, [r2, #64]	@ 0x40

    /*Configure boud rate*/
    uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 80005c8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80005cc:	4909      	ldr	r1, [pc, #36]	@ (80005f4 <uart2_rxtx_init+0xd8>)
 80005ce:	480a      	ldr	r0, [pc, #40]	@ (80005f8 <uart2_rxtx_init+0xdc>)
 80005d0:	f000 f814 	bl	80005fc <uart_set_baudrate>
    /*Configure the transfer direction*/
    USART2->CR1 = (CR1_TE | CR1_RE);
 80005d4:	4b08      	ldr	r3, [pc, #32]	@ (80005f8 <uart2_rxtx_init+0xdc>)
 80005d6:	220c      	movs	r2, #12
 80005d8:	60da      	str	r2, [r3, #12]
    /*Enable UART module*/
    USART2->CR1 |= CR1_UE;
 80005da:	4b07      	ldr	r3, [pc, #28]	@ (80005f8 <uart2_rxtx_init+0xdc>)
 80005dc:	68db      	ldr	r3, [r3, #12]
 80005de:	4a06      	ldr	r2, [pc, #24]	@ (80005f8 <uart2_rxtx_init+0xdc>)
 80005e0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80005e4:	60d3      	str	r3, [r2, #12]
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800
 80005f0:	40020000 	.word	0x40020000
 80005f4:	00f42400 	.word	0x00f42400
 80005f8:	40004400 	.word	0x40004400

080005fc <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	60f8      	str	r0, [r7, #12]
 8000604:	60b9      	str	r1, [r7, #8]
 8000606:	607a      	str	r2, [r7, #4]
    USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000608:	6879      	ldr	r1, [r7, #4]
 800060a:	68b8      	ldr	r0, [r7, #8]
 800060c:	f000 f808 	bl	8000620 <compute_uart_bd>
 8000610:	4603      	mov	r3, r0
 8000612:	461a      	mov	r2, r3
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	609a      	str	r2, [r3, #8]
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
    return (PeriphClk + BaudRate / (2U)) / BaudRate;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	085a      	lsrs	r2, r3, #1
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	441a      	add	r2, r3
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	fbb2 f3f3 	udiv	r3, r2, r3
 8000638:	b29b      	uxth	r3, r3
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
	...

08000648 <uart2_write>:

void uart2_write(int ch)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
    /*Make sure the transmit register is empty*/
    while (!(USART2->SR & SR_TXE))
 8000650:	bf00      	nop
 8000652:	4b08      	ldr	r3, [pc, #32]	@ (8000674 <uart2_write+0x2c>)
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800065a:	2b00      	cmp	r3, #0
 800065c:	d0f9      	beq.n	8000652 <uart2_write+0xa>
    {
    }
    /*Write transmit data register*/
    USART2->DR = (ch & 0xFF);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	4a04      	ldr	r2, [pc, #16]	@ (8000674 <uart2_write+0x2c>)
 8000662:	b2db      	uxtb	r3, r3
 8000664:	6053      	str	r3, [r2, #4]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	40004400 	.word	0x40004400

08000678 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000678:	480d      	ldr	r0, [pc, #52]	@ (80006b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800067a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800067c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000680:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000682:	490d      	ldr	r1, [pc, #52]	@ (80006b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000684:	4a0d      	ldr	r2, [pc, #52]	@ (80006bc <LoopForever+0xe>)
  movs r3, #0
 8000686:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000688:	e002      	b.n	8000690 <LoopCopyDataInit>

0800068a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800068a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800068c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800068e:	3304      	adds	r3, #4

08000690 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000690:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000692:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000694:	d3f9      	bcc.n	800068a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000696:	4a0a      	ldr	r2, [pc, #40]	@ (80006c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000698:	4c0a      	ldr	r4, [pc, #40]	@ (80006c4 <LoopForever+0x16>)
  movs r3, #0
 800069a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800069c:	e001      	b.n	80006a2 <LoopFillZerobss>

0800069e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800069e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006a0:	3204      	adds	r2, #4

080006a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006a4:	d3fb      	bcc.n	800069e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006a6:	f000 f97d 	bl	80009a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006aa:	f7ff fe55 	bl	8000358 <main>

080006ae <LoopForever>:

LoopForever:
  b LoopForever
 80006ae:	e7fe      	b.n	80006ae <LoopForever>
  ldr   r0, =_estack
 80006b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80006bc:	0800159c 	.word	0x0800159c
  ldr r2, =_sbss
 80006c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80006c4:	200001cc 	.word	0x200001cc

080006c8 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006c8:	e7fe      	b.n	80006c8 <BusFault_Handler>
	...

080006cc <std>:
 80006cc:	2300      	movs	r3, #0
 80006ce:	b510      	push	{r4, lr}
 80006d0:	4604      	mov	r4, r0
 80006d2:	e9c0 3300 	strd	r3, r3, [r0]
 80006d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006da:	6083      	str	r3, [r0, #8]
 80006dc:	8181      	strh	r1, [r0, #12]
 80006de:	6643      	str	r3, [r0, #100]	@ 0x64
 80006e0:	81c2      	strh	r2, [r0, #14]
 80006e2:	6183      	str	r3, [r0, #24]
 80006e4:	4619      	mov	r1, r3
 80006e6:	2208      	movs	r2, #8
 80006e8:	305c      	adds	r0, #92	@ 0x5c
 80006ea:	f000 f906 	bl	80008fa <memset>
 80006ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000724 <std+0x58>)
 80006f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80006f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <std+0x5c>)
 80006f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <std+0x60>)
 80006f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000730 <std+0x64>)
 80006fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80006fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <std+0x68>)
 8000700:	6224      	str	r4, [r4, #32]
 8000702:	429c      	cmp	r4, r3
 8000704:	d006      	beq.n	8000714 <std+0x48>
 8000706:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800070a:	4294      	cmp	r4, r2
 800070c:	d002      	beq.n	8000714 <std+0x48>
 800070e:	33d0      	adds	r3, #208	@ 0xd0
 8000710:	429c      	cmp	r4, r3
 8000712:	d105      	bne.n	8000720 <std+0x54>
 8000714:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800071c:	f000 b966 	b.w	80009ec <__retarget_lock_init_recursive>
 8000720:	bd10      	pop	{r4, pc}
 8000722:	bf00      	nop
 8000724:	08000875 	.word	0x08000875
 8000728:	08000897 	.word	0x08000897
 800072c:	080008cf 	.word	0x080008cf
 8000730:	080008f3 	.word	0x080008f3
 8000734:	20000080 	.word	0x20000080

08000738 <stdio_exit_handler>:
 8000738:	4a02      	ldr	r2, [pc, #8]	@ (8000744 <stdio_exit_handler+0xc>)
 800073a:	4903      	ldr	r1, [pc, #12]	@ (8000748 <stdio_exit_handler+0x10>)
 800073c:	4803      	ldr	r0, [pc, #12]	@ (800074c <stdio_exit_handler+0x14>)
 800073e:	f000 b869 	b.w	8000814 <_fwalk_sglue>
 8000742:	bf00      	nop
 8000744:	20000000 	.word	0x20000000
 8000748:	0800128d 	.word	0x0800128d
 800074c:	20000010 	.word	0x20000010

08000750 <cleanup_stdio>:
 8000750:	6841      	ldr	r1, [r0, #4]
 8000752:	4b0c      	ldr	r3, [pc, #48]	@ (8000784 <cleanup_stdio+0x34>)
 8000754:	4299      	cmp	r1, r3
 8000756:	b510      	push	{r4, lr}
 8000758:	4604      	mov	r4, r0
 800075a:	d001      	beq.n	8000760 <cleanup_stdio+0x10>
 800075c:	f000 fd96 	bl	800128c <_fflush_r>
 8000760:	68a1      	ldr	r1, [r4, #8]
 8000762:	4b09      	ldr	r3, [pc, #36]	@ (8000788 <cleanup_stdio+0x38>)
 8000764:	4299      	cmp	r1, r3
 8000766:	d002      	beq.n	800076e <cleanup_stdio+0x1e>
 8000768:	4620      	mov	r0, r4
 800076a:	f000 fd8f 	bl	800128c <_fflush_r>
 800076e:	68e1      	ldr	r1, [r4, #12]
 8000770:	4b06      	ldr	r3, [pc, #24]	@ (800078c <cleanup_stdio+0x3c>)
 8000772:	4299      	cmp	r1, r3
 8000774:	d004      	beq.n	8000780 <cleanup_stdio+0x30>
 8000776:	4620      	mov	r0, r4
 8000778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800077c:	f000 bd86 	b.w	800128c <_fflush_r>
 8000780:	bd10      	pop	{r4, pc}
 8000782:	bf00      	nop
 8000784:	20000080 	.word	0x20000080
 8000788:	200000e8 	.word	0x200000e8
 800078c:	20000150 	.word	0x20000150

08000790 <global_stdio_init.part.0>:
 8000790:	b510      	push	{r4, lr}
 8000792:	4b0b      	ldr	r3, [pc, #44]	@ (80007c0 <global_stdio_init.part.0+0x30>)
 8000794:	4c0b      	ldr	r4, [pc, #44]	@ (80007c4 <global_stdio_init.part.0+0x34>)
 8000796:	4a0c      	ldr	r2, [pc, #48]	@ (80007c8 <global_stdio_init.part.0+0x38>)
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	4620      	mov	r0, r4
 800079c:	2200      	movs	r2, #0
 800079e:	2104      	movs	r1, #4
 80007a0:	f7ff ff94 	bl	80006cc <std>
 80007a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007a8:	2201      	movs	r2, #1
 80007aa:	2109      	movs	r1, #9
 80007ac:	f7ff ff8e 	bl	80006cc <std>
 80007b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007b4:	2202      	movs	r2, #2
 80007b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007ba:	2112      	movs	r1, #18
 80007bc:	f7ff bf86 	b.w	80006cc <std>
 80007c0:	200001b8 	.word	0x200001b8
 80007c4:	20000080 	.word	0x20000080
 80007c8:	08000739 	.word	0x08000739

080007cc <__sfp_lock_acquire>:
 80007cc:	4801      	ldr	r0, [pc, #4]	@ (80007d4 <__sfp_lock_acquire+0x8>)
 80007ce:	f000 b90e 	b.w	80009ee <__retarget_lock_acquire_recursive>
 80007d2:	bf00      	nop
 80007d4:	200001c1 	.word	0x200001c1

080007d8 <__sfp_lock_release>:
 80007d8:	4801      	ldr	r0, [pc, #4]	@ (80007e0 <__sfp_lock_release+0x8>)
 80007da:	f000 b909 	b.w	80009f0 <__retarget_lock_release_recursive>
 80007de:	bf00      	nop
 80007e0:	200001c1 	.word	0x200001c1

080007e4 <__sinit>:
 80007e4:	b510      	push	{r4, lr}
 80007e6:	4604      	mov	r4, r0
 80007e8:	f7ff fff0 	bl	80007cc <__sfp_lock_acquire>
 80007ec:	6a23      	ldr	r3, [r4, #32]
 80007ee:	b11b      	cbz	r3, 80007f8 <__sinit+0x14>
 80007f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007f4:	f7ff bff0 	b.w	80007d8 <__sfp_lock_release>
 80007f8:	4b04      	ldr	r3, [pc, #16]	@ (800080c <__sinit+0x28>)
 80007fa:	6223      	str	r3, [r4, #32]
 80007fc:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <__sinit+0x2c>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d1f5      	bne.n	80007f0 <__sinit+0xc>
 8000804:	f7ff ffc4 	bl	8000790 <global_stdio_init.part.0>
 8000808:	e7f2      	b.n	80007f0 <__sinit+0xc>
 800080a:	bf00      	nop
 800080c:	08000751 	.word	0x08000751
 8000810:	200001b8 	.word	0x200001b8

08000814 <_fwalk_sglue>:
 8000814:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000818:	4607      	mov	r7, r0
 800081a:	4688      	mov	r8, r1
 800081c:	4614      	mov	r4, r2
 800081e:	2600      	movs	r6, #0
 8000820:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000824:	f1b9 0901 	subs.w	r9, r9, #1
 8000828:	d505      	bpl.n	8000836 <_fwalk_sglue+0x22>
 800082a:	6824      	ldr	r4, [r4, #0]
 800082c:	2c00      	cmp	r4, #0
 800082e:	d1f7      	bne.n	8000820 <_fwalk_sglue+0xc>
 8000830:	4630      	mov	r0, r6
 8000832:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000836:	89ab      	ldrh	r3, [r5, #12]
 8000838:	2b01      	cmp	r3, #1
 800083a:	d907      	bls.n	800084c <_fwalk_sglue+0x38>
 800083c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000840:	3301      	adds	r3, #1
 8000842:	d003      	beq.n	800084c <_fwalk_sglue+0x38>
 8000844:	4629      	mov	r1, r5
 8000846:	4638      	mov	r0, r7
 8000848:	47c0      	blx	r8
 800084a:	4306      	orrs	r6, r0
 800084c:	3568      	adds	r5, #104	@ 0x68
 800084e:	e7e9      	b.n	8000824 <_fwalk_sglue+0x10>

08000850 <iprintf>:
 8000850:	b40f      	push	{r0, r1, r2, r3}
 8000852:	b507      	push	{r0, r1, r2, lr}
 8000854:	4906      	ldr	r1, [pc, #24]	@ (8000870 <iprintf+0x20>)
 8000856:	ab04      	add	r3, sp, #16
 8000858:	6808      	ldr	r0, [r1, #0]
 800085a:	f853 2b04 	ldr.w	r2, [r3], #4
 800085e:	6881      	ldr	r1, [r0, #8]
 8000860:	9301      	str	r3, [sp, #4]
 8000862:	f000 f9e9 	bl	8000c38 <_vfiprintf_r>
 8000866:	b003      	add	sp, #12
 8000868:	f85d eb04 	ldr.w	lr, [sp], #4
 800086c:	b004      	add	sp, #16
 800086e:	4770      	bx	lr
 8000870:	2000000c 	.word	0x2000000c

08000874 <__sread>:
 8000874:	b510      	push	{r4, lr}
 8000876:	460c      	mov	r4, r1
 8000878:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800087c:	f000 f868 	bl	8000950 <_read_r>
 8000880:	2800      	cmp	r0, #0
 8000882:	bfab      	itete	ge
 8000884:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000886:	89a3      	ldrhlt	r3, [r4, #12]
 8000888:	181b      	addge	r3, r3, r0
 800088a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800088e:	bfac      	ite	ge
 8000890:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000892:	81a3      	strhlt	r3, [r4, #12]
 8000894:	bd10      	pop	{r4, pc}

08000896 <__swrite>:
 8000896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800089a:	461f      	mov	r7, r3
 800089c:	898b      	ldrh	r3, [r1, #12]
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	4605      	mov	r5, r0
 80008a2:	460c      	mov	r4, r1
 80008a4:	4616      	mov	r6, r2
 80008a6:	d505      	bpl.n	80008b4 <__swrite+0x1e>
 80008a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008ac:	2302      	movs	r3, #2
 80008ae:	2200      	movs	r2, #0
 80008b0:	f000 f83c 	bl	800092c <_lseek_r>
 80008b4:	89a3      	ldrh	r3, [r4, #12]
 80008b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008be:	81a3      	strh	r3, [r4, #12]
 80008c0:	4632      	mov	r2, r6
 80008c2:	463b      	mov	r3, r7
 80008c4:	4628      	mov	r0, r5
 80008c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008ca:	f000 b853 	b.w	8000974 <_write_r>

080008ce <__sseek>:
 80008ce:	b510      	push	{r4, lr}
 80008d0:	460c      	mov	r4, r1
 80008d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008d6:	f000 f829 	bl	800092c <_lseek_r>
 80008da:	1c43      	adds	r3, r0, #1
 80008dc:	89a3      	ldrh	r3, [r4, #12]
 80008de:	bf15      	itete	ne
 80008e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80008e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80008e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80008ea:	81a3      	strheq	r3, [r4, #12]
 80008ec:	bf18      	it	ne
 80008ee:	81a3      	strhne	r3, [r4, #12]
 80008f0:	bd10      	pop	{r4, pc}

080008f2 <__sclose>:
 80008f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008f6:	f000 b809 	b.w	800090c <_close_r>

080008fa <memset>:
 80008fa:	4402      	add	r2, r0
 80008fc:	4603      	mov	r3, r0
 80008fe:	4293      	cmp	r3, r2
 8000900:	d100      	bne.n	8000904 <memset+0xa>
 8000902:	4770      	bx	lr
 8000904:	f803 1b01 	strb.w	r1, [r3], #1
 8000908:	e7f9      	b.n	80008fe <memset+0x4>
	...

0800090c <_close_r>:
 800090c:	b538      	push	{r3, r4, r5, lr}
 800090e:	4d06      	ldr	r5, [pc, #24]	@ (8000928 <_close_r+0x1c>)
 8000910:	2300      	movs	r3, #0
 8000912:	4604      	mov	r4, r0
 8000914:	4608      	mov	r0, r1
 8000916:	602b      	str	r3, [r5, #0]
 8000918:	f7ff fd89 	bl	800042e <_close>
 800091c:	1c43      	adds	r3, r0, #1
 800091e:	d102      	bne.n	8000926 <_close_r+0x1a>
 8000920:	682b      	ldr	r3, [r5, #0]
 8000922:	b103      	cbz	r3, 8000926 <_close_r+0x1a>
 8000924:	6023      	str	r3, [r4, #0]
 8000926:	bd38      	pop	{r3, r4, r5, pc}
 8000928:	200001bc 	.word	0x200001bc

0800092c <_lseek_r>:
 800092c:	b538      	push	{r3, r4, r5, lr}
 800092e:	4d07      	ldr	r5, [pc, #28]	@ (800094c <_lseek_r+0x20>)
 8000930:	4604      	mov	r4, r0
 8000932:	4608      	mov	r0, r1
 8000934:	4611      	mov	r1, r2
 8000936:	2200      	movs	r2, #0
 8000938:	602a      	str	r2, [r5, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	f7ff fd9e 	bl	800047c <_lseek>
 8000940:	1c43      	adds	r3, r0, #1
 8000942:	d102      	bne.n	800094a <_lseek_r+0x1e>
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	b103      	cbz	r3, 800094a <_lseek_r+0x1e>
 8000948:	6023      	str	r3, [r4, #0]
 800094a:	bd38      	pop	{r3, r4, r5, pc}
 800094c:	200001bc 	.word	0x200001bc

08000950 <_read_r>:
 8000950:	b538      	push	{r3, r4, r5, lr}
 8000952:	4d07      	ldr	r5, [pc, #28]	@ (8000970 <_read_r+0x20>)
 8000954:	4604      	mov	r4, r0
 8000956:	4608      	mov	r0, r1
 8000958:	4611      	mov	r1, r2
 800095a:	2200      	movs	r2, #0
 800095c:	602a      	str	r2, [r5, #0]
 800095e:	461a      	mov	r2, r3
 8000960:	f7ff fd2c 	bl	80003bc <_read>
 8000964:	1c43      	adds	r3, r0, #1
 8000966:	d102      	bne.n	800096e <_read_r+0x1e>
 8000968:	682b      	ldr	r3, [r5, #0]
 800096a:	b103      	cbz	r3, 800096e <_read_r+0x1e>
 800096c:	6023      	str	r3, [r4, #0]
 800096e:	bd38      	pop	{r3, r4, r5, pc}
 8000970:	200001bc 	.word	0x200001bc

08000974 <_write_r>:
 8000974:	b538      	push	{r3, r4, r5, lr}
 8000976:	4d07      	ldr	r5, [pc, #28]	@ (8000994 <_write_r+0x20>)
 8000978:	4604      	mov	r4, r0
 800097a:	4608      	mov	r0, r1
 800097c:	4611      	mov	r1, r2
 800097e:	2200      	movs	r2, #0
 8000980:	602a      	str	r2, [r5, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	f7ff fd37 	bl	80003f6 <_write>
 8000988:	1c43      	adds	r3, r0, #1
 800098a:	d102      	bne.n	8000992 <_write_r+0x1e>
 800098c:	682b      	ldr	r3, [r5, #0]
 800098e:	b103      	cbz	r3, 8000992 <_write_r+0x1e>
 8000990:	6023      	str	r3, [r4, #0]
 8000992:	bd38      	pop	{r3, r4, r5, pc}
 8000994:	200001bc 	.word	0x200001bc

08000998 <__errno>:
 8000998:	4b01      	ldr	r3, [pc, #4]	@ (80009a0 <__errno+0x8>)
 800099a:	6818      	ldr	r0, [r3, #0]
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	2000000c 	.word	0x2000000c

080009a4 <__libc_init_array>:
 80009a4:	b570      	push	{r4, r5, r6, lr}
 80009a6:	4d0d      	ldr	r5, [pc, #52]	@ (80009dc <__libc_init_array+0x38>)
 80009a8:	4c0d      	ldr	r4, [pc, #52]	@ (80009e0 <__libc_init_array+0x3c>)
 80009aa:	1b64      	subs	r4, r4, r5
 80009ac:	10a4      	asrs	r4, r4, #2
 80009ae:	2600      	movs	r6, #0
 80009b0:	42a6      	cmp	r6, r4
 80009b2:	d109      	bne.n	80009c8 <__libc_init_array+0x24>
 80009b4:	4d0b      	ldr	r5, [pc, #44]	@ (80009e4 <__libc_init_array+0x40>)
 80009b6:	4c0c      	ldr	r4, [pc, #48]	@ (80009e8 <__libc_init_array+0x44>)
 80009b8:	f000 fdb8 	bl	800152c <_init>
 80009bc:	1b64      	subs	r4, r4, r5
 80009be:	10a4      	asrs	r4, r4, #2
 80009c0:	2600      	movs	r6, #0
 80009c2:	42a6      	cmp	r6, r4
 80009c4:	d105      	bne.n	80009d2 <__libc_init_array+0x2e>
 80009c6:	bd70      	pop	{r4, r5, r6, pc}
 80009c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009cc:	4798      	blx	r3
 80009ce:	3601      	adds	r6, #1
 80009d0:	e7ee      	b.n	80009b0 <__libc_init_array+0xc>
 80009d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d6:	4798      	blx	r3
 80009d8:	3601      	adds	r6, #1
 80009da:	e7f2      	b.n	80009c2 <__libc_init_array+0x1e>
 80009dc:	08001594 	.word	0x08001594
 80009e0:	08001594 	.word	0x08001594
 80009e4:	08001594 	.word	0x08001594
 80009e8:	08001598 	.word	0x08001598

080009ec <__retarget_lock_init_recursive>:
 80009ec:	4770      	bx	lr

080009ee <__retarget_lock_acquire_recursive>:
 80009ee:	4770      	bx	lr

080009f0 <__retarget_lock_release_recursive>:
 80009f0:	4770      	bx	lr
	...

080009f4 <_free_r>:
 80009f4:	b538      	push	{r3, r4, r5, lr}
 80009f6:	4605      	mov	r5, r0
 80009f8:	2900      	cmp	r1, #0
 80009fa:	d041      	beq.n	8000a80 <_free_r+0x8c>
 80009fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a00:	1f0c      	subs	r4, r1, #4
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	bfb8      	it	lt
 8000a06:	18e4      	addlt	r4, r4, r3
 8000a08:	f000 f8e0 	bl	8000bcc <__malloc_lock>
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8000a84 <_free_r+0x90>)
 8000a0e:	6813      	ldr	r3, [r2, #0]
 8000a10:	b933      	cbnz	r3, 8000a20 <_free_r+0x2c>
 8000a12:	6063      	str	r3, [r4, #4]
 8000a14:	6014      	str	r4, [r2, #0]
 8000a16:	4628      	mov	r0, r5
 8000a18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a1c:	f000 b8dc 	b.w	8000bd8 <__malloc_unlock>
 8000a20:	42a3      	cmp	r3, r4
 8000a22:	d908      	bls.n	8000a36 <_free_r+0x42>
 8000a24:	6820      	ldr	r0, [r4, #0]
 8000a26:	1821      	adds	r1, r4, r0
 8000a28:	428b      	cmp	r3, r1
 8000a2a:	bf01      	itttt	eq
 8000a2c:	6819      	ldreq	r1, [r3, #0]
 8000a2e:	685b      	ldreq	r3, [r3, #4]
 8000a30:	1809      	addeq	r1, r1, r0
 8000a32:	6021      	streq	r1, [r4, #0]
 8000a34:	e7ed      	b.n	8000a12 <_free_r+0x1e>
 8000a36:	461a      	mov	r2, r3
 8000a38:	685b      	ldr	r3, [r3, #4]
 8000a3a:	b10b      	cbz	r3, 8000a40 <_free_r+0x4c>
 8000a3c:	42a3      	cmp	r3, r4
 8000a3e:	d9fa      	bls.n	8000a36 <_free_r+0x42>
 8000a40:	6811      	ldr	r1, [r2, #0]
 8000a42:	1850      	adds	r0, r2, r1
 8000a44:	42a0      	cmp	r0, r4
 8000a46:	d10b      	bne.n	8000a60 <_free_r+0x6c>
 8000a48:	6820      	ldr	r0, [r4, #0]
 8000a4a:	4401      	add	r1, r0
 8000a4c:	1850      	adds	r0, r2, r1
 8000a4e:	4283      	cmp	r3, r0
 8000a50:	6011      	str	r1, [r2, #0]
 8000a52:	d1e0      	bne.n	8000a16 <_free_r+0x22>
 8000a54:	6818      	ldr	r0, [r3, #0]
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	6053      	str	r3, [r2, #4]
 8000a5a:	4408      	add	r0, r1
 8000a5c:	6010      	str	r0, [r2, #0]
 8000a5e:	e7da      	b.n	8000a16 <_free_r+0x22>
 8000a60:	d902      	bls.n	8000a68 <_free_r+0x74>
 8000a62:	230c      	movs	r3, #12
 8000a64:	602b      	str	r3, [r5, #0]
 8000a66:	e7d6      	b.n	8000a16 <_free_r+0x22>
 8000a68:	6820      	ldr	r0, [r4, #0]
 8000a6a:	1821      	adds	r1, r4, r0
 8000a6c:	428b      	cmp	r3, r1
 8000a6e:	bf04      	itt	eq
 8000a70:	6819      	ldreq	r1, [r3, #0]
 8000a72:	685b      	ldreq	r3, [r3, #4]
 8000a74:	6063      	str	r3, [r4, #4]
 8000a76:	bf04      	itt	eq
 8000a78:	1809      	addeq	r1, r1, r0
 8000a7a:	6021      	streq	r1, [r4, #0]
 8000a7c:	6054      	str	r4, [r2, #4]
 8000a7e:	e7ca      	b.n	8000a16 <_free_r+0x22>
 8000a80:	bd38      	pop	{r3, r4, r5, pc}
 8000a82:	bf00      	nop
 8000a84:	200001c8 	.word	0x200001c8

08000a88 <sbrk_aligned>:
 8000a88:	b570      	push	{r4, r5, r6, lr}
 8000a8a:	4e0f      	ldr	r6, [pc, #60]	@ (8000ac8 <sbrk_aligned+0x40>)
 8000a8c:	460c      	mov	r4, r1
 8000a8e:	6831      	ldr	r1, [r6, #0]
 8000a90:	4605      	mov	r5, r0
 8000a92:	b911      	cbnz	r1, 8000a9a <sbrk_aligned+0x12>
 8000a94:	f000 fcb6 	bl	8001404 <_sbrk_r>
 8000a98:	6030      	str	r0, [r6, #0]
 8000a9a:	4621      	mov	r1, r4
 8000a9c:	4628      	mov	r0, r5
 8000a9e:	f000 fcb1 	bl	8001404 <_sbrk_r>
 8000aa2:	1c43      	adds	r3, r0, #1
 8000aa4:	d103      	bne.n	8000aae <sbrk_aligned+0x26>
 8000aa6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000aaa:	4620      	mov	r0, r4
 8000aac:	bd70      	pop	{r4, r5, r6, pc}
 8000aae:	1cc4      	adds	r4, r0, #3
 8000ab0:	f024 0403 	bic.w	r4, r4, #3
 8000ab4:	42a0      	cmp	r0, r4
 8000ab6:	d0f8      	beq.n	8000aaa <sbrk_aligned+0x22>
 8000ab8:	1a21      	subs	r1, r4, r0
 8000aba:	4628      	mov	r0, r5
 8000abc:	f000 fca2 	bl	8001404 <_sbrk_r>
 8000ac0:	3001      	adds	r0, #1
 8000ac2:	d1f2      	bne.n	8000aaa <sbrk_aligned+0x22>
 8000ac4:	e7ef      	b.n	8000aa6 <sbrk_aligned+0x1e>
 8000ac6:	bf00      	nop
 8000ac8:	200001c4 	.word	0x200001c4

08000acc <_malloc_r>:
 8000acc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ad0:	1ccd      	adds	r5, r1, #3
 8000ad2:	f025 0503 	bic.w	r5, r5, #3
 8000ad6:	3508      	adds	r5, #8
 8000ad8:	2d0c      	cmp	r5, #12
 8000ada:	bf38      	it	cc
 8000adc:	250c      	movcc	r5, #12
 8000ade:	2d00      	cmp	r5, #0
 8000ae0:	4606      	mov	r6, r0
 8000ae2:	db01      	blt.n	8000ae8 <_malloc_r+0x1c>
 8000ae4:	42a9      	cmp	r1, r5
 8000ae6:	d904      	bls.n	8000af2 <_malloc_r+0x26>
 8000ae8:	230c      	movs	r3, #12
 8000aea:	6033      	str	r3, [r6, #0]
 8000aec:	2000      	movs	r0, #0
 8000aee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000af2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bc8 <_malloc_r+0xfc>
 8000af6:	f000 f869 	bl	8000bcc <__malloc_lock>
 8000afa:	f8d8 3000 	ldr.w	r3, [r8]
 8000afe:	461c      	mov	r4, r3
 8000b00:	bb44      	cbnz	r4, 8000b54 <_malloc_r+0x88>
 8000b02:	4629      	mov	r1, r5
 8000b04:	4630      	mov	r0, r6
 8000b06:	f7ff ffbf 	bl	8000a88 <sbrk_aligned>
 8000b0a:	1c43      	adds	r3, r0, #1
 8000b0c:	4604      	mov	r4, r0
 8000b0e:	d158      	bne.n	8000bc2 <_malloc_r+0xf6>
 8000b10:	f8d8 4000 	ldr.w	r4, [r8]
 8000b14:	4627      	mov	r7, r4
 8000b16:	2f00      	cmp	r7, #0
 8000b18:	d143      	bne.n	8000ba2 <_malloc_r+0xd6>
 8000b1a:	2c00      	cmp	r4, #0
 8000b1c:	d04b      	beq.n	8000bb6 <_malloc_r+0xea>
 8000b1e:	6823      	ldr	r3, [r4, #0]
 8000b20:	4639      	mov	r1, r7
 8000b22:	4630      	mov	r0, r6
 8000b24:	eb04 0903 	add.w	r9, r4, r3
 8000b28:	f000 fc6c 	bl	8001404 <_sbrk_r>
 8000b2c:	4581      	cmp	r9, r0
 8000b2e:	d142      	bne.n	8000bb6 <_malloc_r+0xea>
 8000b30:	6821      	ldr	r1, [r4, #0]
 8000b32:	1a6d      	subs	r5, r5, r1
 8000b34:	4629      	mov	r1, r5
 8000b36:	4630      	mov	r0, r6
 8000b38:	f7ff ffa6 	bl	8000a88 <sbrk_aligned>
 8000b3c:	3001      	adds	r0, #1
 8000b3e:	d03a      	beq.n	8000bb6 <_malloc_r+0xea>
 8000b40:	6823      	ldr	r3, [r4, #0]
 8000b42:	442b      	add	r3, r5
 8000b44:	6023      	str	r3, [r4, #0]
 8000b46:	f8d8 3000 	ldr.w	r3, [r8]
 8000b4a:	685a      	ldr	r2, [r3, #4]
 8000b4c:	bb62      	cbnz	r2, 8000ba8 <_malloc_r+0xdc>
 8000b4e:	f8c8 7000 	str.w	r7, [r8]
 8000b52:	e00f      	b.n	8000b74 <_malloc_r+0xa8>
 8000b54:	6822      	ldr	r2, [r4, #0]
 8000b56:	1b52      	subs	r2, r2, r5
 8000b58:	d420      	bmi.n	8000b9c <_malloc_r+0xd0>
 8000b5a:	2a0b      	cmp	r2, #11
 8000b5c:	d917      	bls.n	8000b8e <_malloc_r+0xc2>
 8000b5e:	1961      	adds	r1, r4, r5
 8000b60:	42a3      	cmp	r3, r4
 8000b62:	6025      	str	r5, [r4, #0]
 8000b64:	bf18      	it	ne
 8000b66:	6059      	strne	r1, [r3, #4]
 8000b68:	6863      	ldr	r3, [r4, #4]
 8000b6a:	bf08      	it	eq
 8000b6c:	f8c8 1000 	streq.w	r1, [r8]
 8000b70:	5162      	str	r2, [r4, r5]
 8000b72:	604b      	str	r3, [r1, #4]
 8000b74:	4630      	mov	r0, r6
 8000b76:	f000 f82f 	bl	8000bd8 <__malloc_unlock>
 8000b7a:	f104 000b 	add.w	r0, r4, #11
 8000b7e:	1d23      	adds	r3, r4, #4
 8000b80:	f020 0007 	bic.w	r0, r0, #7
 8000b84:	1ac2      	subs	r2, r0, r3
 8000b86:	bf1c      	itt	ne
 8000b88:	1a1b      	subne	r3, r3, r0
 8000b8a:	50a3      	strne	r3, [r4, r2]
 8000b8c:	e7af      	b.n	8000aee <_malloc_r+0x22>
 8000b8e:	6862      	ldr	r2, [r4, #4]
 8000b90:	42a3      	cmp	r3, r4
 8000b92:	bf0c      	ite	eq
 8000b94:	f8c8 2000 	streq.w	r2, [r8]
 8000b98:	605a      	strne	r2, [r3, #4]
 8000b9a:	e7eb      	b.n	8000b74 <_malloc_r+0xa8>
 8000b9c:	4623      	mov	r3, r4
 8000b9e:	6864      	ldr	r4, [r4, #4]
 8000ba0:	e7ae      	b.n	8000b00 <_malloc_r+0x34>
 8000ba2:	463c      	mov	r4, r7
 8000ba4:	687f      	ldr	r7, [r7, #4]
 8000ba6:	e7b6      	b.n	8000b16 <_malloc_r+0x4a>
 8000ba8:	461a      	mov	r2, r3
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	42a3      	cmp	r3, r4
 8000bae:	d1fb      	bne.n	8000ba8 <_malloc_r+0xdc>
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	6053      	str	r3, [r2, #4]
 8000bb4:	e7de      	b.n	8000b74 <_malloc_r+0xa8>
 8000bb6:	230c      	movs	r3, #12
 8000bb8:	6033      	str	r3, [r6, #0]
 8000bba:	4630      	mov	r0, r6
 8000bbc:	f000 f80c 	bl	8000bd8 <__malloc_unlock>
 8000bc0:	e794      	b.n	8000aec <_malloc_r+0x20>
 8000bc2:	6005      	str	r5, [r0, #0]
 8000bc4:	e7d6      	b.n	8000b74 <_malloc_r+0xa8>
 8000bc6:	bf00      	nop
 8000bc8:	200001c8 	.word	0x200001c8

08000bcc <__malloc_lock>:
 8000bcc:	4801      	ldr	r0, [pc, #4]	@ (8000bd4 <__malloc_lock+0x8>)
 8000bce:	f7ff bf0e 	b.w	80009ee <__retarget_lock_acquire_recursive>
 8000bd2:	bf00      	nop
 8000bd4:	200001c0 	.word	0x200001c0

08000bd8 <__malloc_unlock>:
 8000bd8:	4801      	ldr	r0, [pc, #4]	@ (8000be0 <__malloc_unlock+0x8>)
 8000bda:	f7ff bf09 	b.w	80009f0 <__retarget_lock_release_recursive>
 8000bde:	bf00      	nop
 8000be0:	200001c0 	.word	0x200001c0

08000be4 <__sfputc_r>:
 8000be4:	6893      	ldr	r3, [r2, #8]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	b410      	push	{r4}
 8000bec:	6093      	str	r3, [r2, #8]
 8000bee:	da08      	bge.n	8000c02 <__sfputc_r+0x1e>
 8000bf0:	6994      	ldr	r4, [r2, #24]
 8000bf2:	42a3      	cmp	r3, r4
 8000bf4:	db01      	blt.n	8000bfa <__sfputc_r+0x16>
 8000bf6:	290a      	cmp	r1, #10
 8000bf8:	d103      	bne.n	8000c02 <__sfputc_r+0x1e>
 8000bfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bfe:	f000 bb6d 	b.w	80012dc <__swbuf_r>
 8000c02:	6813      	ldr	r3, [r2, #0]
 8000c04:	1c58      	adds	r0, r3, #1
 8000c06:	6010      	str	r0, [r2, #0]
 8000c08:	7019      	strb	r1, [r3, #0]
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <__sfputs_r>:
 8000c12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c14:	4606      	mov	r6, r0
 8000c16:	460f      	mov	r7, r1
 8000c18:	4614      	mov	r4, r2
 8000c1a:	18d5      	adds	r5, r2, r3
 8000c1c:	42ac      	cmp	r4, r5
 8000c1e:	d101      	bne.n	8000c24 <__sfputs_r+0x12>
 8000c20:	2000      	movs	r0, #0
 8000c22:	e007      	b.n	8000c34 <__sfputs_r+0x22>
 8000c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c28:	463a      	mov	r2, r7
 8000c2a:	4630      	mov	r0, r6
 8000c2c:	f7ff ffda 	bl	8000be4 <__sfputc_r>
 8000c30:	1c43      	adds	r3, r0, #1
 8000c32:	d1f3      	bne.n	8000c1c <__sfputs_r+0xa>
 8000c34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c38 <_vfiprintf_r>:
 8000c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c3c:	460d      	mov	r5, r1
 8000c3e:	b09d      	sub	sp, #116	@ 0x74
 8000c40:	4614      	mov	r4, r2
 8000c42:	4698      	mov	r8, r3
 8000c44:	4606      	mov	r6, r0
 8000c46:	b118      	cbz	r0, 8000c50 <_vfiprintf_r+0x18>
 8000c48:	6a03      	ldr	r3, [r0, #32]
 8000c4a:	b90b      	cbnz	r3, 8000c50 <_vfiprintf_r+0x18>
 8000c4c:	f7ff fdca 	bl	80007e4 <__sinit>
 8000c50:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c52:	07d9      	lsls	r1, r3, #31
 8000c54:	d405      	bmi.n	8000c62 <_vfiprintf_r+0x2a>
 8000c56:	89ab      	ldrh	r3, [r5, #12]
 8000c58:	059a      	lsls	r2, r3, #22
 8000c5a:	d402      	bmi.n	8000c62 <_vfiprintf_r+0x2a>
 8000c5c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c5e:	f7ff fec6 	bl	80009ee <__retarget_lock_acquire_recursive>
 8000c62:	89ab      	ldrh	r3, [r5, #12]
 8000c64:	071b      	lsls	r3, r3, #28
 8000c66:	d501      	bpl.n	8000c6c <_vfiprintf_r+0x34>
 8000c68:	692b      	ldr	r3, [r5, #16]
 8000c6a:	b99b      	cbnz	r3, 8000c94 <_vfiprintf_r+0x5c>
 8000c6c:	4629      	mov	r1, r5
 8000c6e:	4630      	mov	r0, r6
 8000c70:	f000 fb72 	bl	8001358 <__swsetup_r>
 8000c74:	b170      	cbz	r0, 8000c94 <_vfiprintf_r+0x5c>
 8000c76:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000c78:	07dc      	lsls	r4, r3, #31
 8000c7a:	d504      	bpl.n	8000c86 <_vfiprintf_r+0x4e>
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c80:	b01d      	add	sp, #116	@ 0x74
 8000c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c86:	89ab      	ldrh	r3, [r5, #12]
 8000c88:	0598      	lsls	r0, r3, #22
 8000c8a:	d4f7      	bmi.n	8000c7c <_vfiprintf_r+0x44>
 8000c8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000c8e:	f7ff feaf 	bl	80009f0 <__retarget_lock_release_recursive>
 8000c92:	e7f3      	b.n	8000c7c <_vfiprintf_r+0x44>
 8000c94:	2300      	movs	r3, #0
 8000c96:	9309      	str	r3, [sp, #36]	@ 0x24
 8000c98:	2320      	movs	r3, #32
 8000c9a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000c9e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000ca2:	2330      	movs	r3, #48	@ 0x30
 8000ca4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000e54 <_vfiprintf_r+0x21c>
 8000ca8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000cac:	f04f 0901 	mov.w	r9, #1
 8000cb0:	4623      	mov	r3, r4
 8000cb2:	469a      	mov	sl, r3
 8000cb4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cb8:	b10a      	cbz	r2, 8000cbe <_vfiprintf_r+0x86>
 8000cba:	2a25      	cmp	r2, #37	@ 0x25
 8000cbc:	d1f9      	bne.n	8000cb2 <_vfiprintf_r+0x7a>
 8000cbe:	ebba 0b04 	subs.w	fp, sl, r4
 8000cc2:	d00b      	beq.n	8000cdc <_vfiprintf_r+0xa4>
 8000cc4:	465b      	mov	r3, fp
 8000cc6:	4622      	mov	r2, r4
 8000cc8:	4629      	mov	r1, r5
 8000cca:	4630      	mov	r0, r6
 8000ccc:	f7ff ffa1 	bl	8000c12 <__sfputs_r>
 8000cd0:	3001      	adds	r0, #1
 8000cd2:	f000 80a7 	beq.w	8000e24 <_vfiprintf_r+0x1ec>
 8000cd6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000cd8:	445a      	add	r2, fp
 8000cda:	9209      	str	r2, [sp, #36]	@ 0x24
 8000cdc:	f89a 3000 	ldrb.w	r3, [sl]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	f000 809f 	beq.w	8000e24 <_vfiprintf_r+0x1ec>
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000cec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000cf0:	f10a 0a01 	add.w	sl, sl, #1
 8000cf4:	9304      	str	r3, [sp, #16]
 8000cf6:	9307      	str	r3, [sp, #28]
 8000cf8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000cfc:	931a      	str	r3, [sp, #104]	@ 0x68
 8000cfe:	4654      	mov	r4, sl
 8000d00:	2205      	movs	r2, #5
 8000d02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d06:	4853      	ldr	r0, [pc, #332]	@ (8000e54 <_vfiprintf_r+0x21c>)
 8000d08:	f7ff fa6a 	bl	80001e0 <memchr>
 8000d0c:	9a04      	ldr	r2, [sp, #16]
 8000d0e:	b9d8      	cbnz	r0, 8000d48 <_vfiprintf_r+0x110>
 8000d10:	06d1      	lsls	r1, r2, #27
 8000d12:	bf44      	itt	mi
 8000d14:	2320      	movmi	r3, #32
 8000d16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d1a:	0713      	lsls	r3, r2, #28
 8000d1c:	bf44      	itt	mi
 8000d1e:	232b      	movmi	r3, #43	@ 0x2b
 8000d20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000d24:	f89a 3000 	ldrb.w	r3, [sl]
 8000d28:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d2a:	d015      	beq.n	8000d58 <_vfiprintf_r+0x120>
 8000d2c:	9a07      	ldr	r2, [sp, #28]
 8000d2e:	4654      	mov	r4, sl
 8000d30:	2000      	movs	r0, #0
 8000d32:	f04f 0c0a 	mov.w	ip, #10
 8000d36:	4621      	mov	r1, r4
 8000d38:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d3c:	3b30      	subs	r3, #48	@ 0x30
 8000d3e:	2b09      	cmp	r3, #9
 8000d40:	d94b      	bls.n	8000dda <_vfiprintf_r+0x1a2>
 8000d42:	b1b0      	cbz	r0, 8000d72 <_vfiprintf_r+0x13a>
 8000d44:	9207      	str	r2, [sp, #28]
 8000d46:	e014      	b.n	8000d72 <_vfiprintf_r+0x13a>
 8000d48:	eba0 0308 	sub.w	r3, r0, r8
 8000d4c:	fa09 f303 	lsl.w	r3, r9, r3
 8000d50:	4313      	orrs	r3, r2
 8000d52:	9304      	str	r3, [sp, #16]
 8000d54:	46a2      	mov	sl, r4
 8000d56:	e7d2      	b.n	8000cfe <_vfiprintf_r+0xc6>
 8000d58:	9b03      	ldr	r3, [sp, #12]
 8000d5a:	1d19      	adds	r1, r3, #4
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	9103      	str	r1, [sp, #12]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	bfbb      	ittet	lt
 8000d64:	425b      	neglt	r3, r3
 8000d66:	f042 0202 	orrlt.w	r2, r2, #2
 8000d6a:	9307      	strge	r3, [sp, #28]
 8000d6c:	9307      	strlt	r3, [sp, #28]
 8000d6e:	bfb8      	it	lt
 8000d70:	9204      	strlt	r2, [sp, #16]
 8000d72:	7823      	ldrb	r3, [r4, #0]
 8000d74:	2b2e      	cmp	r3, #46	@ 0x2e
 8000d76:	d10a      	bne.n	8000d8e <_vfiprintf_r+0x156>
 8000d78:	7863      	ldrb	r3, [r4, #1]
 8000d7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8000d7c:	d132      	bne.n	8000de4 <_vfiprintf_r+0x1ac>
 8000d7e:	9b03      	ldr	r3, [sp, #12]
 8000d80:	1d1a      	adds	r2, r3, #4
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	9203      	str	r2, [sp, #12]
 8000d86:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000d8a:	3402      	adds	r4, #2
 8000d8c:	9305      	str	r3, [sp, #20]
 8000d8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000e64 <_vfiprintf_r+0x22c>
 8000d92:	7821      	ldrb	r1, [r4, #0]
 8000d94:	2203      	movs	r2, #3
 8000d96:	4650      	mov	r0, sl
 8000d98:	f7ff fa22 	bl	80001e0 <memchr>
 8000d9c:	b138      	cbz	r0, 8000dae <_vfiprintf_r+0x176>
 8000d9e:	9b04      	ldr	r3, [sp, #16]
 8000da0:	eba0 000a 	sub.w	r0, r0, sl
 8000da4:	2240      	movs	r2, #64	@ 0x40
 8000da6:	4082      	lsls	r2, r0
 8000da8:	4313      	orrs	r3, r2
 8000daa:	3401      	adds	r4, #1
 8000dac:	9304      	str	r3, [sp, #16]
 8000dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000db2:	4829      	ldr	r0, [pc, #164]	@ (8000e58 <_vfiprintf_r+0x220>)
 8000db4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000db8:	2206      	movs	r2, #6
 8000dba:	f7ff fa11 	bl	80001e0 <memchr>
 8000dbe:	2800      	cmp	r0, #0
 8000dc0:	d03f      	beq.n	8000e42 <_vfiprintf_r+0x20a>
 8000dc2:	4b26      	ldr	r3, [pc, #152]	@ (8000e5c <_vfiprintf_r+0x224>)
 8000dc4:	bb1b      	cbnz	r3, 8000e0e <_vfiprintf_r+0x1d6>
 8000dc6:	9b03      	ldr	r3, [sp, #12]
 8000dc8:	3307      	adds	r3, #7
 8000dca:	f023 0307 	bic.w	r3, r3, #7
 8000dce:	3308      	adds	r3, #8
 8000dd0:	9303      	str	r3, [sp, #12]
 8000dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000dd4:	443b      	add	r3, r7
 8000dd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8000dd8:	e76a      	b.n	8000cb0 <_vfiprintf_r+0x78>
 8000dda:	fb0c 3202 	mla	r2, ip, r2, r3
 8000dde:	460c      	mov	r4, r1
 8000de0:	2001      	movs	r0, #1
 8000de2:	e7a8      	b.n	8000d36 <_vfiprintf_r+0xfe>
 8000de4:	2300      	movs	r3, #0
 8000de6:	3401      	adds	r4, #1
 8000de8:	9305      	str	r3, [sp, #20]
 8000dea:	4619      	mov	r1, r3
 8000dec:	f04f 0c0a 	mov.w	ip, #10
 8000df0:	4620      	mov	r0, r4
 8000df2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000df6:	3a30      	subs	r2, #48	@ 0x30
 8000df8:	2a09      	cmp	r2, #9
 8000dfa:	d903      	bls.n	8000e04 <_vfiprintf_r+0x1cc>
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d0c6      	beq.n	8000d8e <_vfiprintf_r+0x156>
 8000e00:	9105      	str	r1, [sp, #20]
 8000e02:	e7c4      	b.n	8000d8e <_vfiprintf_r+0x156>
 8000e04:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e08:	4604      	mov	r4, r0
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e7f0      	b.n	8000df0 <_vfiprintf_r+0x1b8>
 8000e0e:	ab03      	add	r3, sp, #12
 8000e10:	9300      	str	r3, [sp, #0]
 8000e12:	462a      	mov	r2, r5
 8000e14:	4b12      	ldr	r3, [pc, #72]	@ (8000e60 <_vfiprintf_r+0x228>)
 8000e16:	a904      	add	r1, sp, #16
 8000e18:	4630      	mov	r0, r6
 8000e1a:	f3af 8000 	nop.w
 8000e1e:	4607      	mov	r7, r0
 8000e20:	1c78      	adds	r0, r7, #1
 8000e22:	d1d6      	bne.n	8000dd2 <_vfiprintf_r+0x19a>
 8000e24:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000e26:	07d9      	lsls	r1, r3, #31
 8000e28:	d405      	bmi.n	8000e36 <_vfiprintf_r+0x1fe>
 8000e2a:	89ab      	ldrh	r3, [r5, #12]
 8000e2c:	059a      	lsls	r2, r3, #22
 8000e2e:	d402      	bmi.n	8000e36 <_vfiprintf_r+0x1fe>
 8000e30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e32:	f7ff fddd 	bl	80009f0 <__retarget_lock_release_recursive>
 8000e36:	89ab      	ldrh	r3, [r5, #12]
 8000e38:	065b      	lsls	r3, r3, #25
 8000e3a:	f53f af1f 	bmi.w	8000c7c <_vfiprintf_r+0x44>
 8000e3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000e40:	e71e      	b.n	8000c80 <_vfiprintf_r+0x48>
 8000e42:	ab03      	add	r3, sp, #12
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	462a      	mov	r2, r5
 8000e48:	4b05      	ldr	r3, [pc, #20]	@ (8000e60 <_vfiprintf_r+0x228>)
 8000e4a:	a904      	add	r1, sp, #16
 8000e4c:	4630      	mov	r0, r6
 8000e4e:	f000 f879 	bl	8000f44 <_printf_i>
 8000e52:	e7e4      	b.n	8000e1e <_vfiprintf_r+0x1e6>
 8000e54:	08001558 	.word	0x08001558
 8000e58:	08001562 	.word	0x08001562
 8000e5c:	00000000 	.word	0x00000000
 8000e60:	08000c13 	.word	0x08000c13
 8000e64:	0800155e 	.word	0x0800155e

08000e68 <_printf_common>:
 8000e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e6c:	4616      	mov	r6, r2
 8000e6e:	4698      	mov	r8, r3
 8000e70:	688a      	ldr	r2, [r1, #8]
 8000e72:	690b      	ldr	r3, [r1, #16]
 8000e74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e78:	4293      	cmp	r3, r2
 8000e7a:	bfb8      	it	lt
 8000e7c:	4613      	movlt	r3, r2
 8000e7e:	6033      	str	r3, [r6, #0]
 8000e80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000e84:	4607      	mov	r7, r0
 8000e86:	460c      	mov	r4, r1
 8000e88:	b10a      	cbz	r2, 8000e8e <_printf_common+0x26>
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	6033      	str	r3, [r6, #0]
 8000e8e:	6823      	ldr	r3, [r4, #0]
 8000e90:	0699      	lsls	r1, r3, #26
 8000e92:	bf42      	ittt	mi
 8000e94:	6833      	ldrmi	r3, [r6, #0]
 8000e96:	3302      	addmi	r3, #2
 8000e98:	6033      	strmi	r3, [r6, #0]
 8000e9a:	6825      	ldr	r5, [r4, #0]
 8000e9c:	f015 0506 	ands.w	r5, r5, #6
 8000ea0:	d106      	bne.n	8000eb0 <_printf_common+0x48>
 8000ea2:	f104 0a19 	add.w	sl, r4, #25
 8000ea6:	68e3      	ldr	r3, [r4, #12]
 8000ea8:	6832      	ldr	r2, [r6, #0]
 8000eaa:	1a9b      	subs	r3, r3, r2
 8000eac:	42ab      	cmp	r3, r5
 8000eae:	dc26      	bgt.n	8000efe <_printf_common+0x96>
 8000eb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000eb4:	6822      	ldr	r2, [r4, #0]
 8000eb6:	3b00      	subs	r3, #0
 8000eb8:	bf18      	it	ne
 8000eba:	2301      	movne	r3, #1
 8000ebc:	0692      	lsls	r2, r2, #26
 8000ebe:	d42b      	bmi.n	8000f18 <_printf_common+0xb0>
 8000ec0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ec4:	4641      	mov	r1, r8
 8000ec6:	4638      	mov	r0, r7
 8000ec8:	47c8      	blx	r9
 8000eca:	3001      	adds	r0, #1
 8000ecc:	d01e      	beq.n	8000f0c <_printf_common+0xa4>
 8000ece:	6823      	ldr	r3, [r4, #0]
 8000ed0:	6922      	ldr	r2, [r4, #16]
 8000ed2:	f003 0306 	and.w	r3, r3, #6
 8000ed6:	2b04      	cmp	r3, #4
 8000ed8:	bf02      	ittt	eq
 8000eda:	68e5      	ldreq	r5, [r4, #12]
 8000edc:	6833      	ldreq	r3, [r6, #0]
 8000ede:	1aed      	subeq	r5, r5, r3
 8000ee0:	68a3      	ldr	r3, [r4, #8]
 8000ee2:	bf0c      	ite	eq
 8000ee4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ee8:	2500      	movne	r5, #0
 8000eea:	4293      	cmp	r3, r2
 8000eec:	bfc4      	itt	gt
 8000eee:	1a9b      	subgt	r3, r3, r2
 8000ef0:	18ed      	addgt	r5, r5, r3
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	341a      	adds	r4, #26
 8000ef6:	42b5      	cmp	r5, r6
 8000ef8:	d11a      	bne.n	8000f30 <_printf_common+0xc8>
 8000efa:	2000      	movs	r0, #0
 8000efc:	e008      	b.n	8000f10 <_printf_common+0xa8>
 8000efe:	2301      	movs	r3, #1
 8000f00:	4652      	mov	r2, sl
 8000f02:	4641      	mov	r1, r8
 8000f04:	4638      	mov	r0, r7
 8000f06:	47c8      	blx	r9
 8000f08:	3001      	adds	r0, #1
 8000f0a:	d103      	bne.n	8000f14 <_printf_common+0xac>
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f14:	3501      	adds	r5, #1
 8000f16:	e7c6      	b.n	8000ea6 <_printf_common+0x3e>
 8000f18:	18e1      	adds	r1, r4, r3
 8000f1a:	1c5a      	adds	r2, r3, #1
 8000f1c:	2030      	movs	r0, #48	@ 0x30
 8000f1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f22:	4422      	add	r2, r4
 8000f24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f2c:	3302      	adds	r3, #2
 8000f2e:	e7c7      	b.n	8000ec0 <_printf_common+0x58>
 8000f30:	2301      	movs	r3, #1
 8000f32:	4622      	mov	r2, r4
 8000f34:	4641      	mov	r1, r8
 8000f36:	4638      	mov	r0, r7
 8000f38:	47c8      	blx	r9
 8000f3a:	3001      	adds	r0, #1
 8000f3c:	d0e6      	beq.n	8000f0c <_printf_common+0xa4>
 8000f3e:	3601      	adds	r6, #1
 8000f40:	e7d9      	b.n	8000ef6 <_printf_common+0x8e>
	...

08000f44 <_printf_i>:
 8000f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f48:	7e0f      	ldrb	r7, [r1, #24]
 8000f4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f4c:	2f78      	cmp	r7, #120	@ 0x78
 8000f4e:	4691      	mov	r9, r2
 8000f50:	4680      	mov	r8, r0
 8000f52:	460c      	mov	r4, r1
 8000f54:	469a      	mov	sl, r3
 8000f56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f5a:	d807      	bhi.n	8000f6c <_printf_i+0x28>
 8000f5c:	2f62      	cmp	r7, #98	@ 0x62
 8000f5e:	d80a      	bhi.n	8000f76 <_printf_i+0x32>
 8000f60:	2f00      	cmp	r7, #0
 8000f62:	f000 80d2 	beq.w	800110a <_printf_i+0x1c6>
 8000f66:	2f58      	cmp	r7, #88	@ 0x58
 8000f68:	f000 80b9 	beq.w	80010de <_printf_i+0x19a>
 8000f6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f74:	e03a      	b.n	8000fec <_printf_i+0xa8>
 8000f76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f7a:	2b15      	cmp	r3, #21
 8000f7c:	d8f6      	bhi.n	8000f6c <_printf_i+0x28>
 8000f7e:	a101      	add	r1, pc, #4	@ (adr r1, 8000f84 <_printf_i+0x40>)
 8000f80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f84:	08000fdd 	.word	0x08000fdd
 8000f88:	08000ff1 	.word	0x08000ff1
 8000f8c:	08000f6d 	.word	0x08000f6d
 8000f90:	08000f6d 	.word	0x08000f6d
 8000f94:	08000f6d 	.word	0x08000f6d
 8000f98:	08000f6d 	.word	0x08000f6d
 8000f9c:	08000ff1 	.word	0x08000ff1
 8000fa0:	08000f6d 	.word	0x08000f6d
 8000fa4:	08000f6d 	.word	0x08000f6d
 8000fa8:	08000f6d 	.word	0x08000f6d
 8000fac:	08000f6d 	.word	0x08000f6d
 8000fb0:	080010f1 	.word	0x080010f1
 8000fb4:	0800101b 	.word	0x0800101b
 8000fb8:	080010ab 	.word	0x080010ab
 8000fbc:	08000f6d 	.word	0x08000f6d
 8000fc0:	08000f6d 	.word	0x08000f6d
 8000fc4:	08001113 	.word	0x08001113
 8000fc8:	08000f6d 	.word	0x08000f6d
 8000fcc:	0800101b 	.word	0x0800101b
 8000fd0:	08000f6d 	.word	0x08000f6d
 8000fd4:	08000f6d 	.word	0x08000f6d
 8000fd8:	080010b3 	.word	0x080010b3
 8000fdc:	6833      	ldr	r3, [r6, #0]
 8000fde:	1d1a      	adds	r2, r3, #4
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6032      	str	r2, [r6, #0]
 8000fe4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000fe8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000fec:	2301      	movs	r3, #1
 8000fee:	e09d      	b.n	800112c <_printf_i+0x1e8>
 8000ff0:	6833      	ldr	r3, [r6, #0]
 8000ff2:	6820      	ldr	r0, [r4, #0]
 8000ff4:	1d19      	adds	r1, r3, #4
 8000ff6:	6031      	str	r1, [r6, #0]
 8000ff8:	0606      	lsls	r6, r0, #24
 8000ffa:	d501      	bpl.n	8001000 <_printf_i+0xbc>
 8000ffc:	681d      	ldr	r5, [r3, #0]
 8000ffe:	e003      	b.n	8001008 <_printf_i+0xc4>
 8001000:	0645      	lsls	r5, r0, #25
 8001002:	d5fb      	bpl.n	8000ffc <_printf_i+0xb8>
 8001004:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001008:	2d00      	cmp	r5, #0
 800100a:	da03      	bge.n	8001014 <_printf_i+0xd0>
 800100c:	232d      	movs	r3, #45	@ 0x2d
 800100e:	426d      	negs	r5, r5
 8001010:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001014:	4859      	ldr	r0, [pc, #356]	@ (800117c <_printf_i+0x238>)
 8001016:	230a      	movs	r3, #10
 8001018:	e011      	b.n	800103e <_printf_i+0xfa>
 800101a:	6821      	ldr	r1, [r4, #0]
 800101c:	6833      	ldr	r3, [r6, #0]
 800101e:	0608      	lsls	r0, r1, #24
 8001020:	f853 5b04 	ldr.w	r5, [r3], #4
 8001024:	d402      	bmi.n	800102c <_printf_i+0xe8>
 8001026:	0649      	lsls	r1, r1, #25
 8001028:	bf48      	it	mi
 800102a:	b2ad      	uxthmi	r5, r5
 800102c:	2f6f      	cmp	r7, #111	@ 0x6f
 800102e:	4853      	ldr	r0, [pc, #332]	@ (800117c <_printf_i+0x238>)
 8001030:	6033      	str	r3, [r6, #0]
 8001032:	bf14      	ite	ne
 8001034:	230a      	movne	r3, #10
 8001036:	2308      	moveq	r3, #8
 8001038:	2100      	movs	r1, #0
 800103a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800103e:	6866      	ldr	r6, [r4, #4]
 8001040:	60a6      	str	r6, [r4, #8]
 8001042:	2e00      	cmp	r6, #0
 8001044:	bfa2      	ittt	ge
 8001046:	6821      	ldrge	r1, [r4, #0]
 8001048:	f021 0104 	bicge.w	r1, r1, #4
 800104c:	6021      	strge	r1, [r4, #0]
 800104e:	b90d      	cbnz	r5, 8001054 <_printf_i+0x110>
 8001050:	2e00      	cmp	r6, #0
 8001052:	d04b      	beq.n	80010ec <_printf_i+0x1a8>
 8001054:	4616      	mov	r6, r2
 8001056:	fbb5 f1f3 	udiv	r1, r5, r3
 800105a:	fb03 5711 	mls	r7, r3, r1, r5
 800105e:	5dc7      	ldrb	r7, [r0, r7]
 8001060:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001064:	462f      	mov	r7, r5
 8001066:	42bb      	cmp	r3, r7
 8001068:	460d      	mov	r5, r1
 800106a:	d9f4      	bls.n	8001056 <_printf_i+0x112>
 800106c:	2b08      	cmp	r3, #8
 800106e:	d10b      	bne.n	8001088 <_printf_i+0x144>
 8001070:	6823      	ldr	r3, [r4, #0]
 8001072:	07df      	lsls	r7, r3, #31
 8001074:	d508      	bpl.n	8001088 <_printf_i+0x144>
 8001076:	6923      	ldr	r3, [r4, #16]
 8001078:	6861      	ldr	r1, [r4, #4]
 800107a:	4299      	cmp	r1, r3
 800107c:	bfde      	ittt	le
 800107e:	2330      	movle	r3, #48	@ 0x30
 8001080:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001084:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8001088:	1b92      	subs	r2, r2, r6
 800108a:	6122      	str	r2, [r4, #16]
 800108c:	f8cd a000 	str.w	sl, [sp]
 8001090:	464b      	mov	r3, r9
 8001092:	aa03      	add	r2, sp, #12
 8001094:	4621      	mov	r1, r4
 8001096:	4640      	mov	r0, r8
 8001098:	f7ff fee6 	bl	8000e68 <_printf_common>
 800109c:	3001      	adds	r0, #1
 800109e:	d14a      	bne.n	8001136 <_printf_i+0x1f2>
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010a4:	b004      	add	sp, #16
 80010a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	6023      	str	r3, [r4, #0]
 80010b2:	4833      	ldr	r0, [pc, #204]	@ (8001180 <_printf_i+0x23c>)
 80010b4:	2778      	movs	r7, #120	@ 0x78
 80010b6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010ba:	6823      	ldr	r3, [r4, #0]
 80010bc:	6831      	ldr	r1, [r6, #0]
 80010be:	061f      	lsls	r7, r3, #24
 80010c0:	f851 5b04 	ldr.w	r5, [r1], #4
 80010c4:	d402      	bmi.n	80010cc <_printf_i+0x188>
 80010c6:	065f      	lsls	r7, r3, #25
 80010c8:	bf48      	it	mi
 80010ca:	b2ad      	uxthmi	r5, r5
 80010cc:	6031      	str	r1, [r6, #0]
 80010ce:	07d9      	lsls	r1, r3, #31
 80010d0:	bf44      	itt	mi
 80010d2:	f043 0320 	orrmi.w	r3, r3, #32
 80010d6:	6023      	strmi	r3, [r4, #0]
 80010d8:	b11d      	cbz	r5, 80010e2 <_printf_i+0x19e>
 80010da:	2310      	movs	r3, #16
 80010dc:	e7ac      	b.n	8001038 <_printf_i+0xf4>
 80010de:	4827      	ldr	r0, [pc, #156]	@ (800117c <_printf_i+0x238>)
 80010e0:	e7e9      	b.n	80010b6 <_printf_i+0x172>
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	f023 0320 	bic.w	r3, r3, #32
 80010e8:	6023      	str	r3, [r4, #0]
 80010ea:	e7f6      	b.n	80010da <_printf_i+0x196>
 80010ec:	4616      	mov	r6, r2
 80010ee:	e7bd      	b.n	800106c <_printf_i+0x128>
 80010f0:	6833      	ldr	r3, [r6, #0]
 80010f2:	6825      	ldr	r5, [r4, #0]
 80010f4:	6961      	ldr	r1, [r4, #20]
 80010f6:	1d18      	adds	r0, r3, #4
 80010f8:	6030      	str	r0, [r6, #0]
 80010fa:	062e      	lsls	r6, r5, #24
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	d501      	bpl.n	8001104 <_printf_i+0x1c0>
 8001100:	6019      	str	r1, [r3, #0]
 8001102:	e002      	b.n	800110a <_printf_i+0x1c6>
 8001104:	0668      	lsls	r0, r5, #25
 8001106:	d5fb      	bpl.n	8001100 <_printf_i+0x1bc>
 8001108:	8019      	strh	r1, [r3, #0]
 800110a:	2300      	movs	r3, #0
 800110c:	6123      	str	r3, [r4, #16]
 800110e:	4616      	mov	r6, r2
 8001110:	e7bc      	b.n	800108c <_printf_i+0x148>
 8001112:	6833      	ldr	r3, [r6, #0]
 8001114:	1d1a      	adds	r2, r3, #4
 8001116:	6032      	str	r2, [r6, #0]
 8001118:	681e      	ldr	r6, [r3, #0]
 800111a:	6862      	ldr	r2, [r4, #4]
 800111c:	2100      	movs	r1, #0
 800111e:	4630      	mov	r0, r6
 8001120:	f7ff f85e 	bl	80001e0 <memchr>
 8001124:	b108      	cbz	r0, 800112a <_printf_i+0x1e6>
 8001126:	1b80      	subs	r0, r0, r6
 8001128:	6060      	str	r0, [r4, #4]
 800112a:	6863      	ldr	r3, [r4, #4]
 800112c:	6123      	str	r3, [r4, #16]
 800112e:	2300      	movs	r3, #0
 8001130:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001134:	e7aa      	b.n	800108c <_printf_i+0x148>
 8001136:	6923      	ldr	r3, [r4, #16]
 8001138:	4632      	mov	r2, r6
 800113a:	4649      	mov	r1, r9
 800113c:	4640      	mov	r0, r8
 800113e:	47d0      	blx	sl
 8001140:	3001      	adds	r0, #1
 8001142:	d0ad      	beq.n	80010a0 <_printf_i+0x15c>
 8001144:	6823      	ldr	r3, [r4, #0]
 8001146:	079b      	lsls	r3, r3, #30
 8001148:	d413      	bmi.n	8001172 <_printf_i+0x22e>
 800114a:	68e0      	ldr	r0, [r4, #12]
 800114c:	9b03      	ldr	r3, [sp, #12]
 800114e:	4298      	cmp	r0, r3
 8001150:	bfb8      	it	lt
 8001152:	4618      	movlt	r0, r3
 8001154:	e7a6      	b.n	80010a4 <_printf_i+0x160>
 8001156:	2301      	movs	r3, #1
 8001158:	4632      	mov	r2, r6
 800115a:	4649      	mov	r1, r9
 800115c:	4640      	mov	r0, r8
 800115e:	47d0      	blx	sl
 8001160:	3001      	adds	r0, #1
 8001162:	d09d      	beq.n	80010a0 <_printf_i+0x15c>
 8001164:	3501      	adds	r5, #1
 8001166:	68e3      	ldr	r3, [r4, #12]
 8001168:	9903      	ldr	r1, [sp, #12]
 800116a:	1a5b      	subs	r3, r3, r1
 800116c:	42ab      	cmp	r3, r5
 800116e:	dcf2      	bgt.n	8001156 <_printf_i+0x212>
 8001170:	e7eb      	b.n	800114a <_printf_i+0x206>
 8001172:	2500      	movs	r5, #0
 8001174:	f104 0619 	add.w	r6, r4, #25
 8001178:	e7f5      	b.n	8001166 <_printf_i+0x222>
 800117a:	bf00      	nop
 800117c:	08001569 	.word	0x08001569
 8001180:	0800157a 	.word	0x0800157a

08001184 <__sflush_r>:
 8001184:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800118c:	0716      	lsls	r6, r2, #28
 800118e:	4605      	mov	r5, r0
 8001190:	460c      	mov	r4, r1
 8001192:	d454      	bmi.n	800123e <__sflush_r+0xba>
 8001194:	684b      	ldr	r3, [r1, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	dc02      	bgt.n	80011a0 <__sflush_r+0x1c>
 800119a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800119c:	2b00      	cmp	r3, #0
 800119e:	dd48      	ble.n	8001232 <__sflush_r+0xae>
 80011a0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011a2:	2e00      	cmp	r6, #0
 80011a4:	d045      	beq.n	8001232 <__sflush_r+0xae>
 80011a6:	2300      	movs	r3, #0
 80011a8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011ac:	682f      	ldr	r7, [r5, #0]
 80011ae:	6a21      	ldr	r1, [r4, #32]
 80011b0:	602b      	str	r3, [r5, #0]
 80011b2:	d030      	beq.n	8001216 <__sflush_r+0x92>
 80011b4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011b6:	89a3      	ldrh	r3, [r4, #12]
 80011b8:	0759      	lsls	r1, r3, #29
 80011ba:	d505      	bpl.n	80011c8 <__sflush_r+0x44>
 80011bc:	6863      	ldr	r3, [r4, #4]
 80011be:	1ad2      	subs	r2, r2, r3
 80011c0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011c2:	b10b      	cbz	r3, 80011c8 <__sflush_r+0x44>
 80011c4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011c6:	1ad2      	subs	r2, r2, r3
 80011c8:	2300      	movs	r3, #0
 80011ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011cc:	6a21      	ldr	r1, [r4, #32]
 80011ce:	4628      	mov	r0, r5
 80011d0:	47b0      	blx	r6
 80011d2:	1c43      	adds	r3, r0, #1
 80011d4:	89a3      	ldrh	r3, [r4, #12]
 80011d6:	d106      	bne.n	80011e6 <__sflush_r+0x62>
 80011d8:	6829      	ldr	r1, [r5, #0]
 80011da:	291d      	cmp	r1, #29
 80011dc:	d82b      	bhi.n	8001236 <__sflush_r+0xb2>
 80011de:	4a2a      	ldr	r2, [pc, #168]	@ (8001288 <__sflush_r+0x104>)
 80011e0:	410a      	asrs	r2, r1
 80011e2:	07d6      	lsls	r6, r2, #31
 80011e4:	d427      	bmi.n	8001236 <__sflush_r+0xb2>
 80011e6:	2200      	movs	r2, #0
 80011e8:	6062      	str	r2, [r4, #4]
 80011ea:	04d9      	lsls	r1, r3, #19
 80011ec:	6922      	ldr	r2, [r4, #16]
 80011ee:	6022      	str	r2, [r4, #0]
 80011f0:	d504      	bpl.n	80011fc <__sflush_r+0x78>
 80011f2:	1c42      	adds	r2, r0, #1
 80011f4:	d101      	bne.n	80011fa <__sflush_r+0x76>
 80011f6:	682b      	ldr	r3, [r5, #0]
 80011f8:	b903      	cbnz	r3, 80011fc <__sflush_r+0x78>
 80011fa:	6560      	str	r0, [r4, #84]	@ 0x54
 80011fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011fe:	602f      	str	r7, [r5, #0]
 8001200:	b1b9      	cbz	r1, 8001232 <__sflush_r+0xae>
 8001202:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001206:	4299      	cmp	r1, r3
 8001208:	d002      	beq.n	8001210 <__sflush_r+0x8c>
 800120a:	4628      	mov	r0, r5
 800120c:	f7ff fbf2 	bl	80009f4 <_free_r>
 8001210:	2300      	movs	r3, #0
 8001212:	6363      	str	r3, [r4, #52]	@ 0x34
 8001214:	e00d      	b.n	8001232 <__sflush_r+0xae>
 8001216:	2301      	movs	r3, #1
 8001218:	4628      	mov	r0, r5
 800121a:	47b0      	blx	r6
 800121c:	4602      	mov	r2, r0
 800121e:	1c50      	adds	r0, r2, #1
 8001220:	d1c9      	bne.n	80011b6 <__sflush_r+0x32>
 8001222:	682b      	ldr	r3, [r5, #0]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d0c6      	beq.n	80011b6 <__sflush_r+0x32>
 8001228:	2b1d      	cmp	r3, #29
 800122a:	d001      	beq.n	8001230 <__sflush_r+0xac>
 800122c:	2b16      	cmp	r3, #22
 800122e:	d11e      	bne.n	800126e <__sflush_r+0xea>
 8001230:	602f      	str	r7, [r5, #0]
 8001232:	2000      	movs	r0, #0
 8001234:	e022      	b.n	800127c <__sflush_r+0xf8>
 8001236:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800123a:	b21b      	sxth	r3, r3
 800123c:	e01b      	b.n	8001276 <__sflush_r+0xf2>
 800123e:	690f      	ldr	r7, [r1, #16]
 8001240:	2f00      	cmp	r7, #0
 8001242:	d0f6      	beq.n	8001232 <__sflush_r+0xae>
 8001244:	0793      	lsls	r3, r2, #30
 8001246:	680e      	ldr	r6, [r1, #0]
 8001248:	bf08      	it	eq
 800124a:	694b      	ldreq	r3, [r1, #20]
 800124c:	600f      	str	r7, [r1, #0]
 800124e:	bf18      	it	ne
 8001250:	2300      	movne	r3, #0
 8001252:	eba6 0807 	sub.w	r8, r6, r7
 8001256:	608b      	str	r3, [r1, #8]
 8001258:	f1b8 0f00 	cmp.w	r8, #0
 800125c:	dde9      	ble.n	8001232 <__sflush_r+0xae>
 800125e:	6a21      	ldr	r1, [r4, #32]
 8001260:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001262:	4643      	mov	r3, r8
 8001264:	463a      	mov	r2, r7
 8001266:	4628      	mov	r0, r5
 8001268:	47b0      	blx	r6
 800126a:	2800      	cmp	r0, #0
 800126c:	dc08      	bgt.n	8001280 <__sflush_r+0xfc>
 800126e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001272:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001276:	81a3      	strh	r3, [r4, #12]
 8001278:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800127c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001280:	4407      	add	r7, r0
 8001282:	eba8 0800 	sub.w	r8, r8, r0
 8001286:	e7e7      	b.n	8001258 <__sflush_r+0xd4>
 8001288:	dfbffffe 	.word	0xdfbffffe

0800128c <_fflush_r>:
 800128c:	b538      	push	{r3, r4, r5, lr}
 800128e:	690b      	ldr	r3, [r1, #16]
 8001290:	4605      	mov	r5, r0
 8001292:	460c      	mov	r4, r1
 8001294:	b913      	cbnz	r3, 800129c <_fflush_r+0x10>
 8001296:	2500      	movs	r5, #0
 8001298:	4628      	mov	r0, r5
 800129a:	bd38      	pop	{r3, r4, r5, pc}
 800129c:	b118      	cbz	r0, 80012a6 <_fflush_r+0x1a>
 800129e:	6a03      	ldr	r3, [r0, #32]
 80012a0:	b90b      	cbnz	r3, 80012a6 <_fflush_r+0x1a>
 80012a2:	f7ff fa9f 	bl	80007e4 <__sinit>
 80012a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d0f3      	beq.n	8001296 <_fflush_r+0xa>
 80012ae:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012b0:	07d0      	lsls	r0, r2, #31
 80012b2:	d404      	bmi.n	80012be <_fflush_r+0x32>
 80012b4:	0599      	lsls	r1, r3, #22
 80012b6:	d402      	bmi.n	80012be <_fflush_r+0x32>
 80012b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012ba:	f7ff fb98 	bl	80009ee <__retarget_lock_acquire_recursive>
 80012be:	4628      	mov	r0, r5
 80012c0:	4621      	mov	r1, r4
 80012c2:	f7ff ff5f 	bl	8001184 <__sflush_r>
 80012c6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012c8:	07da      	lsls	r2, r3, #31
 80012ca:	4605      	mov	r5, r0
 80012cc:	d4e4      	bmi.n	8001298 <_fflush_r+0xc>
 80012ce:	89a3      	ldrh	r3, [r4, #12]
 80012d0:	059b      	lsls	r3, r3, #22
 80012d2:	d4e1      	bmi.n	8001298 <_fflush_r+0xc>
 80012d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012d6:	f7ff fb8b 	bl	80009f0 <__retarget_lock_release_recursive>
 80012da:	e7dd      	b.n	8001298 <_fflush_r+0xc>

080012dc <__swbuf_r>:
 80012dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012de:	460e      	mov	r6, r1
 80012e0:	4614      	mov	r4, r2
 80012e2:	4605      	mov	r5, r0
 80012e4:	b118      	cbz	r0, 80012ee <__swbuf_r+0x12>
 80012e6:	6a03      	ldr	r3, [r0, #32]
 80012e8:	b90b      	cbnz	r3, 80012ee <__swbuf_r+0x12>
 80012ea:	f7ff fa7b 	bl	80007e4 <__sinit>
 80012ee:	69a3      	ldr	r3, [r4, #24]
 80012f0:	60a3      	str	r3, [r4, #8]
 80012f2:	89a3      	ldrh	r3, [r4, #12]
 80012f4:	071a      	lsls	r2, r3, #28
 80012f6:	d501      	bpl.n	80012fc <__swbuf_r+0x20>
 80012f8:	6923      	ldr	r3, [r4, #16]
 80012fa:	b943      	cbnz	r3, 800130e <__swbuf_r+0x32>
 80012fc:	4621      	mov	r1, r4
 80012fe:	4628      	mov	r0, r5
 8001300:	f000 f82a 	bl	8001358 <__swsetup_r>
 8001304:	b118      	cbz	r0, 800130e <__swbuf_r+0x32>
 8001306:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800130a:	4638      	mov	r0, r7
 800130c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	6922      	ldr	r2, [r4, #16]
 8001312:	1a98      	subs	r0, r3, r2
 8001314:	6963      	ldr	r3, [r4, #20]
 8001316:	b2f6      	uxtb	r6, r6
 8001318:	4283      	cmp	r3, r0
 800131a:	4637      	mov	r7, r6
 800131c:	dc05      	bgt.n	800132a <__swbuf_r+0x4e>
 800131e:	4621      	mov	r1, r4
 8001320:	4628      	mov	r0, r5
 8001322:	f7ff ffb3 	bl	800128c <_fflush_r>
 8001326:	2800      	cmp	r0, #0
 8001328:	d1ed      	bne.n	8001306 <__swbuf_r+0x2a>
 800132a:	68a3      	ldr	r3, [r4, #8]
 800132c:	3b01      	subs	r3, #1
 800132e:	60a3      	str	r3, [r4, #8]
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	1c5a      	adds	r2, r3, #1
 8001334:	6022      	str	r2, [r4, #0]
 8001336:	701e      	strb	r6, [r3, #0]
 8001338:	6962      	ldr	r2, [r4, #20]
 800133a:	1c43      	adds	r3, r0, #1
 800133c:	429a      	cmp	r2, r3
 800133e:	d004      	beq.n	800134a <__swbuf_r+0x6e>
 8001340:	89a3      	ldrh	r3, [r4, #12]
 8001342:	07db      	lsls	r3, r3, #31
 8001344:	d5e1      	bpl.n	800130a <__swbuf_r+0x2e>
 8001346:	2e0a      	cmp	r6, #10
 8001348:	d1df      	bne.n	800130a <__swbuf_r+0x2e>
 800134a:	4621      	mov	r1, r4
 800134c:	4628      	mov	r0, r5
 800134e:	f7ff ff9d 	bl	800128c <_fflush_r>
 8001352:	2800      	cmp	r0, #0
 8001354:	d0d9      	beq.n	800130a <__swbuf_r+0x2e>
 8001356:	e7d6      	b.n	8001306 <__swbuf_r+0x2a>

08001358 <__swsetup_r>:
 8001358:	b538      	push	{r3, r4, r5, lr}
 800135a:	4b29      	ldr	r3, [pc, #164]	@ (8001400 <__swsetup_r+0xa8>)
 800135c:	4605      	mov	r5, r0
 800135e:	6818      	ldr	r0, [r3, #0]
 8001360:	460c      	mov	r4, r1
 8001362:	b118      	cbz	r0, 800136c <__swsetup_r+0x14>
 8001364:	6a03      	ldr	r3, [r0, #32]
 8001366:	b90b      	cbnz	r3, 800136c <__swsetup_r+0x14>
 8001368:	f7ff fa3c 	bl	80007e4 <__sinit>
 800136c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001370:	0719      	lsls	r1, r3, #28
 8001372:	d422      	bmi.n	80013ba <__swsetup_r+0x62>
 8001374:	06da      	lsls	r2, r3, #27
 8001376:	d407      	bmi.n	8001388 <__swsetup_r+0x30>
 8001378:	2209      	movs	r2, #9
 800137a:	602a      	str	r2, [r5, #0]
 800137c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001380:	81a3      	strh	r3, [r4, #12]
 8001382:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001386:	e033      	b.n	80013f0 <__swsetup_r+0x98>
 8001388:	0758      	lsls	r0, r3, #29
 800138a:	d512      	bpl.n	80013b2 <__swsetup_r+0x5a>
 800138c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800138e:	b141      	cbz	r1, 80013a2 <__swsetup_r+0x4a>
 8001390:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001394:	4299      	cmp	r1, r3
 8001396:	d002      	beq.n	800139e <__swsetup_r+0x46>
 8001398:	4628      	mov	r0, r5
 800139a:	f7ff fb2b 	bl	80009f4 <_free_r>
 800139e:	2300      	movs	r3, #0
 80013a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80013a2:	89a3      	ldrh	r3, [r4, #12]
 80013a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80013a8:	81a3      	strh	r3, [r4, #12]
 80013aa:	2300      	movs	r3, #0
 80013ac:	6063      	str	r3, [r4, #4]
 80013ae:	6923      	ldr	r3, [r4, #16]
 80013b0:	6023      	str	r3, [r4, #0]
 80013b2:	89a3      	ldrh	r3, [r4, #12]
 80013b4:	f043 0308 	orr.w	r3, r3, #8
 80013b8:	81a3      	strh	r3, [r4, #12]
 80013ba:	6923      	ldr	r3, [r4, #16]
 80013bc:	b94b      	cbnz	r3, 80013d2 <__swsetup_r+0x7a>
 80013be:	89a3      	ldrh	r3, [r4, #12]
 80013c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80013c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80013c8:	d003      	beq.n	80013d2 <__swsetup_r+0x7a>
 80013ca:	4621      	mov	r1, r4
 80013cc:	4628      	mov	r0, r5
 80013ce:	f000 f84f 	bl	8001470 <__smakebuf_r>
 80013d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013d6:	f013 0201 	ands.w	r2, r3, #1
 80013da:	d00a      	beq.n	80013f2 <__swsetup_r+0x9a>
 80013dc:	2200      	movs	r2, #0
 80013de:	60a2      	str	r2, [r4, #8]
 80013e0:	6962      	ldr	r2, [r4, #20]
 80013e2:	4252      	negs	r2, r2
 80013e4:	61a2      	str	r2, [r4, #24]
 80013e6:	6922      	ldr	r2, [r4, #16]
 80013e8:	b942      	cbnz	r2, 80013fc <__swsetup_r+0xa4>
 80013ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80013ee:	d1c5      	bne.n	800137c <__swsetup_r+0x24>
 80013f0:	bd38      	pop	{r3, r4, r5, pc}
 80013f2:	0799      	lsls	r1, r3, #30
 80013f4:	bf58      	it	pl
 80013f6:	6962      	ldrpl	r2, [r4, #20]
 80013f8:	60a2      	str	r2, [r4, #8]
 80013fa:	e7f4      	b.n	80013e6 <__swsetup_r+0x8e>
 80013fc:	2000      	movs	r0, #0
 80013fe:	e7f7      	b.n	80013f0 <__swsetup_r+0x98>
 8001400:	2000000c 	.word	0x2000000c

08001404 <_sbrk_r>:
 8001404:	b538      	push	{r3, r4, r5, lr}
 8001406:	4d06      	ldr	r5, [pc, #24]	@ (8001420 <_sbrk_r+0x1c>)
 8001408:	2300      	movs	r3, #0
 800140a:	4604      	mov	r4, r0
 800140c:	4608      	mov	r0, r1
 800140e:	602b      	str	r3, [r5, #0]
 8001410:	f7ff f842 	bl	8000498 <_sbrk>
 8001414:	1c43      	adds	r3, r0, #1
 8001416:	d102      	bne.n	800141e <_sbrk_r+0x1a>
 8001418:	682b      	ldr	r3, [r5, #0]
 800141a:	b103      	cbz	r3, 800141e <_sbrk_r+0x1a>
 800141c:	6023      	str	r3, [r4, #0]
 800141e:	bd38      	pop	{r3, r4, r5, pc}
 8001420:	200001bc 	.word	0x200001bc

08001424 <__swhatbuf_r>:
 8001424:	b570      	push	{r4, r5, r6, lr}
 8001426:	460c      	mov	r4, r1
 8001428:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800142c:	2900      	cmp	r1, #0
 800142e:	b096      	sub	sp, #88	@ 0x58
 8001430:	4615      	mov	r5, r2
 8001432:	461e      	mov	r6, r3
 8001434:	da0d      	bge.n	8001452 <__swhatbuf_r+0x2e>
 8001436:	89a3      	ldrh	r3, [r4, #12]
 8001438:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800143c:	f04f 0100 	mov.w	r1, #0
 8001440:	bf14      	ite	ne
 8001442:	2340      	movne	r3, #64	@ 0x40
 8001444:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001448:	2000      	movs	r0, #0
 800144a:	6031      	str	r1, [r6, #0]
 800144c:	602b      	str	r3, [r5, #0]
 800144e:	b016      	add	sp, #88	@ 0x58
 8001450:	bd70      	pop	{r4, r5, r6, pc}
 8001452:	466a      	mov	r2, sp
 8001454:	f000 f848 	bl	80014e8 <_fstat_r>
 8001458:	2800      	cmp	r0, #0
 800145a:	dbec      	blt.n	8001436 <__swhatbuf_r+0x12>
 800145c:	9901      	ldr	r1, [sp, #4]
 800145e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001462:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001466:	4259      	negs	r1, r3
 8001468:	4159      	adcs	r1, r3
 800146a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800146e:	e7eb      	b.n	8001448 <__swhatbuf_r+0x24>

08001470 <__smakebuf_r>:
 8001470:	898b      	ldrh	r3, [r1, #12]
 8001472:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001474:	079d      	lsls	r5, r3, #30
 8001476:	4606      	mov	r6, r0
 8001478:	460c      	mov	r4, r1
 800147a:	d507      	bpl.n	800148c <__smakebuf_r+0x1c>
 800147c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001480:	6023      	str	r3, [r4, #0]
 8001482:	6123      	str	r3, [r4, #16]
 8001484:	2301      	movs	r3, #1
 8001486:	6163      	str	r3, [r4, #20]
 8001488:	b003      	add	sp, #12
 800148a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148c:	ab01      	add	r3, sp, #4
 800148e:	466a      	mov	r2, sp
 8001490:	f7ff ffc8 	bl	8001424 <__swhatbuf_r>
 8001494:	9f00      	ldr	r7, [sp, #0]
 8001496:	4605      	mov	r5, r0
 8001498:	4639      	mov	r1, r7
 800149a:	4630      	mov	r0, r6
 800149c:	f7ff fb16 	bl	8000acc <_malloc_r>
 80014a0:	b948      	cbnz	r0, 80014b6 <__smakebuf_r+0x46>
 80014a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014a6:	059a      	lsls	r2, r3, #22
 80014a8:	d4ee      	bmi.n	8001488 <__smakebuf_r+0x18>
 80014aa:	f023 0303 	bic.w	r3, r3, #3
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	81a3      	strh	r3, [r4, #12]
 80014b4:	e7e2      	b.n	800147c <__smakebuf_r+0xc>
 80014b6:	89a3      	ldrh	r3, [r4, #12]
 80014b8:	6020      	str	r0, [r4, #0]
 80014ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014be:	81a3      	strh	r3, [r4, #12]
 80014c0:	9b01      	ldr	r3, [sp, #4]
 80014c2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80014c6:	b15b      	cbz	r3, 80014e0 <__smakebuf_r+0x70>
 80014c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014cc:	4630      	mov	r0, r6
 80014ce:	f000 f81d 	bl	800150c <_isatty_r>
 80014d2:	b128      	cbz	r0, 80014e0 <__smakebuf_r+0x70>
 80014d4:	89a3      	ldrh	r3, [r4, #12]
 80014d6:	f023 0303 	bic.w	r3, r3, #3
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	81a3      	strh	r3, [r4, #12]
 80014e0:	89a3      	ldrh	r3, [r4, #12]
 80014e2:	431d      	orrs	r5, r3
 80014e4:	81a5      	strh	r5, [r4, #12]
 80014e6:	e7cf      	b.n	8001488 <__smakebuf_r+0x18>

080014e8 <_fstat_r>:
 80014e8:	b538      	push	{r3, r4, r5, lr}
 80014ea:	4d07      	ldr	r5, [pc, #28]	@ (8001508 <_fstat_r+0x20>)
 80014ec:	2300      	movs	r3, #0
 80014ee:	4604      	mov	r4, r0
 80014f0:	4608      	mov	r0, r1
 80014f2:	4611      	mov	r1, r2
 80014f4:	602b      	str	r3, [r5, #0]
 80014f6:	f7fe ffa6 	bl	8000446 <_fstat>
 80014fa:	1c43      	adds	r3, r0, #1
 80014fc:	d102      	bne.n	8001504 <_fstat_r+0x1c>
 80014fe:	682b      	ldr	r3, [r5, #0]
 8001500:	b103      	cbz	r3, 8001504 <_fstat_r+0x1c>
 8001502:	6023      	str	r3, [r4, #0]
 8001504:	bd38      	pop	{r3, r4, r5, pc}
 8001506:	bf00      	nop
 8001508:	200001bc 	.word	0x200001bc

0800150c <_isatty_r>:
 800150c:	b538      	push	{r3, r4, r5, lr}
 800150e:	4d06      	ldr	r5, [pc, #24]	@ (8001528 <_isatty_r+0x1c>)
 8001510:	2300      	movs	r3, #0
 8001512:	4604      	mov	r4, r0
 8001514:	4608      	mov	r0, r1
 8001516:	602b      	str	r3, [r5, #0]
 8001518:	f7fe ffa5 	bl	8000466 <_isatty>
 800151c:	1c43      	adds	r3, r0, #1
 800151e:	d102      	bne.n	8001526 <_isatty_r+0x1a>
 8001520:	682b      	ldr	r3, [r5, #0]
 8001522:	b103      	cbz	r3, 8001526 <_isatty_r+0x1a>
 8001524:	6023      	str	r3, [r4, #0]
 8001526:	bd38      	pop	{r3, r4, r5, pc}
 8001528:	200001bc 	.word	0x200001bc

0800152c <_init>:
 800152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800152e:	bf00      	nop
 8001530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001532:	bc08      	pop	{r3}
 8001534:	469e      	mov	lr, r3
 8001536:	4770      	bx	lr

08001538 <_fini>:
 8001538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153a:	bf00      	nop
 800153c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800153e:	bc08      	pop	{r3}
 8001540:	469e      	mov	lr, r3
 8001542:	4770      	bx	lr
